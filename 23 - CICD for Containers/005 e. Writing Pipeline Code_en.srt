1
00:00:00,980 --> 00:00:02,719
So now we'll get started.

2
00:00:03,420 --> 00:00:05,190
With Jenkins file.

3
00:00:05,460 --> 00:00:09,690
As we discussed, we're going to have Pipeline as a code, so we'll write a Jenkins file.

4
00:00:10,080 --> 00:00:14,670
So open your IntelliJ and let's create a new project from portion control.

5
00:00:16,420 --> 00:00:19,930
So from the same repository as we have committed the code.

6
00:00:22,730 --> 00:00:29,600
Again, if you have not written or you have not created the repository, you can use our secede Q branch

7
00:00:29,600 --> 00:00:31,960
from our GitHub repository.

8
00:00:31,970 --> 00:00:36,650
Or if you have created, then clone the source code.

9
00:00:41,680 --> 00:00:44,530
Okay, So you should see your health charts over here.

10
00:00:46,930 --> 00:00:48,790
We're going to create a new file.

11
00:00:51,810 --> 00:00:54,060
Named as Jenkins filed J Capital.

12
00:00:57,970 --> 00:00:59,050
So from the project.

13
00:00:59,050 --> 00:01:01,840
Jenkins pipeline as a code we should have.

14
00:01:05,030 --> 00:01:08,630
The Jenkins file will use the same and will make the changes.

15
00:01:08,780 --> 00:01:11,540
So in the branch pipeline is a code.

16
00:01:15,800 --> 00:01:19,190
Okay, this is in the repository view Profile project Repository.

17
00:01:19,550 --> 00:01:21,880
You should have in pipeline as a code branch.

18
00:01:21,890 --> 00:01:23,420
You should have Jenkins file.

19
00:01:25,610 --> 00:01:29,390
So we'll take this file, we'll copy everything, and then we'll make the changes.

20
00:01:41,310 --> 00:01:47,250
So we are not uploading Artifact to Nexis, so we are going to remove this stage.

21
00:01:50,280 --> 00:01:51,990
Make sure you take it correctly.

22
00:01:53,230 --> 00:01:55,180
Where this curly braces is closed.

23
00:01:55,210 --> 00:01:56,230
Let's remove that.

24
00:02:01,410 --> 00:02:02,490
I scroll up.

25
00:02:02,610 --> 00:02:08,430
We should have the sort of nexus variable that we were passing, so let's remove those things.

26
00:02:08,430 --> 00:02:12,910
Also, I'll just keep artifact version and I'll remove these variables.

27
00:02:12,930 --> 00:02:13,920
We don't need them.

28
00:02:15,060 --> 00:02:17,370
We're going to define two new variables over here.

29
00:02:17,850 --> 00:02:20,490
We'll have a variable called us a registry.

30
00:02:22,670 --> 00:02:27,980
And your Docker hub account name minus important visual path.

31
00:02:30,270 --> 00:02:33,810
Slash the image name, which I'll just say the pro app.

32
00:02:34,970 --> 00:02:35,390
I'll give it.

33
00:02:35,390 --> 00:02:37,190
I'm not using this account.

34
00:02:38,870 --> 00:02:39,920
I'm using this cube.

35
00:02:39,930 --> 00:02:41,780
Imran So I'll give that name.

36
00:02:52,210 --> 00:02:54,670
The pro app doc.

37
00:02:56,030 --> 00:02:57,730
But whatever they make them you want to prefer.

38
00:02:57,740 --> 00:02:59,720
But make sure the account name is right.

39
00:03:01,460 --> 00:03:02,090
Next.

40
00:03:03,100 --> 00:03:05,290
We have created a credential.

41
00:03:07,680 --> 00:03:08,370
In Jenkins.

42
00:03:08,370 --> 00:03:10,950
So we'll store that name over here.

43
00:03:11,400 --> 00:03:13,020
Registry Credential.

44
00:03:14,890 --> 00:03:16,240
Let's go to Jenkins.

45
00:03:20,140 --> 00:03:23,350
Managed Jenkins managed credentials.

46
00:03:29,140 --> 00:03:31,780
So we have created the Docker Hub credential.

47
00:03:32,740 --> 00:03:34,930
So if you have to give the same name.

48
00:03:36,400 --> 00:03:37,780
As a Docker hub.

49
00:03:40,020 --> 00:03:41,820
I'll put that in single code.

50
00:03:42,930 --> 00:03:43,920
Oh, double code.

51
00:03:44,610 --> 00:03:45,600
Artifact version.

52
00:03:45,600 --> 00:03:46,680
This we are not using.

53
00:03:46,680 --> 00:03:48,780
So I'm going to remove this variable also.

54
00:03:50,000 --> 00:03:53,960
We do need this step to clone the source code.

55
00:03:54,380 --> 00:03:58,490
We are putting everything in the same source code, so we don't need that stage.

56
00:03:59,570 --> 00:04:00,710
Wait a second.

57
00:04:04,480 --> 00:04:06,910
It properly with proper curly braces.

58
00:04:11,980 --> 00:04:18,610
So let's go down after sonar cloud analysis on our code analysis.

59
00:04:18,700 --> 00:04:19,990
So here.

60
00:04:21,100 --> 00:04:24,940
The next stage will create is to build the image.

61
00:04:24,940 --> 00:04:25,770
So we'll see.

62
00:04:25,810 --> 00:04:26,830
Stage.

63
00:04:31,720 --> 00:04:32,470
Build.

64
00:04:35,280 --> 00:04:38,530
Docker app image.

65
00:04:38,550 --> 00:04:39,810
That's a very long name.

66
00:04:40,260 --> 00:04:42,750
I'll just say build app image.

67
00:04:45,560 --> 00:04:46,190
This.

68
00:04:46,190 --> 00:04:49,430
I'm going to put in parentheses, of course.

69
00:04:59,860 --> 00:05:00,850
Steps.

70
00:05:08,800 --> 00:05:09,350
In this.

71
00:05:09,370 --> 00:05:10,720
I'll give a script.

72
00:05:18,410 --> 00:05:20,000
I'll give you a variable name.

73
00:05:20,000 --> 00:05:24,470
I can give anything here Docker image, but I'll make sure I'll use the same in the next one.

74
00:05:24,830 --> 00:05:36,260
I'm going to use a function called Docker Dot Build Registry, which will use the registry name as we

75
00:05:36,260 --> 00:05:37,520
have defined over here.

76
00:05:40,820 --> 00:05:45,650
So for this one, a docker file should be present in the source code and we have the Docker file over

77
00:05:45,650 --> 00:05:45,830
here.

78
00:05:45,830 --> 00:05:47,840
So it's going to run the Docker build command.

79
00:05:49,510 --> 00:05:53,620
Plus with this, we're going to give the tag, so I'm going to say plus.

80
00:05:55,730 --> 00:05:56,570
Colon.

81
00:05:57,610 --> 00:06:02,120
All right, So this name will be concatenated with this colon.

82
00:06:02,210 --> 00:06:08,400
And for the tag, I'm going to say build, underscore number.

83
00:06:08,420 --> 00:06:12,140
Or we can say build ideas or we can just add a view over there.

84
00:06:14,250 --> 00:06:17,670
So this stage should build my Docker image.

85
00:06:19,170 --> 00:06:23,640
Next stage will be deploying the Docker image or uploading the Docker image to Docker Hub.

86
00:06:26,040 --> 00:06:27,000
Stage.

87
00:06:30,500 --> 00:06:32,870
Upload image.

88
00:06:57,480 --> 00:06:59,730
So the function is a docker.

89
00:07:01,280 --> 00:07:02,570
Dot width.

90
00:07:03,700 --> 00:07:04,720
Registry.

91
00:07:08,770 --> 00:07:12,040
This is we can pass our credential with it.

92
00:07:14,550 --> 00:07:18,480
And the variable registry credential variable we created there.

93
00:07:20,320 --> 00:07:23,860
So this function, we are passing the registry credentials.

94
00:07:29,410 --> 00:07:34,570
And with this credential we are going to call the function Docker image.

95
00:07:35,830 --> 00:07:37,450
Dot push.

96
00:07:37,930 --> 00:07:41,560
So we have stored the func the object over here.

97
00:07:42,220 --> 00:07:44,560
So same thing we are giving docker image.

98
00:07:45,250 --> 00:07:46,990
There is no dot over there.

99
00:07:48,310 --> 00:07:49,270
Docker image.

100
00:07:49,270 --> 00:07:50,290
Dot push.

101
00:07:53,680 --> 00:07:59,230
So the image and we are passing the bill number.

102
00:08:01,430 --> 00:08:02,270
We build them.

103
00:08:03,080 --> 00:08:06,350
So that particular tag of the image will be pushed.

104
00:08:09,070 --> 00:08:10,870
Will also pass the latest.

105
00:08:11,860 --> 00:08:13,840
So we should have a latest image.

106
00:08:19,310 --> 00:08:19,560
This.

107
00:08:19,610 --> 00:08:21,760
I can put it in single code if I want.

108
00:08:24,350 --> 00:08:28,140
So we don't want to keep collecting the images every time we run the job.

109
00:08:28,160 --> 00:08:32,840
Every time it's going to generate a new image which is going to take the disk space of our Jenkins.

110
00:08:33,200 --> 00:08:38,750
We are running this on the Jenkins, so we are going to remove the Docker images also as we are building

111
00:08:38,750 --> 00:08:39,140
it.

112
00:08:39,770 --> 00:08:42,470
So that stage will remove the Docker image.

113
00:08:43,380 --> 00:08:45,800
You have to see here we.

114
00:08:47,970 --> 00:08:55,170
So Docker RMI dollar registry, which is the variable over there, our image part.

115
00:08:56,810 --> 00:08:59,780
Dollar v dollar bill number.

116
00:08:59,780 --> 00:09:03,560
So it's going to remove the image which got generated latest.

117
00:09:16,490 --> 00:09:22,430
Next stage will be deploying it to the Kubernetes cluster, and we are going to run the command from

118
00:09:22,430 --> 00:09:22,850
cops.

119
00:09:22,850 --> 00:09:27,740
So we have to add the cops, easy to instance, as a slave to Jenkins.

120
00:09:27,740 --> 00:09:30,470
So we'll do that first before we added this.

121
00:09:31,620 --> 00:09:33,300
So let's go to Jenkins.

122
00:09:40,040 --> 00:09:42,380
We'll get into our cops issue, for instance.

123
00:09:44,790 --> 00:09:47,670
So if you are logged out of cops, log in again.

124
00:09:55,360 --> 00:09:58,580
We'll create a directory here in the home directory itself.

125
00:09:58,600 --> 00:10:02,300
Jenkins hyphen slave.

126
00:10:03,790 --> 00:10:06,160
We need to install JDK.

127
00:10:07,000 --> 00:10:11,650
So I'm going to install open JDK hyphen eight hyphen JDK.

128
00:10:16,760 --> 00:10:18,470
So I already have it installed.

129
00:10:18,770 --> 00:10:20,960
If you don't have, you'll get the installation.

130
00:10:20,990 --> 00:10:29,300
We need a JDK so we can add Jenkins or we can add the scopes VMM as a slave to Jenkins master.

131
00:10:29,300 --> 00:10:34,220
So we need JDK or Java and you Java version for that minimum eight.

132
00:10:34,820 --> 00:10:36,650
And if we need a directory.

133
00:10:37,490 --> 00:10:46,850
So instead of creating the directory in here, we'll create it in the directory that should be better

134
00:10:47,750 --> 00:10:49,130
and are.

135
00:11:00,290 --> 00:11:03,590
And then we also need to give ownership of open to user.

136
00:11:03,590 --> 00:11:09,970
We are going to use open to user from Jenkins to access the slave.

137
00:11:09,980 --> 00:11:16,010
So we have need to give the ownership of Jenkins sorry ubuntu user to this directory.

138
00:11:17,550 --> 00:11:21,960
So Jenkins master will keep its agent and workspace in this directory.

139
00:11:22,650 --> 00:11:29,240
And we're going to use search from Jenkins to log in to this copy city instance with a one to user.

140
00:11:29,250 --> 00:11:32,190
So one user should own this directory.

141
00:11:33,130 --> 00:11:35,500
And we should already have Java.

142
00:11:40,650 --> 00:11:42,510
Now let's go to Jenkins.

143
00:11:43,790 --> 00:11:48,420
All right, before we add the slave, we need to update the cops security group.

144
00:11:48,720 --> 00:11:52,110
Jenkins is going to do a search to this cop's instance.

145
00:11:52,350 --> 00:11:59,760
So we are going to add the rule 22 from a Jenkins security group.

146
00:12:03,720 --> 00:12:10,260
Okay, so this should allow Jenkins to do such.

147
00:12:15,390 --> 00:12:17,910
Update that security group of the cops.

148
00:12:21,700 --> 00:12:23,590
Now we can add it as a slave.

149
00:12:23,980 --> 00:12:25,540
Let's go to Manager Jenkins.

150
00:12:28,190 --> 00:12:30,170
Manage nodes and clouds.

151
00:12:33,290 --> 00:12:34,520
Let's add a new node.

152
00:12:36,440 --> 00:12:38,660
Will give me as cops.

153
00:12:39,230 --> 00:12:46,400
So because in my Jenkins files also I'll say agent scopes so I can give your cops small.

154
00:12:46,400 --> 00:12:47,120
That's fine.

155
00:12:47,120 --> 00:12:48,830
But label I'm going to give.

156
00:12:51,960 --> 00:12:54,430
Nice cops in caps.

157
00:12:56,650 --> 00:12:58,150
The remote route directory.

158
00:13:00,360 --> 00:13:01,440
That's the victory.

159
00:13:05,110 --> 00:13:09,490
Use this note as much as possible know we will only select it and use it.

160
00:13:10,850 --> 00:13:14,360
From our job will select this particular node.

161
00:13:15,710 --> 00:13:18,680
Launch agent method via search.

162
00:13:20,540 --> 00:13:23,450
So private IP of the cops issue, for instance.

163
00:13:26,380 --> 00:13:27,880
Let's copy the private IP.

164
00:13:30,000 --> 00:13:31,170
Credentials.

165
00:13:32,170 --> 00:13:36,280
We're going to add the login user and the login key.

166
00:13:36,880 --> 00:13:39,580
So I'll say such username with private key.

167
00:13:43,280 --> 00:13:45,070
Username is open to.

168
00:13:46,930 --> 00:13:50,170
And the cops insurance login key private key Will.

169
00:13:50,170 --> 00:13:51,280
We'll store it over here.

170
00:13:53,130 --> 00:13:56,160
So let's log out from cops at.

171
00:13:59,500 --> 00:14:01,220
See your cops login key.

172
00:14:01,250 --> 00:14:04,190
Just do a get to it and copy all the content.

173
00:14:08,950 --> 00:14:10,300
And pasted over there.

174
00:14:10,970 --> 00:14:11,980
Mm.

175
00:14:11,980 --> 00:14:15,040
US cops login.

176
00:14:19,390 --> 00:14:19,800
Let's see.

177
00:14:19,800 --> 00:14:20,370
Ad.

178
00:14:24,870 --> 00:14:25,720
A safe.

179
00:14:30,640 --> 00:14:33,130
Okay, let me check the configuration once again.

180
00:14:34,360 --> 00:14:36,010
Credential we did not select.

181
00:14:36,010 --> 00:14:38,770
We want to cost a host.

182
00:14:38,770 --> 00:14:40,360
Q Verification strategy.

183
00:14:40,360 --> 00:14:43,480
We're going to say non verifying verification strategy.

184
00:14:44,710 --> 00:14:47,530
So it does not ask any question for search.

185
00:14:48,000 --> 00:14:49,210
And let's see if.

186
00:14:50,270 --> 00:14:52,010
Let's see if we launch Agent.

187
00:15:00,880 --> 00:15:03,380
So it says agent is connected, which is good.

188
00:15:03,400 --> 00:15:04,690
She's a very good sign.

189
00:15:06,690 --> 00:15:06,970
Okay.

190
00:15:06,990 --> 00:15:09,420
And the label is cops.

191
00:15:09,870 --> 00:15:10,860
All caps.

192
00:15:11,690 --> 00:15:14,600
So we're going to run help command from here.

193
00:15:14,600 --> 00:15:18,350
And we already have tested the helm command from our corp cc2 instance.

194
00:15:18,350 --> 00:15:19,610
We have already done that.

195
00:15:19,610 --> 00:15:20,630
It works.

196
00:15:20,990 --> 00:15:23,770
So in our Jenkins file, we'll mention that.

197
00:15:23,780 --> 00:15:25,790
So we're going to mention the stage.

198
00:15:29,690 --> 00:15:32,990
Kubernetes deploy.

199
00:15:40,520 --> 00:15:43,520
And this job will be running from the agent.

200
00:15:45,340 --> 00:15:46,690
We have to give the label.

201
00:15:49,880 --> 00:15:50,810
Cops.

202
00:15:52,690 --> 00:15:55,480
And the steps that we're going to run.

203
00:15:59,890 --> 00:16:01,090
Is the helm command.

204
00:16:01,090 --> 00:16:03,280
So it will be a shell command.

205
00:16:03,640 --> 00:16:04,220
So.

206
00:16:04,240 --> 00:16:07,210
Helm upgrade.

207
00:16:07,270 --> 00:16:09,310
Hyphen hyphen install.

208
00:16:11,790 --> 00:16:13,650
So does not exist will create it.

209
00:16:13,650 --> 00:16:18,840
If it only exists, it's going to upgrade it with all the changes force.

210
00:16:19,840 --> 00:16:21,940
Let's give the name of our stack.

211
00:16:21,940 --> 00:16:24,040
We profile hyphen stack.

212
00:16:26,290 --> 00:16:27,610
And the chart pot.

213
00:16:27,640 --> 00:16:33,820
Helm slash So chart is in helm slash V profile hyphen charts.

214
00:16:33,820 --> 00:16:34,390
We profile.

215
00:16:34,390 --> 00:16:35,170
Charts.

216
00:16:35,470 --> 00:16:36,550
We profile.

217
00:16:38,770 --> 00:16:45,190
Charts and we have to pass the image hyphen and set AAP image.

218
00:16:45,190 --> 00:16:51,100
The variable value we have to mention and this is there in our templates.

219
00:16:53,060 --> 00:16:54,070
All right, app image.

220
00:16:54,070 --> 00:16:55,990
This variable value we have to pass.

221
00:16:57,660 --> 00:16:58,740
Which is.

222
00:17:04,700 --> 00:17:05,720
Registry.

223
00:17:09,810 --> 00:17:10,710
Colon.

224
00:17:13,290 --> 00:17:13,780
Dollar.

225
00:17:13,829 --> 00:17:14,960
Curly braces.

226
00:17:16,060 --> 00:17:18,000
We build.

227
00:17:19,030 --> 00:17:20,980
Underscore number.

228
00:17:22,670 --> 00:17:25,240
No, I don't have to give me here or here.

229
00:17:25,430 --> 00:17:26,390
It's here.

230
00:17:26,410 --> 00:17:26,880
Yeah.

231
00:17:29,990 --> 00:17:31,750
Okay, One more lasting in this command.

232
00:17:31,760 --> 00:17:33,440
We have to give the namespace.

233
00:17:39,110 --> 00:17:40,340
Hyphen hyphen.

234
00:17:41,690 --> 00:17:43,220
Namespace.

235
00:17:46,970 --> 00:17:54,520
So we created the namespace named as Broad and we want our charts to be deployed in the prod namespace

236
00:17:54,530 --> 00:18:00,030
that's verify this command once again, help upgrade install for V profile stack.

237
00:18:00,050 --> 00:18:01,880
That's the name of our chart.

238
00:18:02,610 --> 00:18:04,080
Part of our charts.

239
00:18:04,800 --> 00:18:06,360
We profile charts.

240
00:18:07,360 --> 00:18:11,590
Set App Image Equal to dollar Registry.

241
00:18:13,300 --> 00:18:14,770
Colon v.

242
00:18:15,370 --> 00:18:16,750
Dollar bill number.

243
00:18:17,640 --> 00:18:19,020
Namespace fraud.

244
00:18:20,130 --> 00:18:21,510
This seems good to me.

245
00:18:21,540 --> 00:18:24,180
I'm going to save this and commit it.

246
00:18:28,220 --> 00:18:29,720
Jenkins file.

247
00:18:30,230 --> 00:18:31,400
I just say commit.

248
00:18:34,150 --> 00:18:35,410
And I'll push it.

249
00:18:50,500 --> 00:18:52,060
Changes have been uploaded.

250
00:18:57,840 --> 00:19:01,680
Okay, So in our source code, we also have no Jenkins file.

251
00:19:06,330 --> 00:19:07,920
One last thing in the Jenkins file.

252
00:19:07,920 --> 00:19:12,510
We have the tooling of the sonar cube as my sonar scanner for.

253
00:19:13,280 --> 00:19:17,390
So I'm going to go to Jenkins and add the tool with the same name.

254
00:19:20,500 --> 00:19:22,120
Global tool configuration.

255
00:19:26,710 --> 00:19:27,370
Sooner.

256
00:19:27,370 --> 00:19:28,270
Scanner.

257
00:19:30,000 --> 00:19:32,370
So either I can change the name here itself.

258
00:19:33,790 --> 00:19:35,590
Well, we can add a new tool also.

259
00:19:35,980 --> 00:19:37,300
So let's do it.

260
00:19:40,510 --> 00:19:40,650
Okay.

261
00:19:40,800 --> 00:19:43,740
I think we are all set for the Jenkins file.

262
00:19:44,740 --> 00:19:45,700
In the source code.

263
00:19:46,000 --> 00:19:48,070
It's going to clone the source code.

264
00:19:49,150 --> 00:19:58,510
Build the Artifact unit test integration, test check style and uploading result running the sonar scanner

265
00:19:58,510 --> 00:20:02,350
and uploading result to sonar hyphen pro, which you already did.

266
00:20:03,580 --> 00:20:07,270
Check the quality gates and then build our image.

267
00:20:07,540 --> 00:20:09,670
Upload our image to Docker Hub.

268
00:20:10,700 --> 00:20:17,840
Remove the unused image and deploy amplification to cover this cluster by using helm.

