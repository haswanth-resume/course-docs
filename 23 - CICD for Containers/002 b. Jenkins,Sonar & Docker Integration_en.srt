1
00:00:01,080 --> 00:00:07,290
So I'm in my management console and I have 3c2 instances running over here.

2
00:00:07,680 --> 00:00:09,030
One is cops.

3
00:00:10,090 --> 00:00:12,880
So the server and the Jenkins server.

4
00:00:13,480 --> 00:00:17,950
As discussed previously, you should have continuous integration setup already in place.

5
00:00:17,950 --> 00:00:22,690
If you don't have, I recommend you pause the video and set up Jenkins server sooner.

6
00:00:22,690 --> 00:00:29,830
Cube Server Nexus server will not be required if you already created this stack by using cloud formation.

7
00:00:30,590 --> 00:00:32,930
Then you can stop the Nexus server.

8
00:00:34,230 --> 00:00:37,680
Cops, for instance, should be ready with all the prerequisites.

9
00:00:38,530 --> 00:00:43,120
As we did in Cuba, is a set of projects and we'll get into that.

10
00:00:43,120 --> 00:00:45,460
But first, let me take you through the source code.

11
00:00:46,950 --> 00:00:53,160
So in our source code, we profile project Source code a search for the branch secede hyphen cube.

12
00:00:57,250 --> 00:00:58,090
In this branch.

13
00:00:58,170 --> 00:01:05,319
We have our Java source code, which is in the RC directory which will build from Jenkins and generate

14
00:01:05,319 --> 00:01:06,190
the artifact.

15
00:01:06,610 --> 00:01:08,080
We have a docker file.

16
00:01:10,450 --> 00:01:13,780
So with the Docker build process, we're going to create a Docker image.

17
00:01:14,260 --> 00:01:17,830
So the artifact generated from our source code will be copied into.

18
00:01:18,590 --> 00:01:20,810
This location in the Docker image.

19
00:01:21,320 --> 00:01:26,540
This is the same as the Containerization project where we have created all these Docker files.

20
00:01:26,540 --> 00:01:28,520
So we're going to use this Docker file.

21
00:01:28,520 --> 00:01:31,670
We're going to continuously deliver our application image.

22
00:01:31,670 --> 00:01:36,890
So we have to generate Docker image for our application running on Tomcat.

23
00:01:37,370 --> 00:01:40,040
So we need that Docker file in this repository.

24
00:01:40,640 --> 00:01:42,170
We have a Jenkins file.

25
00:01:43,490 --> 00:01:47,210
So we are going to use a pipeline as a code in this project.

26
00:01:47,960 --> 00:01:49,460
We're going to write this Jenkins file.

27
00:01:49,460 --> 00:01:55,580
But if you wish to skip writing this Jenkins file, you can directly use this from our source code.

28
00:01:56,620 --> 00:02:00,790
And we'll get into all the steps in that I would like to point out here first.

29
00:02:01,870 --> 00:02:05,860
The Kubernetes deploy stage, which will be running from.

30
00:02:07,140 --> 00:02:09,389
Slave labeled as cops.

31
00:02:10,020 --> 00:02:10,740
And in this.

32
00:02:10,780 --> 00:02:12,600
We're going to run Helm Command.

33
00:02:13,170 --> 00:02:16,350
So for the Helm Command, we provide the charts.

34
00:02:16,350 --> 00:02:25,650
Location charts will be all the definition file for our Kubernetes objects like deployment service Secret,

35
00:02:26,160 --> 00:02:33,000
as we did it one in one of the Kubernetes project where we have executed a Java application on Kubernetes

36
00:02:33,000 --> 00:02:33,720
cluster.

37
00:02:33,930 --> 00:02:36,380
So same definition file we have in this chart.

38
00:02:36,390 --> 00:02:37,560
Let's see the chart.

39
00:02:39,200 --> 00:02:40,820
So there is a home directory.

40
00:02:42,730 --> 00:02:43,090
In this.

41
00:02:43,090 --> 00:02:44,740
We have profile charts.

42
00:02:45,910 --> 00:02:51,640
And if you see here in the templates directory, you will see a same definition file as we used in.

43
00:02:52,510 --> 00:02:57,310
One of our companies project where we deployed the Java application on Kubernetes cluster.

44
00:02:58,300 --> 00:03:02,770
We are more focused on this definition file application deployment.

45
00:03:04,020 --> 00:03:08,130
So from Jenkins, we're going to build the image, upload it to a Docker hub account.

46
00:03:08,130 --> 00:03:15,060
And this definition file we're going to mention in the image location, a variable helm uses a go language

47
00:03:15,060 --> 00:03:15,990
templating format.

48
00:03:15,990 --> 00:03:20,250
So that's how we mention variable in helm.

49
00:03:20,250 --> 00:03:23,550
And this variable will be passing from the Jenkins file.

50
00:03:24,190 --> 00:03:25,780
So in the Jenkins file.

51
00:03:27,290 --> 00:03:29,270
But we have the deployment stage.

52
00:03:30,680 --> 00:03:33,490
Where we're using Helm Command to deploy our charts.

53
00:03:33,500 --> 00:03:35,090
This is the location of our chart.

54
00:03:35,120 --> 00:03:40,970
We have just seen it and we are passing the value for the variable app image.

55
00:03:42,270 --> 00:03:42,900
There.

56
00:03:44,180 --> 00:03:47,630
And that value will be again, variable.

57
00:03:47,900 --> 00:03:53,810
So we're dynamically parsing the image name and the tag in our charts.

58
00:03:55,300 --> 00:03:55,990
There.

59
00:03:57,170 --> 00:04:00,620
So it will deploy the latest image to the company's cluster.

60
00:04:01,160 --> 00:04:05,120
We'll get more into this helm charts and writing this Jenkins file.

61
00:04:06,480 --> 00:04:13,440
Let's log into Jenkins first, set up a solar cube integration, and then we'll create this cluster

62
00:04:13,440 --> 00:04:14,400
from Copse.

63
00:04:15,120 --> 00:04:17,399
So I'll get the IP of Jenkins.

64
00:04:26,460 --> 00:04:27,520
I mean, Jenkins.

65
00:04:27,540 --> 00:04:29,610
Let me open Sony Cube Server.

66
00:04:30,870 --> 00:04:34,500
Again, if you wish to use SoundCloud over here, you can do that.

67
00:04:36,010 --> 00:04:37,510
So generate a new token.

68
00:04:48,630 --> 00:04:49,410
Let's keep that.

69
00:04:49,410 --> 00:04:50,760
Let's go to Jenkins.

70
00:04:51,060 --> 00:04:52,260
Manny Jenkins.

71
00:04:53,360 --> 00:04:54,530
Configure system.

72
00:04:57,780 --> 00:05:02,160
We'll keep that name Sonar Pro, because that's the same name in our Jenkins file.

73
00:05:03,410 --> 00:05:09,290
If you have any different name, then change it to Sonar Pro, because we're going to use that name.

74
00:05:09,590 --> 00:05:11,600
So make sure the same name is over here.

75
00:05:11,690 --> 00:05:14,420
Let's get this honor Cube, Private IP.

76
00:05:21,540 --> 00:05:22,830
Let's add the token.

77
00:05:29,840 --> 00:05:31,070
Let's copy the token.

78
00:05:45,840 --> 00:05:47,040
Let's save this.

79
00:05:48,910 --> 00:05:50,800
And we'll select our right token.

80
00:05:53,190 --> 00:05:55,830
Let's save these settings.

81
00:05:58,360 --> 00:06:04,240
Also, you have to make sure the Jenkins security group allows connection from sonar and sonar.

82
00:06:04,690 --> 00:06:07,330
Security Group allows connection from Jenkins.

83
00:06:09,060 --> 00:06:11,190
So I'll go to Jenkins Security group.

84
00:06:12,110 --> 00:06:13,040
Inbound.

85
00:06:15,230 --> 00:06:19,340
I drew all traffic from Jenkins security Group.

86
00:06:20,320 --> 00:06:23,920
Now I'm going to say the Sooner Security group, we are updating the Jenkins security group.

87
00:06:23,920 --> 00:06:27,250
We are allowing all traffic from sooner security group.

88
00:06:30,780 --> 00:06:33,240
Same will do for the sonar security group.

89
00:06:33,870 --> 00:06:35,520
Let's go to sonar security group.

90
00:06:37,720 --> 00:06:38,920
Edit Inbound drone.

91
00:06:40,180 --> 00:06:45,040
So if you see, I already have a rule, all traffic allowed from sonar security group.

92
00:06:48,680 --> 00:06:51,860
If you don't have these rules, add them or update them.

93
00:06:52,340 --> 00:06:53,630
I already have.

94
00:06:53,720 --> 00:06:55,970
So I'm going to not do it for sooner.

95
00:06:57,690 --> 00:06:58,890
Okay, Next.

96
00:07:03,400 --> 00:07:07,770
So we have a stage in our Jenkins file which is going to push the image to Docker Hub.

97
00:07:07,780 --> 00:07:10,240
So we get your Docker hub credentials.

98
00:07:16,220 --> 00:07:18,590
So I have a Docker hub account over here.

99
00:07:18,620 --> 00:07:24,090
Q Imran, it currently does not have anything, any repository or no organization.

100
00:07:24,110 --> 00:07:25,670
I'm going to use this one.

101
00:07:26,630 --> 00:07:32,330
You can create either a new one or you can use the same as you used in the Containerization project.

102
00:07:33,420 --> 00:07:38,570
Now we'll store the details of Docker Hub logins into Jenkins credentials.

103
00:07:38,580 --> 00:07:40,440
So let's go to manage Jenkins.

104
00:07:41,370 --> 00:07:42,690
Manage credentials.

105
00:07:47,150 --> 00:07:48,830
I will see ad credentials.

106
00:07:52,730 --> 00:07:58,030
Q The login username for Docker Hub and the login password.

107
00:08:01,580 --> 00:08:04,560
The idea and description name we will be giving.

108
00:08:04,580 --> 00:08:06,860
Same as in the Jenkins file.

109
00:08:07,130 --> 00:08:10,880
So registry credential we are using registry credential variable.

110
00:08:10,910 --> 00:08:15,500
The name is Docker Hub, so we're going to use the same name, Docker Hub.

111
00:08:16,520 --> 00:08:18,170
And for the description also seem.

112
00:08:19,740 --> 00:08:20,790
And let's add that.

113
00:08:22,930 --> 00:08:27,420
Next step is to install Docker engine in the Jenkins server.

114
00:08:27,430 --> 00:08:29,350
So let's log into the Jenkins server.

115
00:08:37,520 --> 00:08:39,289
So I'll open my gate bash.

116
00:08:45,020 --> 00:08:46,400
I have the login key.

117
00:08:57,820 --> 00:09:02,140
So let's go through the Docker installation step from Docker documentation.

118
00:09:18,010 --> 00:09:20,180
So our jenkins is running on Ubuntu.

119
00:09:20,200 --> 00:09:23,490
So I'm going to install docker in ubuntu.

120
00:09:23,500 --> 00:09:25,060
So let's find that document.

121
00:10:25,770 --> 00:10:28,050
Docker is installed in Jenkins.

122
00:10:29,270 --> 00:10:30,140
Let's check.

123
00:10:35,550 --> 00:10:38,820
Notes system CD status, of course.

124
00:10:42,090 --> 00:10:47,730
So Dockery is running in Jenkins The reason we install Docker in Jenkins because we're going to run

125
00:10:47,730 --> 00:10:50,490
Docker build command from Jenkins.

126
00:10:51,000 --> 00:10:57,300
So if we try to do that, let's log in as the Jenkins user.

127
00:10:57,330 --> 00:10:58,740
Sue hyphen Jenkins.

128
00:11:00,240 --> 00:11:05,160
And if you tried to run any Docker command, it will throw you permission denied.

129
00:11:05,950 --> 00:11:12,850
That's because only root user can run Docker commands or any any user who is part of Docker group can

130
00:11:12,850 --> 00:11:14,260
run the Docker commands.

131
00:11:14,590 --> 00:11:17,260
So let's add a Jenkins user.

132
00:11:18,010 --> 00:11:19,360
In the Docker group.

133
00:11:22,170 --> 00:11:25,410
So Laguna is a route user or a run pseudo.

134
00:11:27,330 --> 00:11:30,210
We run the command user mod.

135
00:11:31,970 --> 00:11:32,530
Hyphen.

136
00:11:32,540 --> 00:11:32,890
E.

137
00:11:32,900 --> 00:11:33,740
G.

138
00:11:35,630 --> 00:11:36,850
Group name is Joker.

139
00:11:36,860 --> 00:11:44,060
There will be a group named as Docker already created in your system when you install Docker in Jenkins.

140
00:11:44,330 --> 00:11:48,860
So we are adding a Jenkins user into Docker group.

141
00:11:51,210 --> 00:11:51,370
Yes.

142
00:11:51,540 --> 00:11:54,540
Check that ID, Jenkins.

143
00:11:56,360 --> 00:11:58,730
Jenkins is there is part of Docker group now.

144
00:11:59,450 --> 00:12:05,900
Now if you access the Jenkins user, if you log in as Jenkins user, you should be able to run the Docker

145
00:12:05,900 --> 00:12:06,320
command.

146
00:12:06,320 --> 00:12:07,460
So run this test.

147
00:12:07,490 --> 00:12:09,920
If this works fine, we should be good.

148
00:12:09,920 --> 00:12:13,100
But that's from the command line variable.

149
00:12:13,100 --> 00:12:18,170
To switch to Jenkins user and run the Docker commands with Jenkins process, which is already running,

150
00:12:18,170 --> 00:12:21,230
will not have that access because it is not yet loaded.

151
00:12:21,230 --> 00:12:28,730
So we can restart a Jenkins service if that also don't solve the purpose, you can just reboot the Jenkins

152
00:12:28,730 --> 00:12:29,360
machine.

153
00:12:29,360 --> 00:12:32,540
Once you add Jenkins to Docker group.

154
00:12:32,690 --> 00:12:36,130
Just for the safe side, you can reboot the Jenkins machine.

155
00:12:36,140 --> 00:12:37,610
So I'm going to do that.

156
00:12:40,670 --> 00:12:47,720
Wait for a moment for Jenkins instance to come up, and then we'll move to the next stage.

