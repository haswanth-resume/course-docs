1
00:00:01,050 --> 00:00:02,980
Get into your GitHub account.

2
00:00:03,790 --> 00:00:05,500
Create a new repository.

3
00:00:07,230 --> 00:00:08,310
Now this is optional.

4
00:00:08,310 --> 00:00:13,830
If you want to use repository from our source code, you can use that repository.

5
00:00:13,830 --> 00:00:19,890
You can just watch or you can create your own repository and feed all the data.

6
00:00:20,550 --> 00:00:22,530
At the end of the day, everything will be same.

7
00:00:23,520 --> 00:00:25,770
I will name it as secede.

8
00:00:26,010 --> 00:00:29,340
I think cube hyphen docker.

9
00:00:34,480 --> 00:00:35,730
I'll keep it public.

10
00:00:35,740 --> 00:00:37,090
Create a repository.

11
00:00:40,710 --> 00:00:44,130
Will fetch the URL and let's clone it.

12
00:00:49,680 --> 00:00:51,110
That is all.

13
00:00:51,150 --> 00:00:53,280
I will you sorry I set you all.

14
00:00:53,280 --> 00:00:55,350
I'll use https URL for now.

15
00:01:04,540 --> 00:01:06,070
Okay, let's get into that.

16
00:01:08,430 --> 00:01:13,500
Also clone our source code repository will need a lot of data from there.

17
00:01:16,440 --> 00:01:18,130
We will Project Repository.

18
00:01:18,150 --> 00:01:19,290
Let's clone that.

19
00:01:22,730 --> 00:01:23,730
So clearly separately.

20
00:01:23,750 --> 00:01:25,580
Don't clone it in the same directory.

21
00:01:28,770 --> 00:01:34,200
So you should have our source code repository and the repository that you just created.

22
00:01:34,590 --> 00:01:43,620
Let's get into our source code repository and we're going to switch to branch VP hyphen a docker.

23
00:01:52,960 --> 00:01:55,850
That's that is the content that you should see in this branch.

24
00:01:55,870 --> 00:01:57,460
We have a darker branch.

25
00:01:59,560 --> 00:02:05,800
And we're going to copy all of this recursively to.

26
00:02:06,560 --> 00:02:07,910
Of a repository.

27
00:02:14,550 --> 00:02:17,700
Again, if you wish to skip this, you can use.

28
00:02:20,280 --> 00:02:28,260
Just directly the secede cube branch from our source code and all the data is already mentioned over

29
00:02:28,260 --> 00:02:28,680
here.

30
00:02:28,710 --> 00:02:33,810
We are just preparing the same data in a different repository, in a different branch.

31
00:02:35,470 --> 00:02:43,510
Okay, so here we don't need the Docker hyphen db Docker hyphen web.

32
00:02:44,170 --> 00:02:45,960
We don't need compose.

33
00:02:45,970 --> 00:02:47,560
We don't need Ansible.

34
00:02:52,260 --> 00:02:54,590
In Docker hyphen app directory.

35
00:02:54,600 --> 00:03:00,780
You should have the Docker file to build our application image.

36
00:03:01,320 --> 00:03:07,110
Let's copy it, move it to the main directory, the top level directory of the repository.

37
00:03:07,110 --> 00:03:13,710
So you should have docker file here and then if you want, you can remove docker hyphen app directly.

38
00:03:16,320 --> 00:03:18,580
We already have a directory over here.

39
00:03:18,600 --> 00:03:21,540
We can remove this because we're going to prepare our own.

40
00:03:27,370 --> 00:03:30,250
Okay, so you should have Docker file at this location.

41
00:03:33,590 --> 00:03:36,770
This docker file and equipment is directory.

42
00:03:38,990 --> 00:03:40,190
The pro app.

43
00:03:42,240 --> 00:03:44,550
And we need all these templates.

44
00:03:48,930 --> 00:03:51,060
Okay, let's come at the top level here.

45
00:03:51,060 --> 00:03:53,550
We'll create a directory called a helm.

46
00:03:56,400 --> 00:04:02,130
We get into this directory and we're going to run a command helm create.

47
00:04:03,460 --> 00:04:04,540
And the chart name.

48
00:04:04,540 --> 00:04:06,920
So I'm going to give you profile charts.

49
00:04:06,940 --> 00:04:11,050
Same name you can also give because that's mentioned in our Jenkins file.

50
00:04:12,620 --> 00:04:14,890
There the helm directory.

51
00:04:14,900 --> 00:04:16,459
We profile charts.

52
00:04:22,170 --> 00:04:26,070
So this should create this V profile charge directory if you get inside this.

53
00:04:26,100 --> 00:04:28,260
You should find a template directory.

54
00:04:31,780 --> 00:04:33,160
And there are some sample templates.

55
00:04:33,160 --> 00:04:34,690
I'm going to remove all this.

56
00:04:37,730 --> 00:04:40,340
And here we'll put our definition files.

57
00:04:44,890 --> 00:04:46,360
So let's copy.

58
00:04:48,250 --> 00:04:50,440
From the Kubernetes Pro app.

59
00:04:51,150 --> 00:04:57,060
Copy everything to helm Z Profile charts templates.

60
00:05:00,370 --> 00:05:06,370
And we should see our definition files in the charts templates directory.

61
00:05:08,300 --> 00:05:13,040
Let's get into this territory and we profile charts templates.

62
00:05:14,070 --> 00:05:15,230
Let's clear the screen.

63
00:05:16,840 --> 00:05:17,110
Okay.

64
00:05:17,110 --> 00:05:23,440
So the image, the Docker image that you're going to build regularly and deploy will be our application.

65
00:05:23,740 --> 00:05:29,770
So this we profile application deployment dot ML file.

66
00:05:32,120 --> 00:05:36,950
Here we are mentioning the image and this is the image that will be building it regularly and deploying

67
00:05:36,950 --> 00:05:39,060
it so there cannot be a static value.

68
00:05:39,080 --> 00:05:43,070
We need to give a variable over here which will pass automatically through.

69
00:05:43,070 --> 00:05:46,880
Jenkins So to give variables.

70
00:05:48,240 --> 00:05:49,620
In health charts.

71
00:05:49,620 --> 00:05:52,140
You have to do it like this to curly braces.

72
00:05:52,140 --> 00:05:58,020
In between two curly braces, you have to say dot values and the variable name.

73
00:05:58,320 --> 00:06:01,260
So I'll give the variable name as app image.

74
00:06:01,920 --> 00:06:06,420
So when we run help command, we're going to pass the value of our app image.

75
00:06:06,870 --> 00:06:09,870
So it will have the latest image name and the latest tag.

76
00:06:10,590 --> 00:06:12,330
So let's save this file.

77
00:06:15,300 --> 00:06:21,600
Actually, there are so many places where we can where you can mention the variables like the labels,

78
00:06:21,990 --> 00:06:26,040
port number, the port name, container name.

79
00:06:27,530 --> 00:06:30,500
And you can pass all those values while you're running Help command.

80
00:06:30,500 --> 00:06:34,820
Or you can also mention those values in variables file.

81
00:06:35,540 --> 00:06:38,240
There is a variables file values file.

82
00:06:38,240 --> 00:06:39,730
Sorry value dot yaml.

83
00:06:39,740 --> 00:06:44,450
You can mention the values in yaml format also, but we'll keep only this much.

84
00:06:44,450 --> 00:06:48,500
We'll just pass one variable through jenkins automatically.

85
00:06:48,950 --> 00:06:50,660
So that is done.

86
00:06:54,650 --> 00:06:58,220
And now it's time to test these health charts.

87
00:07:00,400 --> 00:07:05,050
And to do that to do this, I'm going to create a different namespace.

88
00:07:05,740 --> 00:07:09,430
It'll create namespace test.

89
00:07:11,970 --> 00:07:18,330
And I'm going to run the command helm install help Install command is going to read the charts and run

90
00:07:18,330 --> 00:07:18,750
it.

91
00:07:19,260 --> 00:07:23,100
We want to do it in the namespace test where we just created.

92
00:07:25,120 --> 00:07:25,660
Will you?

93
00:07:25,660 --> 00:07:29,830
Our charts name v profile hyphen stack.

94
00:07:32,480 --> 00:07:34,490
And we'll get the part of our charts.

95
00:07:35,180 --> 00:07:41,210
We profile charts and we have to pass the value I can have and set.

96
00:07:42,230 --> 00:07:44,360
The variable was app image.

97
00:07:45,300 --> 00:07:47,220
And we are to pass its value.

98
00:07:48,150 --> 00:07:53,400
So if you have a Docker hub account already and you have our application image, you can pass the value

99
00:07:53,400 --> 00:07:56,040
over there or you can do the same as I'm doing.

100
00:07:56,040 --> 00:07:57,300
You can use my image also.

101
00:07:57,300 --> 00:07:58,500
It's a public image.

102
00:07:58,710 --> 00:08:00,660
So I have an image already.

103
00:08:02,970 --> 00:08:09,750
So I'm passing the image in the repository part and the tag, which is nine for me.

104
00:08:10,050 --> 00:08:17,740
So you can use my same image or better from the Containerization project you have for application image.

105
00:08:17,760 --> 00:08:19,530
You should have build it so it can pass.

106
00:08:19,530 --> 00:08:21,240
The same with the tag.

107
00:08:21,840 --> 00:08:23,250
Let's hit enter.

108
00:08:26,860 --> 00:08:29,230
You should get output something like this.

109
00:08:29,710 --> 00:08:32,200
You can see helm list.

110
00:08:34,570 --> 00:08:37,450
Now I have to provide the namespace hyphen hyphen.

111
00:08:37,929 --> 00:08:42,880
It's copied from here, so by default it's going to check it from the default namespace.

112
00:08:45,630 --> 00:08:46,080
Okay.

113
00:08:46,290 --> 00:08:47,180
You should see Cube.

114
00:08:47,250 --> 00:08:48,630
It'll get all.

115
00:08:48,720 --> 00:08:51,780
And if I do Hyphen, I have a namespace test.

116
00:08:52,940 --> 00:08:56,660
You should see everything getting created or already created.

117
00:08:56,690 --> 00:09:03,290
You see our pods, our service deployment, replica sets.

118
00:09:04,070 --> 00:09:09,680
So the complete stack deployment by using one simple command help install.

119
00:09:10,590 --> 00:09:14,990
And creating charts is not so great, nor not such a difficult thing.

120
00:09:15,000 --> 00:09:21,330
You have already seen that, but the main complexity lies in the variables, the variables that we define

121
00:09:21,330 --> 00:09:27,240
in our definition file and go for language format and then mentioning its value.

122
00:09:27,660 --> 00:09:29,820
And there are so many things you can do with help.

123
00:09:29,850 --> 00:09:33,030
You can store this help charts into repositories.

124
00:09:33,030 --> 00:09:34,200
You can fetch it from there.

125
00:09:34,200 --> 00:09:35,040
Deploy it.

126
00:09:36,400 --> 00:09:42,130
But this is the main zest of packaging and deploying your entire stack.

127
00:09:43,180 --> 00:09:45,230
So now we will delete it.

128
00:09:45,250 --> 00:09:46,020
We don't need it.

129
00:09:46,030 --> 00:09:47,380
We just want to test it.

130
00:09:47,770 --> 00:09:52,470
You can access the load balancer URL and you can check the entire application log in.

131
00:09:52,480 --> 00:09:53,560
Should be working.

132
00:09:54,460 --> 00:09:58,870
It's basically the same definition file that we have used in our previous projects.

133
00:09:59,810 --> 00:10:01,670
So now I'm going to remove.

134
00:10:03,380 --> 00:10:13,200
Should I say delete and delete and I will give the name v profile stack I have given and have to mention

135
00:10:13,220 --> 00:10:14,270
namespace.

136
00:10:19,390 --> 00:10:19,720
Okay.

137
00:10:19,750 --> 00:10:20,850
So it is uninstalled.

138
00:10:20,860 --> 00:10:21,940
We have to wait for some time.

139
00:10:21,940 --> 00:10:23,110
It will delete everything.

140
00:10:23,470 --> 00:10:30,150
We'll also create one more namespace now, which we're going to use from Jenkins.

141
00:10:31,210 --> 00:10:32,980
Give the namespace as prod.

142
00:10:34,980 --> 00:10:41,790
So by the time we should have these things in our repository help charts and Docker file.

143
00:10:42,520 --> 00:10:44,230
And, of course, our source code.

144
00:10:45,490 --> 00:10:47,020
Next, we're going to write Jenkins file.

145
00:10:47,020 --> 00:10:48,310
We're going to do it on our system.

146
00:10:48,310 --> 00:10:55,750
So if you have created a separate repository like me, as I did over here, then you push all the changes.

147
00:11:23,830 --> 00:11:26,800
Okay, so I pushed all the changes to the GitHub repository.

148
00:11:32,420 --> 00:11:33,160
Okay, It's there.

149
00:11:33,170 --> 00:11:33,530
Now.

150
00:11:33,530 --> 00:11:35,000
We have to do one last thing.

151
00:11:35,000 --> 00:11:37,730
We have to create a Jenkins file in this repository.

152
00:11:38,870 --> 00:11:41,990
And then we'll run that Jenkins file from cops.

153
00:11:41,990 --> 00:11:43,550
From Jenkins.

154
00:11:44,000 --> 00:11:46,200
We're going to have Jenkins pipeline as a code.

155
00:11:46,220 --> 00:11:47,810
So we'll do that next.

