1
00:00:13,420 --> 00:00:15,130
Welcome to the project.

2
00:00:15,280 --> 00:00:18,760
In this project, we are going to set up a web application stack.

3
00:00:20,250 --> 00:00:25,910
The name of the project is V Profile Project set up local.

4
00:00:26,610 --> 00:00:28,440
Let's understand about this project.

5
00:00:34,320 --> 00:00:38,610
In this project, we will be setting a multi-tier web application stack.

6
00:00:38,940 --> 00:00:43,830
The set up will be locally on your laptop or on your desktop.

7
00:00:44,310 --> 00:00:47,160
There are two reasons why we are doing this project.

8
00:00:47,190 --> 00:00:53,820
The first reason is this project is going to set up a baseline for our upcoming projects.

9
00:00:54,360 --> 00:00:58,840
We are going to do a lot of projects like we're going to deploy a stack on a.

10
00:00:59,580 --> 00:01:01,070
We're going to refactor it.

11
00:01:01,080 --> 00:01:03,690
We're going to containerized our applications.

12
00:01:03,690 --> 00:01:08,820
We're going to deploy the projects on Kubernetes cluster and many more things to do.

13
00:01:08,820 --> 00:01:14,460
All the upcoming projects you need to understand, v profile project first, and for that we are doing

14
00:01:14,460 --> 00:01:17,130
a setup on your on our local machine.

15
00:01:17,610 --> 00:01:24,240
The second reason of doing this project is so you can set up your own lab locally.

16
00:01:24,270 --> 00:01:30,570
If you have any project you're working in, any project, you can set up that entire stack locally and

17
00:01:30,570 --> 00:01:32,280
do all your R&D.

18
00:01:37,130 --> 00:01:40,190
Let's take a scenario from your real time experience.

19
00:01:40,580 --> 00:01:46,640
Let's say you're working in a project and in your project you have varieties of services that you deal

20
00:01:46,640 --> 00:01:47,180
with.

21
00:01:47,690 --> 00:01:56,510
You may be having services like database services, MySQL, PostgreSQL Web services, Apache Engine

22
00:01:56,510 --> 00:01:59,870
X application services, maybe like Tomcat.

23
00:01:59,880 --> 00:02:01,070
Jboss, glassfish

24
00:02:01,070 --> 00:02:01,790
.

25
00:02:02,650 --> 00:02:04,240
Or any other stack like that.

26
00:02:05,920 --> 00:02:12,700
And you may also have a Runbook or a set up document to set up your project stack.

27
00:02:16,980 --> 00:02:18,810
Let's talk about some problems.

28
00:02:19,840 --> 00:02:24,070
You may not be comfortable in making changes in the real servers.

29
00:02:24,310 --> 00:02:26,920
You have the setup document, you have the run book.

30
00:02:26,920 --> 00:02:32,050
But still we lack in confidence in making changes in the real systems.

31
00:02:32,920 --> 00:02:36,610
So you would like to set up a local stack.

32
00:02:36,700 --> 00:02:42,340
You would like to set up all that stack on your local machine probably by using virtual machines.

33
00:02:42,910 --> 00:02:43,810
So you can do that.

34
00:02:43,810 --> 00:02:46,450
But the local setup is complex.

35
00:02:46,600 --> 00:02:50,890
It's time consuming and it's not a repeatable.

36
00:02:53,630 --> 00:03:01,820
So we would love to set up stack locally by using virtual machines so we can do R&D and gain some confidence

37
00:03:01,820 --> 00:03:02,950
on our project.

38
00:03:02,960 --> 00:03:10,670
But since the setup of multiple services is complex, it's time consuming and moreover, we can do it

39
00:03:10,670 --> 00:03:11,420
again and again.

40
00:03:11,420 --> 00:03:15,890
It's not repeatable if you do it manually, so we avoid this setup.

41
00:03:20,930 --> 00:03:23,360
So solutions to our problem.

42
00:03:24,120 --> 00:03:27,300
What we can do is we can have a local set up.

43
00:03:27,430 --> 00:03:31,710
Yes, but it would be automated.

44
00:03:32,930 --> 00:03:38,990
It would be repeatable because we're going to have infrastructure as a code.

45
00:03:39,700 --> 00:03:46,000
So if we have a code to set up the entire stack locally, we can do it as many as time.

46
00:03:46,000 --> 00:03:47,620
It's going to be repeatable.

47
00:03:47,650 --> 00:03:49,930
It's completely automated process.

48
00:03:49,930 --> 00:03:54,730
So you can do as much as R&D you want on your local machine.

49
00:03:55,770 --> 00:04:00,930
All right, Now let's see what all the tools that we need to set up this stack.

50
00:04:02,180 --> 00:04:10,700
So starting with, we will need a hypervisor Oracle VM virtual box we are going to use on which we are

51
00:04:10,700 --> 00:04:12,140
going to set up a virtual machine.

52
00:04:12,140 --> 00:04:18,380
But since this is going to be automated, so for automation we are going to use Vagrant.

53
00:04:19,170 --> 00:04:24,340
And we need to execute some commands, not some many commands.

54
00:04:24,360 --> 00:04:31,680
So we'll be using a command line tool git bash, which will be multipurpose for executing commands and

55
00:04:31,680 --> 00:04:33,150
also for version control.

56
00:04:33,480 --> 00:04:42,540
We can also use an IDE so you can use sublime text or if you are any preference of using Notepad Plus

57
00:04:42,540 --> 00:04:46,680
plus Visual Studio or anything else that also you can use.

58
00:04:47,670 --> 00:04:53,100
You must have installed all these tools already from the prerequisites video.

59
00:04:56,160 --> 00:04:59,250
Let's understand the objective of this once again.

60
00:05:00,350 --> 00:05:03,140
We're going to learn VN automation locally.

61
00:05:05,510 --> 00:05:09,620
This project is going to set up a baseline for upcoming projects.

62
00:05:10,360 --> 00:05:17,920
And we will also learn how to set up many real world projects on our local machine automatically.

63
00:05:19,370 --> 00:05:22,910
So we can do as much as R&D we want.

64
00:05:27,590 --> 00:05:33,350
Now we'll see the architectural design of various services in our project.

65
00:05:33,350 --> 00:05:39,860
We have Nginx, Tomcat, RabbitMQ, Memcached and MySQL service, so we'll see

66
00:05:39,860 --> 00:05:43,880
the architectural design. We will also see one more architectural design.

67
00:05:46,590 --> 00:05:55,530
Of our automated setup, we will have a vagrant, virtual box, git bash and also some scripts and commands.

68
00:05:56,800 --> 00:05:57,100
Okay.

69
00:05:57,130 --> 00:06:01,480
Long story short, we will be setting up a website, a web application.

70
00:06:01,870 --> 00:06:09,700
And this web app is a social networking site written by developers in Java language.

71
00:06:10,120 --> 00:06:14,230
Now, we will understand the flow of this entire stack.

72
00:06:16,780 --> 00:06:23,230
The word stack is used for collection of servicesworking together to create an experience.

73
00:06:23,500 --> 00:06:25,210
In this case, a web.

74
00:06:26,130 --> 00:06:29,160
App or a social networking app.

75
00:06:29,550 --> 00:06:37,380
So we need to set up all these services in our virtual machines and configure together so users get

76
00:06:37,380 --> 00:06:39,630
that experience of a web application.

77
00:06:40,730 --> 00:06:44,570
Okay, so the user opens the browser or the app.

78
00:06:45,340 --> 00:06:48,100
In the browser, the user will enter the URL.

79
00:06:48,490 --> 00:06:50,970
But in this project we don't have a URL.

80
00:06:50,980 --> 00:06:52,750
We have an IP address.

81
00:06:52,780 --> 00:06:55,780
In the next project, we'll see how to set up a URL.

82
00:06:56,380 --> 00:07:00,160
But now we will open a browser or the user will open the browser.

83
00:07:00,160 --> 00:07:01,570
Enter the IP address.

84
00:07:01,570 --> 00:07:04,240
This is the IP address of a load balancer.

85
00:07:04,860 --> 00:07:09,690
And we are going to use Engine X service to create the load balancing experience.

86
00:07:10,060 --> 00:07:17,940
Engine X is a web service just like Apache http D, and it's very commonly used to create the load balancing

87
00:07:17,940 --> 00:07:18,870
experience.

88
00:07:19,230 --> 00:07:24,450
So in one of our VM we will be having engine service and we'll configure it in a way as soon as the

89
00:07:24,450 --> 00:07:29,430
request comes, it is going to route the request to the Tomcat server.

90
00:07:30,540 --> 00:07:32,940
Our Apache Tomcat service.

91
00:07:33,780 --> 00:07:38,760
Apache Tomcat is a Java Web application service.

92
00:07:39,820 --> 00:07:43,690
Once again, Java Web Application Service.

93
00:07:44,790 --> 00:07:47,130
Watch the video and let that sink in.

94
00:07:48,530 --> 00:07:54,920
So if you have a web application written in Java, Tomcat is a very famous service to host it.

95
00:07:55,780 --> 00:08:01,360
So the application, which is written by the developer, will be sitting here.

96
00:08:02,330 --> 00:08:08,630
And if your application needs an external storage, you can use NFS servers.

97
00:08:09,260 --> 00:08:13,850
If you have never heard of NFS, I recommend you do a little research.

98
00:08:13,850 --> 00:08:19,940
We will be talking about this again in a ways, but understand what is a shared storage for now.

99
00:08:20,270 --> 00:08:26,000
If you have cluster of servers and if you need a centralized storage, you can store it in NFS very

100
00:08:26,000 --> 00:08:28,940
commonly used coming back to our application.

101
00:08:28,940 --> 00:08:30,530
So our application will be living here.

102
00:08:30,530 --> 00:08:37,340
The user will get a web page, the user will log in, the login details will be stored in my SQL database

103
00:08:37,340 --> 00:08:39,559
service and will come to that.

104
00:08:40,500 --> 00:08:45,150
Now here, there is also one more service called Rabbit MQ connected to Tomcat.

105
00:08:45,980 --> 00:08:46,970
And your project.

106
00:08:46,970 --> 00:08:48,350
This is really dummy.

107
00:08:48,590 --> 00:08:50,120
It's not functional.

108
00:08:50,720 --> 00:08:56,660
The reason I included this is to create little more complexity so you can practice more.

109
00:08:57,110 --> 00:09:01,390
In future we may be adding a few more services like this, which may be functional.

110
00:09:01,400 --> 00:09:10,870
Maybe Dummy Rabbit MQ is a message broker or also called a Queuing agent to connect to applications together,

111
00:09:10,880 --> 00:09:12,950
you can stream the data from this.

112
00:09:13,220 --> 00:09:18,290
You don't need to dig in much about this as a DevOps engineer, but you should know there is such service

113
00:09:18,620 --> 00:09:25,100
message broker or message queue or queuing agent coming back to our application once again.

114
00:09:25,190 --> 00:09:34,130
So our application which is running in tomcat, accessed by the users and the user will log in with

115
00:09:34,130 --> 00:09:35,990
username and password.

116
00:09:36,410 --> 00:09:44,480
When that happens, our application will run an SQL query to access the user information stored in 

117
00:09:44,480 --> 00:09:45,800
MySQL database.

118
00:09:46,010 --> 00:09:52,100
But before it goes to the my SQL database, the request will go to mem cache service.

119
00:09:52,490 --> 00:09:54,770
Mem cache is a database caching.

120
00:09:54,770 --> 00:09:58,400
It will be connected with the my SQL Server.

121
00:09:59,830 --> 00:10:06,640
My SQL Server will store the user information when the first time the request comes to the database,

122
00:10:06,640 --> 00:10:13,570
my SQL, it will be sent from the My SQL Server to the Tomcat and then it will be cache to the cache

123
00:10:13,570 --> 00:10:14,110
server.

124
00:10:14,110 --> 00:10:16,990
So next time a request comes, the same request comes.

125
00:10:16,990 --> 00:10:23,950
It will be accessing the data which is cached in cash service just like you have browser cache.

126
00:10:23,980 --> 00:10:26,200
We also have database caching.

127
00:10:26,200 --> 00:10:30,370
Mem cache is a very famous database caching servers.

128
00:10:33,860 --> 00:10:36,320
Okay, so here's the entire stack.

129
00:10:37,350 --> 00:10:38,460
By your screen.

130
00:10:38,490 --> 00:10:39,070
Take a look.

131
00:10:39,090 --> 00:10:41,390
Once again, rewind the video.

132
00:10:41,400 --> 00:10:45,990
If you need to understand all these services, also do your own research.

133
00:10:45,990 --> 00:10:51,330
It is very important for a DevOps engineer to understand the flow of the stack.

134
00:10:51,480 --> 00:10:56,340
So whenever any issue comes, we can understand where it is originating from.

135
00:10:56,580 --> 00:11:02,340
Like if the user is not able to log in, the web page is coming, user is not able to log in, probably

136
00:11:02,340 --> 00:11:08,400
it is the database service not connected to the application or if the web page is not showing properly,

137
00:11:08,400 --> 00:11:09,600
it's the Tomcat.

138
00:11:10,640 --> 00:11:17,390
Now we cannot dig into each and every service and understand it in detail because as a DevOps.

139
00:11:18,210 --> 00:11:22,530
We are more involved into the implementation rather than the functionality.

140
00:11:22,530 --> 00:11:25,410
And but yes, you should know the functionality.

141
00:11:25,560 --> 00:11:31,070
So if you feel you need to know more about a service, you can do your own research.

142
00:11:31,080 --> 00:11:37,320
But we will be using this service as many times in the course in a as in Docker, in Kubernetes, in

143
00:11:37,320 --> 00:11:39,030
Jenkins Ansible.

144
00:11:39,060 --> 00:11:42,900
So by the end of the course, you'll have a very good hand on all these services.

145
00:11:43,200 --> 00:11:44,100
Let's look at it.

146
00:11:44,100 --> 00:11:47,310
One more architecture of how to implement it.

147
00:11:48,870 --> 00:11:53,160
Another design we have is for our automation stack.

148
00:11:53,190 --> 00:11:59,360
We will be using a vagrant to automate automatically set up our virtual machine.

149
00:11:59,370 --> 00:12:06,450
So Vagrant is going to communicate with Oracle VM Virtual Box, which is the hypervisor and create automatically

150
00:12:06,450 --> 00:12:08,040
virtual machines on that.

151
00:12:08,610 --> 00:12:14,790
Then we'll be using some batch scripts or batch commands to set up our services.

152
00:12:14,940 --> 00:12:15,740
Engine x.

153
00:12:15,750 --> 00:12:16,830
Apache Tomcat.

154
00:12:16,900 --> 00:12:19,680
Mem Rabbit mq MySQL.

155
00:12:21,820 --> 00:12:28,870
So we will automatically create virtual machines from Vagrant Virtual Machine for Engine X, Apache

156
00:12:28,870 --> 00:12:32,830
Tomcat, Mem Cache, Rabbit, MQ and MySQL.

157
00:12:34,380 --> 00:12:38,010
Okay, Finally, let's understand the flow of execution.

158
00:12:38,630 --> 00:12:43,360
First, we're going to set up all our tools from the prerequisite videos.

159
00:12:43,370 --> 00:12:50,810
If you have all this setup already, then you can clone the source code, which will be seen in the

160
00:12:50,810 --> 00:12:51,620
project.

161
00:12:52,780 --> 00:12:56,200
We're going to seed into a vagrant directory in the source code.

162
00:12:57,130 --> 00:12:58,450
There will be a Vagrantfile.

163
00:12:58,450 --> 00:13:05,680
We'll bring up our VMs automatically from that background file, we'll validate all our virtual machines

164
00:13:05,680 --> 00:13:11,440
If they're up and running and able to interact with each other, then we're going to start setting up

165
00:13:11,440 --> 00:13:21,160
all our services one by one, first my SQL, then Mem cache D, then Rabbit MQ, then Tomcat and finally

166
00:13:21,160 --> 00:13:22,210
Nginx.

167
00:13:23,060 --> 00:13:27,650
And of course, we're going to build our application or Java application and deploy it.

168
00:13:28,280 --> 00:13:32,090
Then we're going to finally verify all this from our browser.

