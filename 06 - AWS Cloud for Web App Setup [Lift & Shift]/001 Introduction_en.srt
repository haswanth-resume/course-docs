1
00:00:07,820 --> 00:00:08,370
.

2
00:00:13,660 --> 00:00:15,190
Welcome to the project.

3
00:00:15,700 --> 00:00:18,580
This is an AWS cloud computing project.

4
00:00:19,860 --> 00:00:27,990
The name of this project is lift and shift application workload, and we're going to lift our application,

5
00:00:28,020 --> 00:00:31,110
the vprofile and shift it on AWS cloud.

6
00:00:36,500 --> 00:00:42,710
Let's understand about this project, In previous project, we have seen a multi-tier Web application

7
00:00:42,710 --> 00:00:51,770
stack vprofile by using Vagrant .In this project, we are going to host and run it on AWS cloud

8
00:00:51,920 --> 00:00:53,180
for production.

9
00:00:54,730 --> 00:00:58,540
And we're going to use a lift and shift strategy for this.

10
00:00:59,960 --> 00:01:05,510
After going through this project, you will learn how to run application workload on AWS cloud

11
00:01:05,630 --> 00:01:08,090
by using lift and shift strategy.

12
00:01:13,930 --> 00:01:15,520
Let's understand the scenario.

13
00:01:16,700 --> 00:01:23,600
We have, let's say, application services, which are running on physical or virtual machines, there

14
00:01:23,600 --> 00:01:32,630
could be various services like databases, Postgres, Oracle, application services like Tomcat, even

15
00:01:32,630 --> 00:01:38,870
LAMP Stack, DNS services and various kinds of services that powers our application.

16
00:01:40,480 --> 00:01:44,410
And we have all this work in our data center.

17
00:01:47,280 --> 00:01:52,950
So, so many servers running varieties of services on your local data centre.

18
00:01:59,480 --> 00:02:03,620
To manage all this, you will need multiple teams working around the clock.

19
00:02:04,190 --> 00:02:10,280
We will need virtualization team for running virtualization platform, data center, operations team

20
00:02:10,550 --> 00:02:18,110
for data centre & related operations work, monitoring team to monitor 24/7 and sys admin team,

21
00:02:18,110 --> 00:02:18,620
of course.

22
00:02:27,710 --> 00:02:32,390
Managing all these services, servers and teams is complex.

23
00:02:34,040 --> 00:02:40,520
It becomes more complex if you want to scale up or scale down, which needs to be done very regularly.

24
00:02:41,540 --> 00:02:47,210
There's a huge cost for procuring all these resources and also regular maintenance cost.

25
00:02:54,520 --> 00:02:57,220
Most of the processes in this will be manual.

26
00:02:59,770 --> 00:03:05,650
If you have a virtualization layer on top of it, it is possible to automate those things, but it's

27
00:03:05,650 --> 00:03:08,530
really difficult to do it and also to maintain it.

28
00:03:09,440 --> 00:03:12,830
And not to mention all these things are very time consuming.

29
00:03:19,830 --> 00:03:26,880
Solution to all this problem is to have a cloud computing setup, so instead of running our workload

30
00:03:26,880 --> 00:03:33,540
in our data center, we run it on a cloud computing platform that we don't pay for the upfront cost

31
00:03:33,720 --> 00:03:37,530
for procuring the resource. We pay as we go.

32
00:03:38,700 --> 00:03:41,790
Consuming infrastructure as a service.

33
00:03:43,530 --> 00:03:44,940
Just like electricity.

34
00:03:47,040 --> 00:03:55,200
We get flexibility, it's elastic in nature, we can scale out or scale in and really control our cost.

35
00:03:56,390 --> 00:03:58,720
So managing infrastructure becomes easier.

36
00:03:59,960 --> 00:04:07,010
And most important, we can do automation, we can automate each and every step and process to avoid

37
00:04:07,010 --> 00:04:10,070
human errors and save our time, of course.

38
00:04:15,160 --> 00:04:20,140
We're using AWS, cloud computing, and we'll see what all the services that we are going to use

39
00:04:20,140 --> 00:04:24,820
in this project, starting with ec2 instances.

40
00:04:26,070 --> 00:04:34,260
Ec2 instances will be our VMs for Tomcat, rabbitmq, Memcache and mysql servers. We will be

41
00:04:34,260 --> 00:04:40,380
also using elastic load balancer, which will be replacement of our engine service.

42
00:04:42,050 --> 00:04:49,220
Will be using auto scaling service, which will automatically scale out and scale in our ec2 instances,

43
00:04:50,090 --> 00:04:55,070
which will automatically control our resources and also our cost.

44
00:04:56,400 --> 00:05:04,740
For storage, if you'll be using S3 or EFS so and also Route 53 for a private DNS service.

45
00:05:06,070 --> 00:05:13,600
Along with these we will be using few more services like IAM, ACM, EBS etc

46
00:05:18,350 --> 00:05:20,600
Let's make sure our objectives are clear.

47
00:05:20,990 --> 00:05:25,670
We want a flexible infrastructure, we want to pay as we go model.

48
00:05:25,680 --> 00:05:27,830
We don't want to be upfront cost.

49
00:05:28,890 --> 00:05:33,810
We would like to modernize our application more effectively by using AWS services.

50
00:05:35,450 --> 00:05:37,880
And we also want automation.

51
00:05:38,980 --> 00:05:40,870
Infrastructure as a code.

52
00:05:47,440 --> 00:05:52,660
Now we will see architectural design of AWS set up that we will be creating.

53
00:05:54,810 --> 00:05:58,560
We are using ec2 instances, elastic load balancer.

54
00:05:59,500 --> 00:06:00,460
Auto scaling.

55
00:06:01,680 --> 00:06:03,260
S3 for storage.

56
00:06:04,220 --> 00:06:08,240
Amazon certificate manager and Route 53 service.

57
00:06:17,850 --> 00:06:21,780
Well, this is the stack from our previous project.

58
00:06:22,940 --> 00:06:30,920
We had all the service on virtual machines on our computer Nginx, Apache, Tomcat, RabbittMQ,

59
00:06:30,920 --> 00:06:36,950
Memcache and MySQL, we are going to shift this stack on AWS Cloud.

60
00:06:38,260 --> 00:06:43,100
Once we have our stack on AWS Cloud, our architectural design will be like this.

61
00:06:43,690 --> 00:06:51,030
Users will access our website by using a URL and that URL we be pointing are told, will be point to an end point.

62
00:06:51,280 --> 00:06:54,040
This entry will be mentioned in GoDaddy DNS.

63
00:06:55,450 --> 00:07:04,450
User browsers or the app will use this end point then to connect to the load balancer, by using https

64
00:07:05,390 --> 00:07:11,250
Certificate for https encryption will be mentioned in ACM Amazon Certificate Manager Service.

65
00:07:11,950 --> 00:07:15,280
So user will access application load balancer endpoint.

66
00:07:15,910 --> 00:07:21,610
Our load balancer will be in a security group and will only allow https traffic.

67
00:07:22,480 --> 00:07:30,280
And then our application load balancer, will route the request to Tomcat instances. Apache tomcat

68
00:07:30,280 --> 00:07:36,550
service, will be running on some set of instances which will be managed by our auto scaling group.

69
00:07:37,360 --> 00:07:43,420
So as for high or low load, these instances capacity will be scaled out or scaled in.

70
00:07:44,590 --> 00:07:50,140
These ec2 instances where Tomcat is running, will be in a separate security group and will only allow

71
00:07:50,140 --> 00:07:54,070
traffic on Port 8080 only from a load balancer.

72
00:07:55,120 --> 00:07:59,090
We know application, our vprofile application sits on Tomcat instance.

73
00:07:59,860 --> 00:08:01,690
We have seen this in our previous project.

74
00:08:02,700 --> 00:08:10,890
And our application needs backend servers, which are MySQL, Memcache and RabbitMQ. Information

75
00:08:10,890 --> 00:08:18,570
of backend services or the backend server IP address will be mentioned in Route 53 private DNA zone.

76
00:08:19,440 --> 00:08:25,890
So Tomcat instances will access back server with a name which will be mentioned in Route 53.

77
00:08:25,890 --> 00:08:31,200
Private dns where the private IP address of our background servers will be mentioned.

78
00:08:32,559 --> 00:08:39,730
These backend ec2 instances, which will be running my sql, RabbitMQ Memcache will be in

79
00:08:39,730 --> 00:08:40,929
a separate security group.

80
00:08:44,650 --> 00:08:52,840
So the AWS. sources, which are in use over here are first Amazon certificate manager for a certificate

81
00:08:53,560 --> 00:08:55,150
application load balancer.

82
00:08:56,730 --> 00:09:06,060
Set of ec2 instances for Tomcat, Memcache Rabbit, MQ and my sql, three separate security groups.

83
00:09:06,960 --> 00:09:11,190
Amazon Route 53 for DNS Private Zones.

84
00:09:12,590 --> 00:09:17,360
And also, there's Amazon S3 bucket to store our software artifacts.

85
00:09:18,550 --> 00:09:23,640
Now, I recommend you pause the video and watch this architectural diagram once again.

86
00:09:24,840 --> 00:09:31,230
Will start the execution now, and this is the flow of execution, first, we will log into our AWS

87
00:09:31,260 --> 00:09:31,710
account.

88
00:09:32,520 --> 00:09:37,170
We're going to key pairs, which will use to login to our ec2 instances.

89
00:09:37,590 --> 00:09:46,170
We create security groups for load balancer, Tomcat and backend services. We will launch instances with

90
00:09:46,170 --> 00:09:52,290
user data, which will be our bash scripts. We will update IP to name mapping in Route 53.

91
00:09:53,950 --> 00:09:59,040
We're going to then build our application from source code, this will do it on our local machine,

92
00:09:59,040 --> 00:09:59,880
on our laptop.

93
00:10:01,020 --> 00:10:07,890
And we upload our artifact to a s3 bucket. From S3 bucket we will download our artifact to ec2

94
00:10:07,890 --> 00:10:10,560
instance, where tomcat service will be running.

95
00:10:11,670 --> 00:10:14,880
Then we'll set up a load balancer with https connection.

96
00:10:16,240 --> 00:10:25,210
Will map our elastic load balancer and point to a website in GoDaddy DNS and will verify. Once we verified

97
00:10:25,210 --> 00:10:30,160
our entire set up, then we'll build an auto scaling group for a Tomcat instances.

98
00:10:31,210 --> 00:10:34,020
So now it's time to dive into AWS.

