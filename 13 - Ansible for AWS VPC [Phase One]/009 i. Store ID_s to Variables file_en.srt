1
00:00:01,520 --> 00:00:08,210
Now you should have a fully functional VPC with public and private subnets distributed among three zones.

2
00:00:08,600 --> 00:00:12,410
And while we are doing all this, we also collected a lot of important information.

3
00:00:12,830 --> 00:00:21,230
The IDs of VPC, public subnet ID, private subnet ID, Gateway ID, Route Table ID, which will be

4
00:00:21,230 --> 00:00:24,290
very useful in our next project.

5
00:00:24,290 --> 00:00:27,110
And also in general, it is very useful information.

6
00:00:27,230 --> 00:00:33,140
So we better store this information into a file in a form of variable so we can reuse it later.

7
00:00:33,830 --> 00:00:38,210
But for that, let's just print access all those IDs.

8
00:00:38,480 --> 00:00:44,900
So I'm going to print all these variables and ID specifically from that variables.

9
00:00:45,080 --> 00:00:46,100
And then we'll see.

10
00:00:46,370 --> 00:00:51,470
Once we print it, then we're going to store all that information into a file, into a text file, which

11
00:00:51,470 --> 00:00:53,060
will be a variables file for us.

12
00:00:53,270 --> 00:00:57,380
So we'll use the debug module to print, of course.

13
00:00:57,740 --> 00:01:01,340
And we'll say var and we'll run it in a loop.

14
00:01:01,790 --> 00:01:05,150
So I'll give the variable of the loop item.

15
00:01:08,150 --> 00:01:10,730
And the loop loop.

16
00:01:12,260 --> 00:01:15,170
And then I'll give a list of all the variables.

17
00:01:16,320 --> 00:01:19,260
Okay, so VPC out variable that we stored.

18
00:01:19,380 --> 00:01:26,910
Dot vpc dot ID that's written as the VPC ID public subnet ID three public subnet ID three Private subnet

19
00:01:26,910 --> 00:01:36,360
IP ID Internet Gateway ID, Public Route Table ID, NAT Gateway ID and Private Route Table ID.

20
00:01:36,750 --> 00:01:38,220
So I'll just print it first.

21
00:01:38,580 --> 00:01:39,450
We save it.

22
00:01:42,600 --> 00:01:43,380
Print.

23
00:01:44,970 --> 00:01:46,140
IDs.

24
00:01:48,750 --> 00:01:51,240
IDs commit.

25
00:01:53,980 --> 00:01:54,820
Let's push it.

26
00:02:09,270 --> 00:02:15,870
I guess it should go through all the task, get the variables, and then finally print IDs from that.

27
00:02:21,170 --> 00:02:24,980
So you should see all that valuable information, all the IDs.

28
00:02:27,210 --> 00:02:29,460
VPC ID all the subnets ID.

29
00:02:31,660 --> 00:02:37,570
Now we should have a plan to store these IDs into a file in a variable format.

30
00:02:38,050 --> 00:02:43,660
But if you want to use it like instantly without storing into a variable, you can also set facts fact

31
00:02:43,660 --> 00:02:44,470
variables.

32
00:02:44,800 --> 00:02:50,950
So you can set all these ideas into some variable, and we can use a module which can set facts for

33
00:02:50,950 --> 00:02:51,400
us.

34
00:02:52,150 --> 00:02:54,250
So in the runtime if you want to use it.

35
00:02:55,060 --> 00:03:00,210
In fact, variables are very handy and there is a module which can set facts for you.

36
00:03:02,740 --> 00:03:08,590
And the module name is set underscore fact and then you can set fact variable.

37
00:03:08,590 --> 00:03:10,660
It's a dictionary format, not a list format.

38
00:03:10,840 --> 00:03:17,320
So let's say I will search VPC ID, that's the fact name and its value.

39
00:03:27,380 --> 00:03:31,610
So when I run this in the run time, it will set that as a fact variable and then I can use it in an

40
00:03:31,610 --> 00:03:33,770
exit playbook in the same playbook if I want.

41
00:03:34,510 --> 00:03:38,470
So this is for the runtime and let's set like that all the IDs.

42
00:03:38,950 --> 00:03:42,910
So all the other ideas like that, you can set as fact variable.

43
00:03:43,030 --> 00:03:48,340
Also, there's one option that you can use if you wanted across the execution.

44
00:03:48,340 --> 00:03:49,380
You can see cache able.

45
00:03:49,390 --> 00:03:50,110
Yes.

46
00:03:50,740 --> 00:03:54,760
So when you do that, then this variable will be added to the fact cache.

47
00:03:55,520 --> 00:04:01,160
You can find detailed information about this catchable option in variables documentation of Ansible.

48
00:04:01,860 --> 00:04:09,540
So I'm showing you just to show a very good feature in Ansible so you can use it during the live execution

49
00:04:09,540 --> 00:04:10,710
during runtime.

50
00:04:10,710 --> 00:04:12,870
You want to use these variables as fact variable.

51
00:04:12,870 --> 00:04:13,800
You can use that.

52
00:04:13,890 --> 00:04:20,370
But for our particular use case, we want it to be stored into a file, as I already told you, so we

53
00:04:20,370 --> 00:04:21,899
can use it later as well.

54
00:04:22,440 --> 00:04:24,810
So for that, I'm going to use a copy module.

55
00:04:25,540 --> 00:04:28,690
And store all that information into a file.

56
00:04:29,200 --> 00:04:31,120
So I'm going to see name.

57
00:04:37,270 --> 00:04:39,430
Let's name this copy.

58
00:04:42,050 --> 00:04:51,650
Or should I say create variables file for VPC output.

59
00:04:52,980 --> 00:04:53,240
Okay.

60
00:04:53,360 --> 00:04:55,700
And the copy module.

61
00:04:58,190 --> 00:04:58,970
Content.

62
00:05:01,530 --> 00:05:06,150
So all this we are going to give really horizontally instead of vertically.

63
00:05:06,600 --> 00:05:08,660
So this could be very long horizontally.

64
00:05:08,670 --> 00:05:13,170
So in double code, you can give all the variables separated by a new line character.

65
00:05:14,120 --> 00:05:16,460
Like we said this.

66
00:05:19,030 --> 00:05:20,310
Will ignore the double quotes there.

67
00:05:20,320 --> 00:05:21,700
We don't need that double code.

68
00:05:26,690 --> 00:05:28,610
And a new line character.

69
00:05:29,180 --> 00:05:31,430
And then the next variable.

70
00:05:38,400 --> 00:05:38,760
Again.

71
00:05:38,760 --> 00:05:40,320
Ditch that double coat.

72
00:05:41,450 --> 00:05:43,040
Otherwise it will create a problem.

73
00:05:46,140 --> 00:05:49,380
So I've set all those variables in a horizontal format.

74
00:05:50,260 --> 00:05:52,090
Separate by newline character.

75
00:05:56,040 --> 00:06:03,060
And destination will give it in the vast directory will give output underscore vars.

76
00:06:03,940 --> 00:06:07,210
And let's see if this committed.

77
00:06:09,600 --> 00:06:12,420
Store output

78
00:06:14,580 --> 00:06:15,600
variables.

79
00:06:28,270 --> 00:06:28,430
Okay.

80
00:06:28,510 --> 00:06:30,790
Yeah, I think the idea did very quick, so.

81
00:06:31,980 --> 00:06:32,120
So.

82
00:06:32,180 --> 00:06:34,060
Should have pulled all the changes.

83
00:06:38,730 --> 00:06:40,290
Alright, let's execute it.

84
00:06:40,680 --> 00:06:42,300
Ansible playbook.

85
00:06:47,850 --> 00:06:48,100
Okay.

86
00:06:48,270 --> 00:06:49,600
There's an indentation.

87
00:06:49,620 --> 00:06:50,790
It's right here.

88
00:06:52,040 --> 00:06:54,650
But I think it's talking about set fact.

89
00:06:55,650 --> 00:06:57,570
And yeah, I think that's a mistake.

90
00:06:57,870 --> 00:06:59,070
So let's fix it.

91
00:07:01,860 --> 00:07:02,700
Yes.

92
00:07:02,800 --> 00:07:04,080
It should be here.

93
00:07:05,560 --> 00:07:06,190
Right.

94
00:07:06,670 --> 00:07:09,070
And saying we have to do it for this also.

95
00:07:11,420 --> 00:07:14,120
Control a safe commit.

96
00:07:15,890 --> 00:07:17,840
Fixed indentation.

97
00:07:34,180 --> 00:07:35,590
Okay, let's try that now.

98
00:07:44,740 --> 00:07:44,910
Okay.

99
00:07:45,080 --> 00:07:48,020
So it is it created a file in the vast directory.

100
00:07:48,890 --> 00:07:50,990
So we should see inverse.

101
00:07:52,890 --> 00:07:53,730
Output?

102
00:07:53,850 --> 00:07:54,600
Yes.

103
00:07:55,230 --> 00:07:55,920
Great.

104
00:07:56,100 --> 00:08:02,850
So we have all the all this valuable information saved in a variable file which can be reused later.

105
00:08:02,850 --> 00:08:09,870
And we are going to actually use it because our next task is to set up Bastion host in the public subnet.

106
00:08:09,870 --> 00:08:13,980
So we will need the VPC ID, we need the public subnet ID.

