1
00:00:00,480 --> 00:00:03,300
Okay, now is the time to create the build project.

2
00:00:03,300 --> 00:00:04,050
So.

3
00:00:05,200 --> 00:00:06,860
Let's go to build project.

4
00:00:07,100 --> 00:00:08,240
You can go from here.

5
00:00:08,240 --> 00:00:13,520
You can just say build and you can say build project or you can just search for the service code.

6
00:00:13,520 --> 00:00:15,620
Build from there.

7
00:00:16,460 --> 00:00:18,170
Code build.

8
00:00:21,730 --> 00:00:21,930
Okay.

9
00:00:21,970 --> 00:00:26,860
Your first job, first billed job will be to do code analysis on our code analysis.

10
00:00:26,860 --> 00:00:28,360
So let's create a project.

11
00:00:28,360 --> 00:00:29,590
Create, build project.

12
00:00:32,640 --> 00:00:35,580
It's like we're creating Jenkins job similar to that.

13
00:00:37,280 --> 00:00:41,450
So we'll name this job as we profile hyphen build.

14
00:00:43,630 --> 00:00:46,630
Source code comet, our repository.

15
00:00:46,990 --> 00:00:48,820
You can see the repository over here.

16
00:00:50,470 --> 00:00:51,460
Branch.

17
00:00:52,290 --> 00:00:56,280
We are going to use a CI hyphenated plus branch.

18
00:00:58,150 --> 00:00:59,760
And scroll down operating system.

19
00:00:59,770 --> 00:01:04,269
We are going to run a maven command so open to should be fine.

20
00:01:04,599 --> 00:01:08,920
Runtime Environment Default Standard Image 3.0.

21
00:01:11,310 --> 00:01:12,690
Okay, let's scroll down.

22
00:01:13,530 --> 00:01:15,720
So this is going to create a service role.

23
00:01:16,730 --> 00:01:20,360
And just to make it unique, I'll put some numbers over here, like 12.

24
00:01:22,680 --> 00:01:27,840
And we'll later update this roll so it can access the parameter store that we have saved.

25
00:01:28,640 --> 00:01:30,590
Okay, But first, let's create it.

26
00:01:32,560 --> 00:01:35,440
Okay, so we have to use a build spec file.

27
00:01:36,710 --> 00:01:41,840
So you can use a build spec file from version control, but we're going to say insert build, come on

28
00:01:42,260 --> 00:01:43,820
and switch to editor.

29
00:01:44,270 --> 00:01:48,290
And this is where we're going to copy our build spec file content.

30
00:01:50,480 --> 00:01:53,750
So build spec file is in our source code.

31
00:01:54,620 --> 00:01:56,510
In sci hyphenate plus branch.

32
00:01:56,510 --> 00:02:00,590
You have a files directory in that you have sonar build spec file.

33
00:02:01,470 --> 00:02:04,260
You can just get it and copy its content.

34
00:02:11,650 --> 00:02:13,980
Now let's select all bastard.

35
00:02:16,050 --> 00:02:18,510
We'll go through this build spec file in a moment.

36
00:02:19,230 --> 00:02:21,540
So we'll just read it from here itself.

37
00:02:23,080 --> 00:02:27,550
.0.2 environment variable from parameter store that we have saved.

38
00:02:27,550 --> 00:02:31,690
So we are going to set up here five variables and its value.

39
00:02:31,690 --> 00:02:37,300
We are going to give from the parameter store that we have set phases in install phase.

40
00:02:37,300 --> 00:02:41,110
We are installing JDBC and we have a command.

41
00:02:41,110 --> 00:02:46,390
We are going to copy our settings dot XML file to slash root, dot M to settings dot xml.

42
00:02:46,480 --> 00:02:49,210
So setting dot XML anyways has to be in this place.

43
00:02:49,210 --> 00:02:54,580
So we're using a copy command to copy that file settings dot XML is already in our source code which

44
00:02:54,580 --> 00:03:00,400
will be moved to this place, which will have the information about our code artifact repository.

45
00:03:00,880 --> 00:03:02,830
Then we have pre build phase.

46
00:03:03,220 --> 00:03:10,570
We're running commands, we're running APT update, we're installing check style and GQ with W Command,

47
00:03:10,570 --> 00:03:12,250
We're downloading Maven here.

48
00:03:12,280 --> 00:03:13,690
We extract Maven.

49
00:03:14,450 --> 00:03:16,370
We create a link for MAVEN.

50
00:03:16,820 --> 00:03:19,070
Then we download sonar scanner.

51
00:03:20,060 --> 00:03:21,980
We unzip the sonar scanner.

52
00:03:23,050 --> 00:03:25,780
We export the pot for for sonar.

53
00:03:28,840 --> 00:03:30,010
And then the build commands.

54
00:03:30,010 --> 00:03:34,600
Of course, in the build phase commands, we have MAVEN test, we're going to run check style, MAVEN

55
00:03:34,600 --> 00:03:40,210
check style and MAVEN sonar with all the parameters that we are passing.

56
00:03:40,570 --> 00:03:43,450
So in our login data, log in.

57
00:03:44,190 --> 00:03:45,150
That one.

58
00:03:45,380 --> 00:03:49,980
And so all the parameters that we are saving over here, all the variables that we are saving over here,

59
00:03:50,070 --> 00:03:51,000
we using it.

60
00:03:51,720 --> 00:03:57,820
Then we wait for 5 seconds and there is a command which is going to store the result and result dot

61
00:03:57,840 --> 00:03:58,890
JSON file.

62
00:03:59,190 --> 00:04:00,540
We get this file.

63
00:04:01,480 --> 00:04:06,730
And with an e condition, we check the status, the quality gate passes.

64
00:04:06,730 --> 00:04:12,010
This job will be returning an exit code zero all or else it will return non zero.

65
00:04:12,460 --> 00:04:16,329
So basically this is going to fail the job if your quality gates are not passing.

66
00:04:17,540 --> 00:04:25,100
Okay, so we are good with this, so we need to make few changes though the parameters value from some

67
00:04:25,100 --> 00:04:26,180
parameter store.

68
00:04:26,480 --> 00:04:29,870
So host value we can just give directly host.

69
00:04:30,560 --> 00:04:33,080
It's already there for login.

70
00:04:33,470 --> 00:04:35,300
That's really the owner token.

71
00:04:35,300 --> 00:04:41,690
So let's give us it's value as sonar token or whatever named of variable that you have saved it with

72
00:04:41,720 --> 00:04:47,930
the sonar token with organization name variable, we have given us organization itself.

73
00:04:48,200 --> 00:04:50,390
So we can keep it as it is project.

74
00:04:51,190 --> 00:04:53,260
We have given variables project.

75
00:04:55,340 --> 00:04:57,380
Code artefact or token.

76
00:04:58,370 --> 00:05:03,800
We have saved it as code artifact hyphen token that variable.

77
00:05:06,400 --> 00:05:12,160
So as you have used the variable name in the parameter store, so you have to give it with the same

78
00:05:12,160 --> 00:05:12,700
name.

79
00:05:12,970 --> 00:05:16,990
So it's going to access the parameter store and store all the variable these values.

80
00:05:17,800 --> 00:05:19,870
And let's check again.

81
00:05:20,700 --> 00:05:21,510
I think should be good.

82
00:05:21,510 --> 00:05:23,600
We have not yet set any quality gates.

83
00:05:23,610 --> 00:05:24,870
We'll set it later.

84
00:05:26,750 --> 00:05:28,640
Okay, let's crawl down.

85
00:05:29,180 --> 00:05:31,970
And I'm not going to store any artifact from here.

86
00:05:32,030 --> 00:05:33,260
Cloud watch logs.

87
00:05:33,260 --> 00:05:35,310
I will put a checkmark on there.

88
00:05:35,330 --> 00:05:36,680
I'll give a group name.

89
00:05:37,310 --> 00:05:44,150
We profile hyphen and Virginia hyphen sooner.

90
00:05:45,510 --> 00:05:46,800
Or in Virginia.

91
00:05:46,870 --> 00:05:47,990
Build, I will say.

92
00:05:49,770 --> 00:05:50,550
Build.

93
00:05:53,540 --> 00:05:54,440
Logs.

94
00:05:54,920 --> 00:05:55,670
Stream name.

95
00:05:55,670 --> 00:05:57,380
I'll say sooner.

96
00:05:57,830 --> 00:05:59,660
Build job.

97
00:06:00,970 --> 00:06:04,000
So we can see the output streaming really from here.

98
00:06:04,540 --> 00:06:07,000
That should be all in this job, let's say.

99
00:06:07,030 --> 00:06:08,320
Create, build, project.

100
00:06:11,840 --> 00:06:15,080
Okay, before we run and test it, we have to update.

101
00:06:16,020 --> 00:06:22,080
The role that we have used over here, and we have to give the privilege so it can access some parameters

102
00:06:22,080 --> 00:06:22,590
to our.

103
00:06:24,400 --> 00:06:28,420
Okay, so you can find the name from Edit Environment section.

104
00:06:30,400 --> 00:06:31,610
You can find the road name there.

105
00:06:31,620 --> 00:06:32,540
That's the road name.

106
00:06:32,550 --> 00:06:35,430
Let's copy that and say cancel here.

107
00:06:35,970 --> 00:06:36,660
Yes, of course.

108
00:06:36,660 --> 00:06:37,380
Discard.

109
00:06:37,620 --> 00:06:39,330
We'll go to I am service.

110
00:06:42,080 --> 00:06:43,370
We'll go to role section.

111
00:06:43,370 --> 00:06:44,720
We'll find that role.

112
00:06:47,320 --> 00:06:48,310
There is that role.

113
00:06:48,400 --> 00:06:49,660
Let's edit that role.

114
00:06:49,660 --> 00:06:50,950
We have to give some policy.

115
00:06:50,950 --> 00:06:52,600
We're going to say attach policy.

116
00:06:54,450 --> 00:06:56,640
So we'll create our own policy.

117
00:06:59,980 --> 00:07:01,390
I choose the service.

118
00:07:02,860 --> 00:07:03,900
And some.

119
00:07:06,900 --> 00:07:11,220
Actually, it should be with the name system manager.

120
00:07:11,520 --> 00:07:14,460
So to manage the service action.

121
00:07:15,410 --> 00:07:22,140
Okay, so in list we need describe parameters in a read.

122
00:07:22,140 --> 00:07:25,560
We will need this describe document parameters.

123
00:07:27,230 --> 00:07:27,680
Indeed.

124
00:07:27,680 --> 00:07:33,860
Again, get parameters, get parameter history and get parameter get parameters.

125
00:07:33,860 --> 00:07:37,100
Both get parameters by depth.

126
00:07:38,210 --> 00:07:42,290
If you have created parameter store one inside another.

127
00:07:42,290 --> 00:07:43,580
So you have to give this.

128
00:07:44,650 --> 00:07:45,790
And that should be it.

129
00:07:45,820 --> 00:07:46,150
No.

130
00:07:46,150 --> 00:07:46,450
Right.

131
00:07:46,450 --> 00:07:47,380
No tagging.

132
00:07:48,100 --> 00:07:54,370
You can give Aaron if you want, but let's keep it that much for now and let's say review policy.

133
00:07:55,950 --> 00:07:56,790
For resources.

134
00:07:56,790 --> 00:08:03,390
You can give a specific urn, but I'm going to say any in this account and review policy.

135
00:08:04,870 --> 00:08:07,900
Prosecute this policy and name v profile hyphen.

136
00:08:09,860 --> 00:08:10,990
Sooner.

137
00:08:12,450 --> 00:08:13,830
Parameters.

138
00:08:16,770 --> 00:08:17,850
Axis.

139
00:08:18,180 --> 00:08:19,530
That's quite a long name.

140
00:08:20,490 --> 00:08:22,080
I'll put Same in the description.

141
00:08:22,320 --> 00:08:23,400
Create policy.

142
00:08:25,890 --> 00:08:27,630
Okay, The policy is created.

143
00:08:27,630 --> 00:08:29,850
I have to go back to rules, actually.

144
00:08:36,450 --> 00:08:37,710
Get the name.

145
00:08:44,200 --> 00:08:47,260
It's like the role attach policies.

146
00:08:49,710 --> 00:08:50,550
Honor some.

147
00:08:50,790 --> 00:08:57,000
I have given the profile soner parameter access the checkmark attach policy.

148
00:08:58,480 --> 00:09:00,280
Okay, so we updated that.

149
00:09:01,390 --> 00:09:06,050
Now, this role will have the privilege to access some parameters to.

150
00:09:07,330 --> 00:09:09,400
Which this villager will need.

151
00:09:09,580 --> 00:09:11,230
Now, let's make a test.

152
00:09:11,350 --> 00:09:12,940
Let's click on Start build.

153
00:09:16,890 --> 00:09:22,080
And this is going to do the code scanning branch I'll keep same.

154
00:09:23,890 --> 00:09:24,820
Start build.

155
00:09:27,220 --> 00:09:28,750
This is going to take some time.

156
00:09:30,790 --> 00:09:32,320
Let's go to phase details.

157
00:09:32,920 --> 00:09:34,630
Switch to build log.

158
00:09:35,170 --> 00:09:42,100
If you are done seeing the phase because build log will really hang your browser sometimes.

159
00:09:43,880 --> 00:09:45,700
As of now, things are going fine.

160
00:09:47,000 --> 00:09:49,220
Okay, install phase is going on.

161
00:09:50,680 --> 00:09:53,080
That successful pre build phase is going on.

162
00:09:55,080 --> 00:10:04,560
Rebuild, completed build started a view from the build log you see from the code artefact it is downloading

163
00:10:04,560 --> 00:10:05,700
the dependencies.

164
00:10:06,510 --> 00:10:10,920
Oh, and this is there.

165
00:10:10,950 --> 00:10:11,460
Yeah.

166
00:10:12,950 --> 00:10:13,210
Yeah.

167
00:10:13,670 --> 00:10:14,870
From code artefact.

168
00:10:14,980 --> 00:10:15,320
Okay.

169
00:10:15,350 --> 00:10:16,430
I missed it again.

170
00:10:17,270 --> 00:10:20,720
So it's very difficult to scroll up and scroll in over here.

171
00:10:21,030 --> 00:10:25,010
Even I tried all the browsers Edge, Chrome, Firefox.

172
00:10:25,010 --> 00:10:27,080
This is always very slow.

173
00:10:30,580 --> 00:10:30,890
Yeah.

174
00:10:30,940 --> 00:10:31,780
You see there?

175
00:10:32,050 --> 00:10:32,380
Yeah.

176
00:10:33,100 --> 00:10:34,180
Then you miss it again.

177
00:10:36,610 --> 00:10:37,070
Okay.

178
00:10:37,090 --> 00:10:38,890
We got a few other logs.

179
00:10:41,200 --> 00:10:48,790
So if we go to our code artefact, let's go to another tab code artifact repository.

180
00:10:50,230 --> 00:10:51,610
Maitland Central.

181
00:10:54,680 --> 00:10:59,210
And you should see here the dependency maven dependency getting stored.

182
00:10:59,840 --> 00:11:01,790
So it's storing the dependency over here.

183
00:11:01,790 --> 00:11:05,510
From here it is providing to your build job, to the build job.

184
00:11:05,930 --> 00:11:08,810
And you have like so many dependencies, right?

185
00:11:10,490 --> 00:11:11,990
And it will keep updating it.

186
00:11:14,790 --> 00:11:16,080
Okay, this is anyways hanging.

187
00:11:16,080 --> 00:11:17,440
I'll go to court.

188
00:11:17,460 --> 00:11:19,620
Build your from here build project.

189
00:11:21,990 --> 00:11:23,440
It's still in progress.

190
00:11:25,160 --> 00:11:27,740
So this is going to take some time, at least initially.

191
00:11:27,740 --> 00:11:28,310
First time.

192
00:11:28,310 --> 00:11:29,630
It takes a very long time.

193
00:11:31,430 --> 00:11:32,720
Fees details.

194
00:11:35,900 --> 00:11:39,770
So I'm going to pause the screen and come back once this is finished.

195
00:11:40,780 --> 00:11:42,760
I'll agree that completed successfully.

196
00:11:42,760 --> 00:11:43,990
That was pretty awesome.

197
00:11:44,890 --> 00:11:46,180
Let's see the result.

198
00:11:46,330 --> 00:11:52,400
So this is a sonar code analysis job, so it should have published result in sonar cloud.

199
00:11:52,420 --> 00:11:57,760
So go to sonar cloud, go to your projects and you can see your project over there.

200
00:11:58,210 --> 00:12:02,050
It has 92 bugs for vulnerabilities and blah, blah, blah.

201
00:12:02,530 --> 00:12:05,410
If we want, we can set quality gates on this.

202
00:12:06,760 --> 00:12:08,780
So I can see quality gates.

203
00:12:08,800 --> 00:12:13,520
I can go to quality gates and I can create my own quality gate.

204
00:12:13,540 --> 00:12:15,550
I will say we profile quality gates.

205
00:12:15,940 --> 00:12:16,810
That name.

206
00:12:17,440 --> 00:12:18,280
Save it.

207
00:12:19,420 --> 00:12:21,100
And let's add a condition.

208
00:12:21,310 --> 00:12:25,660
And I'm going to see an oral code and let's set it for bugs.

209
00:12:28,940 --> 00:12:32,260
I will see value anything that is greater than 50.

210
00:12:32,270 --> 00:12:33,900
So let's first fail.

211
00:12:33,950 --> 00:12:34,880
Try to feel this job.

212
00:12:34,890 --> 00:12:36,160
Okay, we'll give like 50.

213
00:12:36,170 --> 00:12:38,750
We know that currently we have 92 bucks.

214
00:12:40,310 --> 00:12:41,120
Condition.

215
00:12:42,640 --> 00:12:44,560
So we have one rule in this quality.

216
00:12:44,560 --> 00:12:46,660
GATES Let's go to our project.

217
00:12:48,920 --> 00:12:52,370
And for our project, we're going to set up this quality gates.

218
00:12:53,210 --> 00:12:58,790
Quality get in the administration instead of default, we're going to use our own quality gates.

219
00:12:59,820 --> 00:13:01,500
Okay, this is nice.

220
00:13:01,890 --> 00:13:05,370
So this quality gate is going to fail your job.

221
00:13:06,840 --> 00:13:11,160
If your box are greater than 50 and let's test it.

222
00:13:15,500 --> 00:13:16,520
It's a code build.

223
00:13:17,570 --> 00:13:18,180
To test it.

224
00:13:18,200 --> 00:13:19,730
We need to run this job again.

225
00:13:19,730 --> 00:13:25,850
And you will see at the finalizing state or the completed state, it's going to fail the job.

226
00:13:26,450 --> 00:13:28,070
So let's say.

227
00:13:30,780 --> 00:13:32,760
Go to the build and let's start build.

228
00:13:33,270 --> 00:13:34,560
Let's run it once again.

229
00:13:36,990 --> 00:13:39,750
I will take all those defaults and we'll just start build.

230
00:13:41,580 --> 00:13:42,840
Fees details.

231
00:13:44,720 --> 00:13:48,410
Okay, So I'm going to pause my screen and come back once this is done.

232
00:13:50,090 --> 00:13:53,750
Okay, so this is completed with a failure, of course.

233
00:13:54,230 --> 00:14:00,230
So if you see in the build phase, it has error executing while this command is running.

234
00:14:00,880 --> 00:14:04,120
So that this clearly shows the quality gate has failed.

235
00:14:04,450 --> 00:14:07,060
Let's tweak our quality gates back.

236
00:14:08,060 --> 00:14:11,840
So you can change the rule or I'll just go back to the default sona rule.

237
00:14:15,030 --> 00:14:18,480
And we can test and test run the job and test it once again.

238
00:14:18,480 --> 00:14:21,270
But we'll do it later with the pipeline.

239
00:14:24,890 --> 00:14:30,530
I have given the name of this job as the profile build, I should have given V profile code analysis.

240
00:14:30,710 --> 00:14:36,650
But that's just the naming convention for a description in that we can't change the name now, but we

241
00:14:36,650 --> 00:14:38,180
can change the description.

242
00:14:38,420 --> 00:14:40,880
So now our analysis.

243
00:14:42,450 --> 00:14:46,770
So on our code analysis, we'll give that in the description update configuration.

