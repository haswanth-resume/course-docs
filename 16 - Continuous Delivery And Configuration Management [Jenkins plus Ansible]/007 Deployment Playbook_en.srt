1
00:00:00,560 --> 00:00:00,800
Okay.

2
00:00:00,830 --> 00:00:07,280
Now, next, see, next, we'll see our main playbook, which is actually going to deploy Artifact to

3
00:00:07,280 --> 00:00:08,360
Tomcat server.

4
00:00:09,170 --> 00:00:14,900
And so this playbook web pro hyphen app set up HTML, this will get executed again on the same group

5
00:00:14,900 --> 00:00:20,390
app server group and become yes variable timestamp.

6
00:00:20,390 --> 00:00:22,640
We're setting a timestamp variable over here.

7
00:00:23,030 --> 00:00:26,030
This is going to get values from the fact variable.

8
00:00:27,850 --> 00:00:33,050
This variable you're going to use to create a backup file and archive.

9
00:00:33,070 --> 00:00:38,170
So before we deploy our new artifact, we're going to take a backup of the existing artifact.

10
00:00:38,380 --> 00:00:43,240
And when we take backup of a file, it's a good idea that we use Timestamp.

11
00:00:43,330 --> 00:00:45,310
So we're going to use this variable now.

12
00:00:46,270 --> 00:00:48,430
We get created every time you run the playbook.

13
00:00:48,610 --> 00:00:50,950
So it will have the latest timestamp in this.

14
00:00:52,110 --> 00:00:52,200
Okay.

15
00:00:52,360 --> 00:00:57,190
First task itself is get URL and download artifact from Nexis.

16
00:00:58,720 --> 00:01:00,850
Now will not have a static URL.

17
00:01:00,850 --> 00:01:01,390
Right?

18
00:01:01,540 --> 00:01:03,470
When we upload artifact to Nexis.

19
00:01:03,490 --> 00:01:12,370
Every artifact will have its own URL and that you URL will be collection of the path of repository name

20
00:01:12,370 --> 00:01:19,540
slash, group ID, slash, timestamp, slash, build, ID and slash version.

21
00:01:21,360 --> 00:01:22,080
I'd like to check this.

22
00:01:22,260 --> 00:01:23,390
Let's go to an axis.

23
00:01:23,450 --> 00:01:23,820
Let's.

24
00:01:23,850 --> 00:01:26,610
Let's go to the next server and check any artifact.

25
00:01:27,650 --> 00:01:27,990
Okay.

26
00:01:27,990 --> 00:01:28,550
Next this.

27
00:01:28,560 --> 00:01:29,970
Let's take the public IP.

28
00:01:33,470 --> 00:01:35,330
Colon, 1881.

29
00:01:43,190 --> 00:01:43,300
Yeah.

30
00:01:43,310 --> 00:01:44,600
Let's sign in.

31
00:01:49,500 --> 00:01:50,610
Let's go to Bruce.

32
00:01:51,790 --> 00:01:53,020
So we profile release.

33
00:01:53,020 --> 00:01:54,010
This is our repository.

34
00:01:54,010 --> 00:01:55,870
We are storing the artifact over there.

35
00:01:56,210 --> 00:01:57,370
Q If we see.

36
00:01:58,740 --> 00:02:00,960
See the artifact, right?

37
00:02:01,940 --> 00:02:02,980
That's an artifact, let's say.

38
00:02:02,980 --> 00:02:04,930
That is, let's say our latest artifact, right?

39
00:02:04,930 --> 00:02:07,390
If you copy its URL.

40
00:02:10,759 --> 00:02:12,780
You will see its collection, right?

41
00:02:12,780 --> 00:02:20,280
So first IP 881 repository we profile release in the path is like this Q way that's the group ID we

42
00:02:20,280 --> 00:02:22,730
profile and that's the timestamp, right?

43
00:02:22,770 --> 00:02:29,820
The build timestamp we're using V 12, that's the build ID, we're using V profile and then the timestamp

44
00:02:29,820 --> 00:02:30,900
hyphen version.

45
00:02:31,200 --> 00:02:35,070
So this URL will be changing for every latest artifact.

46
00:02:35,670 --> 00:02:38,760
It will have the latest timestamp and the latest build ID.

47
00:02:38,970 --> 00:02:41,400
So it's going to be a dynamic URL.

48
00:02:41,880 --> 00:02:43,710
So of course in our playbook.

49
00:02:44,700 --> 00:02:49,470
We can put a static URL, then it will every time deploy the same artifact.

50
00:02:49,830 --> 00:02:54,840
So we're using variables over here and these variables value we are going to pass from Jenkins.

51
00:02:54,840 --> 00:03:00,960
So repository name, group ID, timestamp, build, ID, the entire version name all this you are going

52
00:03:00,960 --> 00:03:02,700
to pass from Jenkins.

53
00:03:02,700 --> 00:03:04,500
From Jenkins will execute this playbook.

54
00:03:04,500 --> 00:03:09,060
So while executing, we're going to pass the value of this variable and this will be through a plugin.

55
00:03:10,300 --> 00:03:14,230
So anyways, this URL will download at this location.

56
00:03:15,480 --> 00:03:19,440
AMP, the pro app hyphen and the version profile version.

57
00:03:20,120 --> 00:03:28,670
Now, as per our playbook, we will also give the version on artifact name v pro app, hyphen, v profile,

58
00:03:28,670 --> 00:03:32,900
underscore version or we can just keep it as it is also.

59
00:03:32,930 --> 00:03:37,940
Anyways, once we download the artifact to this location temp location, we're going to register the

60
00:03:37,940 --> 00:03:39,680
output into this variable.

61
00:03:39,680 --> 00:03:40,640
Var deploy.

62
00:03:41,680 --> 00:03:43,990
And we have a tag also here, deploy tag.

63
00:03:44,050 --> 00:03:48,340
So if you want, we can execute all the tasks by calling these deployed tags.

64
00:03:50,000 --> 00:03:50,440
Right.

65
00:03:51,170 --> 00:03:51,530
Let's go.

66
00:03:51,530 --> 00:03:53,390
Next task stat module.

67
00:03:53,390 --> 00:04:00,560
And I'm collecting statistics of the current artifact at this location that there will be this file

68
00:04:00,560 --> 00:04:03,170
existing or could not be existing.

69
00:04:03,170 --> 00:04:08,390
Also, if it does not exist, then I don't want to take the backup of something that does not exist.

70
00:04:08,390 --> 00:04:11,450
But if it exists, then I'll take it's backup.

71
00:04:11,810 --> 00:04:18,019
For that reason I'm using stat module and collecting statistics of this file and storing it into this

72
00:04:18,019 --> 00:04:18,769
variable.

73
00:04:19,610 --> 00:04:21,920
Then we stop the Tomcat service.

74
00:04:22,790 --> 00:04:29,460
Once we stop the Tomcat Service with service module, then we're going to try backup and deploy.

75
00:04:29,480 --> 00:04:36,440
I've used the word try because deployment fails for a number of reasons, so we should have some rollback

76
00:04:36,440 --> 00:04:37,310
strategy.

77
00:04:37,580 --> 00:04:40,310
We're actually here using multiple rollback strategies.

78
00:04:40,610 --> 00:04:42,470
One will be automatic rollback.

79
00:04:42,650 --> 00:04:48,410
So since we stopped the Tomcat Service, if the deployment fails, the playbook will stop and the Tomcat

80
00:04:48,410 --> 00:04:51,290
Server Service will be stopped in a stop state.

81
00:04:51,410 --> 00:04:53,630
So we have to take care of that.

82
00:04:53,720 --> 00:04:55,130
Tomcat service is stopped.

83
00:04:55,430 --> 00:04:58,130
So we take the backup and something goes wrong.

84
00:04:58,130 --> 00:04:59,390
We start the Tomcat service.

85
00:04:59,390 --> 00:05:00,710
That's one thing.

86
00:05:00,740 --> 00:05:06,140
Also, while the deployment is happening, we have taken the backup, we rollback that.

87
00:05:06,140 --> 00:05:07,790
Also we can do so.

88
00:05:07,790 --> 00:05:09,410
We're using block and rescue.

89
00:05:10,610 --> 00:05:12,140
From Ansible playbook.

90
00:05:13,250 --> 00:05:15,980
So first main block is this.

91
00:05:16,610 --> 00:05:18,740
It's going to try to deploy the artifact.

92
00:05:19,900 --> 00:05:20,680
Till here.

93
00:05:20,980 --> 00:05:23,750
This is our main block, which is which I have highlighted.

94
00:05:23,770 --> 00:05:29,080
If anything fails in this, then the rescue will come into the motion.

95
00:05:30,050 --> 00:05:31,340
Not Saudi, not this one.

96
00:05:31,370 --> 00:05:34,850
Let me show you once again the main block.

97
00:05:35,910 --> 00:05:36,930
Still here.

98
00:05:37,830 --> 00:05:40,710
Anything fails in the main block.

99
00:05:41,600 --> 00:05:45,560
Then the rescue will come and we'll start the Tomcat Service.

100
00:05:45,680 --> 00:05:47,600
So anything fails over here.

101
00:05:48,200 --> 00:05:49,700
Tomcat Service will get started.

102
00:05:49,720 --> 00:05:50,660
Any case?

103
00:05:51,430 --> 00:05:53,350
Cap now let's go again.

104
00:05:53,680 --> 00:05:56,080
We also have a sub block and rescue.

105
00:05:56,890 --> 00:05:57,790
Over here.

106
00:05:57,820 --> 00:06:02,590
We'll understand that in the main block we have one more block and rescue nested.

107
00:06:03,610 --> 00:06:04,150
Okay, let's see.

108
00:06:04,150 --> 00:06:04,650
The task.

109
00:06:04,660 --> 00:06:06,520
First task is archive.

110
00:06:07,390 --> 00:06:11,460
Even try backup and deploy your first task as archive.

111
00:06:11,470 --> 00:06:13,010
It's going to archive.

112
00:06:13,030 --> 00:06:16,500
That's the path of an existing artifact.

113
00:06:17,410 --> 00:06:22,300
We're in a copy at this location with the name route underscore timestamped tg z.

114
00:06:22,300 --> 00:06:26,020
Write this variable we are constructing the very beginning.

115
00:06:26,860 --> 00:06:31,120
So every time we'll have a version of our backup.

116
00:06:32,290 --> 00:06:34,810
But do it only then.

117
00:06:35,660 --> 00:06:37,700
Artifacts that don't start exist.

118
00:06:37,700 --> 00:06:40,190
So this is a variable which we are collecting.

119
00:06:41,600 --> 00:06:42,410
Out here.

120
00:06:43,070 --> 00:06:44,810
We're checking the statistics of a file.

121
00:06:46,630 --> 00:06:47,680
If this file exists.

122
00:06:47,680 --> 00:06:49,180
If the destination exist.

123
00:06:49,920 --> 00:06:53,640
Then artifact underscore stat stat exist.

124
00:06:53,640 --> 00:06:54,900
Value will be true.

125
00:06:55,020 --> 00:06:57,330
If it's true, then it will take the backup.

126
00:06:57,330 --> 00:07:03,360
If it does not exist, it will not take the backup because if it does not exist, then this will fail

127
00:07:03,570 --> 00:07:05,730
and playbook execution itself will fail.

128
00:07:06,810 --> 00:07:09,390
And all the result will we registered again.

129
00:07:10,600 --> 00:07:16,030
And we're taking this is our main backup, but we're also taking an instant backup in the same directory.

130
00:07:16,720 --> 00:07:23,590
So we change the directory to this path where we have a root directory and we're going to copy the root

131
00:07:23,590 --> 00:07:27,460
directory with name, all underscore route and the same directory.

132
00:07:27,460 --> 00:07:29,020
I'll copy it with a different name.

133
00:07:29,020 --> 00:07:32,290
So in case something happens, we'll quickly rollback.

134
00:07:32,590 --> 00:07:36,340
If something happens, we'll use a copy command and just revert it.

135
00:07:36,650 --> 00:07:42,100
All right, so we've taken the backup over here and we have taken backup in the same directory, and

136
00:07:42,100 --> 00:07:44,200
then it's time to delete our current artifact.

137
00:07:44,200 --> 00:07:47,650
So if you have an artifact with name, route or route dot where?

138
00:07:48,640 --> 00:07:50,200
Of our file or the directory.

139
00:07:50,200 --> 00:07:53,500
So we're running in a loop of file module.

140
00:07:53,530 --> 00:07:55,720
So it's going to remove state absent.

141
00:07:56,980 --> 00:07:59,980
So first this file will be removed and then this file will be removed.

142
00:08:01,100 --> 00:08:01,330
Okay.

143
00:08:01,550 --> 00:08:07,160
But we don't need to be worrying because we've already taken the backup not to twice.

144
00:08:09,120 --> 00:08:09,300
Okay.

145
00:08:09,520 --> 00:08:10,720
Next task.

146
00:08:12,010 --> 00:08:14,440
We'll now try to deploy the artifact.

147
00:08:14,830 --> 00:08:16,840
Previously, we just trying to take the backup.

148
00:08:16,840 --> 00:08:18,220
The backup complete successfully.

149
00:08:18,220 --> 00:08:19,270
So it comes here.

150
00:08:20,360 --> 00:08:22,040
So copy module.

151
00:08:22,070 --> 00:08:27,920
At this location, we have an artifact that was downloaded in the first task there.

152
00:08:30,450 --> 00:08:30,840
Right.

153
00:08:31,890 --> 00:08:38,340
So we use copy module copy the artifact from this location to this location, use our local Tomcat ET

154
00:08:38,340 --> 00:08:40,860
Web apps route dot var remote source.

155
00:08:40,860 --> 00:08:41,130
Yes.

156
00:08:41,130 --> 00:08:43,440
Again, for copy model, you have to use remote source.

157
00:08:43,440 --> 00:08:43,710
Yes.

158
00:08:43,710 --> 00:08:48,090
If the source is on a remote machine, we registered the output.

159
00:08:48,180 --> 00:08:53,640
If in any case this fails for there could be so many reasons it can fail.

160
00:08:53,640 --> 00:08:58,890
If this task fails, the rescue will come into the picture and we'll just copy all underscore route

161
00:08:58,890 --> 00:08:59,970
with the name route.

162
00:09:01,180 --> 00:09:02,410
Instant rollback.

163
00:09:02,920 --> 00:09:03,330
Right.

164
00:09:04,000 --> 00:09:08,170
But it's going to go into that directory, of course, if the deployment fails.

165
00:09:09,050 --> 00:09:13,310
In case any of this thing fails, the Tomcat Service will get started.

166
00:09:13,760 --> 00:09:16,430
If everything completes successfully here.

167
00:09:17,610 --> 00:09:21,150
Then the next task is start the Tomcat Service.

168
00:09:23,580 --> 00:09:27,780
And if everything goes well, it will come till this task and start the Tomcat Service.

169
00:09:27,780 --> 00:09:32,820
But if anything fails and we don't have any rescue, it will just the playbook execution itself will

170
00:09:32,820 --> 00:09:35,700
fail and Tomcat Service will stay stopped.

171
00:09:35,730 --> 00:09:37,720
It will not come till this task.

172
00:09:37,740 --> 00:09:41,640
So that's why in the rescue we are putting here start Tomcat Service.

173
00:09:44,750 --> 00:09:45,130
Okay.

174
00:09:45,530 --> 00:09:47,990
If everything goes well, the Tomcat series get started.

175
00:09:49,790 --> 00:09:51,980
And I would like to put a weight for.

176
00:09:53,550 --> 00:09:56,070
This path to become available.

177
00:09:56,070 --> 00:10:02,010
So when we start the Tomcat Service, the artifact takes time to get extracted sometimes, and I would

178
00:10:02,010 --> 00:10:03,750
like to wait that much time.

179
00:10:04,740 --> 00:10:11,850
Once the archiving and archiving completes, when we have root directory from root dot var.

180
00:10:12,880 --> 00:10:13,950
Then we'll continue.

181
00:10:13,960 --> 00:10:14,320
Until.

182
00:10:14,320 --> 00:10:14,700
Unless.

183
00:10:14,740 --> 00:10:15,340
Wait.

184
00:10:16,600 --> 00:10:17,050
Okay.

185
00:10:17,080 --> 00:10:18,130
And then finally.

186
00:10:19,380 --> 00:10:21,750
There is a handler which we actually we are not using.

187
00:10:21,750 --> 00:10:27,030
But if you are going to deploy application properties file from the playbook by using playbook, then

188
00:10:27,030 --> 00:10:32,340
we can uncomment this and from our templates directory will have our own application properties file.

189
00:10:32,340 --> 00:10:39,030
We deployed it this location and we notify to the handler, but application properties file, we are

190
00:10:39,030 --> 00:10:41,190
building it in the build job itself.

191
00:10:41,190 --> 00:10:42,180
So we'll have a build job.

192
00:10:42,180 --> 00:10:47,250
We're going to build application properties, file with write backend server details and same artifact

193
00:10:47,250 --> 00:10:48,540
will be pushed over here.

194
00:10:48,720 --> 00:10:55,470
So it will anyways have the have the backend service details, the MySQL mem cache, all the details

195
00:10:55,470 --> 00:10:57,420
will be already existing in this artifact.

196
00:10:57,930 --> 00:11:04,680
If not, then you can uncomment these lines and deploy your own application properties file at this

197
00:11:04,680 --> 00:11:05,400
location.

198
00:11:06,880 --> 00:11:09,520
And for that very reason, we have this wait for model.

199
00:11:09,530 --> 00:11:12,130
So it's going to wait until this path is available.

200
00:11:12,160 --> 00:11:15,730
Once this is available, it's going to deploy our application properties file.

201
00:11:16,830 --> 00:11:19,440
Now if you have set up the profile project.

202
00:11:20,150 --> 00:11:27,690
Manually on local system and on a s then you know how important our application properties file is.

203
00:11:27,710 --> 00:11:33,590
That's the file which is going to show us the backend services, not us, to our application, which

204
00:11:33,590 --> 00:11:34,550
is running on Tomcat.

205
00:11:34,550 --> 00:11:36,740
So it's very important to take care of that.

206
00:11:38,150 --> 00:11:40,640
So these are the two playbooks that will get executed.

207
00:11:40,640 --> 00:11:45,650
So we're going to just call this playbook site dot HTML first Tomcat setup playbook will run.

208
00:11:45,860 --> 00:11:47,630
It will set up the Tomcat Service.

209
00:11:48,960 --> 00:11:55,050
And then this playbook will get executed with Pro App set up, which is going to download the artifact

210
00:11:55,050 --> 00:11:57,800
from Nexis and deploy it.

211
00:11:57,810 --> 00:11:59,970
If anything fails, there's a rollback.

212
00:12:00,480 --> 00:12:01,800
And then finally.

213
00:12:03,270 --> 00:12:06,330
Application properties file and restart Tomcat service.

