1
00:00:00,510 --> 00:00:07,830
Continuous delivery is an automated process of delivering code changes to servers quickly and efficiently

2
00:00:08,189 --> 00:00:09,720
at an enormous phase.

3
00:00:11,650 --> 00:00:13,240
Hi, my name is Imran.

4
00:00:13,630 --> 00:00:17,110
I'll be glad to explain you the continuous delivery process.

5
00:00:22,080 --> 00:00:28,440
Continuous delivery is the extension of continuous integration, if you have not seen my previous video

6
00:00:28,440 --> 00:00:32,820
on continuous integration, I recommend you watch it before you continue.

7
00:00:33,330 --> 00:00:36,430
Wow, that's too many continuous in one sentence.

8
00:00:36,870 --> 00:00:37,620
Let's dig in.

9
00:00:44,710 --> 00:00:51,870
We have seen continuous integration is automation of our code build and test, developers any code, it

10
00:00:52,150 --> 00:00:54,640
will be automatically built and tested.

11
00:00:57,610 --> 00:01:04,060
If everything is good, the artifact generated from this process will be stored in software repositories.

12
00:01:06,950 --> 00:01:13,370
The goal of CI is to detect defects at very early stage so it does not multiply.

13
00:01:20,800 --> 00:01:27,670
Ops team will get regular requests to deploy the artifacts generated from the CI process on servers

14
00:01:27,970 --> 00:01:29,530
for further testing.

15
00:01:31,960 --> 00:01:40,390
Ops team with all the info they got deploy the artifacts to the servers, at times the deployment

16
00:01:40,390 --> 00:01:43,990
also fails, which leads to higher lead time.

17
00:01:45,940 --> 00:01:50,560
Dev & Ops team needs to work together to fix such deployment failures.

18
00:01:50,920 --> 00:01:52,900
And this happens on and off.

19
00:01:54,680 --> 00:02:00,320
We have to understand that in agile development, there will be regular code changes which needs to

20
00:02:00,320 --> 00:02:03,140
be deployed on servers for further testing.

21
00:02:03,830 --> 00:02:07,130
Deployment is not just about shipping the software to the servers.

22
00:02:07,550 --> 00:02:08,870
It's more than that.

23
00:02:11,640 --> 00:02:18,900
A deployment could mean also server provisioning, installing dependencies on servers, configuration

24
00:02:18,900 --> 00:02:25,680
changes, network or firewall rules changes, and then deploy the artifact to the server and there could

25
00:02:25,680 --> 00:02:26,880
be many more things.

26
00:02:30,560 --> 00:02:37,610
Ops team will be flooded with such requests as CI process will generate faster and regularly.

27
00:02:45,440 --> 00:02:51,920
After the manual deployment, information will be sent to the QA team for testing after conducting testing,

28
00:02:52,130 --> 00:02:54,200
QA team will send information back.

29
00:02:54,830 --> 00:02:59,240
There is too much of human intervention and manual approval in this process.

30
00:03:04,730 --> 00:03:11,360
So as this terminator says automate it and save your time and also failures.

31
00:03:14,600 --> 00:03:18,140
Any and every step in deployment should be automated.

32
00:03:29,650 --> 00:03:35,500
There are a lot of automation tools available in the market, like ansible, puppet, chef for system

33
00:03:35,500 --> 00:03:42,490
automation, terraform confirmation for cloud infrastructure, automation, Jenkins Octopus deploy

34
00:03:42,490 --> 00:03:43,990
for CICD automation.

35
00:03:44,380 --> 00:03:47,470
And there are many others to choose from based on your need.

36
00:03:49,980 --> 00:03:58,320
Software testing also has to be automated. Any test process like functional, load, performance, databases,

37
00:03:58,470 --> 00:04:01,620
network and security and any other test cases.

38
00:04:03,560 --> 00:04:09,680
So Ops team, will write automation code for deployment testers will write automation code for software

39
00:04:09,680 --> 00:04:13,010
testing and sync it with developers source code.

40
00:04:17,570 --> 00:04:25,370
So now we have a process integrated with deployment automation, which triggers software testing, all

41
00:04:25,370 --> 00:04:28,450
three teams and processes integrated together.

42
00:04:31,450 --> 00:04:33,520
Continuous delivery process.

43
00:04:33,840 --> 00:04:34,530
Have a look.

44
00:04:51,830 --> 00:04:56,710
Automate every step and then stitch everything together.

45
00:04:59,940 --> 00:05:03,120
That gives you continuous delivery automation.

