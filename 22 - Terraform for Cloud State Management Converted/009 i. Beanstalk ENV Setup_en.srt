1
00:00:03,240 --> 00:00:03,600
Okay.

2
00:00:03,680 --> 00:00:05,260
The final thing, Bienstock.

3
00:00:05,270 --> 00:00:08,390
So we'll create a file, actually.

4
00:00:08,750 --> 00:00:10,370
We're going to create two files.

5
00:00:10,940 --> 00:00:14,570
One is for the application, and then inside that, we create the environment.

6
00:00:14,570 --> 00:00:16,660
Creating application means is just.

7
00:00:17,110 --> 00:00:19,030
Just give the name the name of the project.

8
00:00:19,060 --> 00:00:19,550
Right?

9
00:00:20,120 --> 00:00:24,140
So I will just see Bean hyphen app dot TX.

10
00:00:25,190 --> 00:00:26,480
Just click the application.

11
00:00:26,480 --> 00:00:29,810
So resource underscore.

12
00:00:29,810 --> 00:00:31,310
Elastic.

13
00:00:31,880 --> 00:00:32,540
Underscore.

14
00:00:32,570 --> 00:00:34,070
Beanstalk application.

15
00:00:34,070 --> 00:00:34,700
Yes.

16
00:00:35,060 --> 00:00:35,810
And that's all.

17
00:00:35,810 --> 00:00:37,190
We will just give the name.

18
00:00:38,180 --> 00:00:39,530
And that should be fine.

19
00:00:41,330 --> 00:00:43,580
Save it committed.

20
00:00:45,180 --> 00:00:46,440
Being app.

21
00:00:50,670 --> 00:00:50,880
Okay.

22
00:00:50,910 --> 00:00:52,860
Let's create another file for the environment.

23
00:00:52,860 --> 00:00:53,790
Details.

24
00:00:58,640 --> 00:00:59,000
Name.

25
00:00:59,000 --> 00:01:02,000
It has been hyphen e and v.

26
00:01:02,600 --> 00:01:03,200
Dot t.

27
00:01:03,210 --> 00:01:03,890
F.

28
00:01:08,280 --> 00:01:08,520
Okay.

29
00:01:08,520 --> 00:01:16,680
So for this particular resource, we're going to use a plus underscore elastic beans tag, not application.

30
00:01:17,490 --> 00:01:18,510
Environment.

31
00:01:21,110 --> 00:01:28,310
Name we profile being proud and I'm going to use a similar name for the resource also.

32
00:01:32,830 --> 00:01:33,370
Application.

33
00:01:33,370 --> 00:01:36,400
It's going to be part of the application that we are creating from here.

34
00:01:36,700 --> 00:01:39,700
So let's say elastic beans, Tag application.

35
00:01:39,700 --> 00:01:40,030
Yes.

36
00:01:40,030 --> 00:01:41,200
Dot V profile.

37
00:01:41,620 --> 00:01:42,490
That's fine.

38
00:01:43,680 --> 00:01:43,890
Okay.

39
00:01:43,890 --> 00:01:46,950
Now, there's really lots of options in beans, Jack.

40
00:01:47,340 --> 00:01:51,450
And for this, I want you to take you to the tour of the documentation.

41
00:01:52,260 --> 00:01:59,070
So let's go to the farm registry and we will search for being stuck.

42
00:02:01,230 --> 00:02:03,500
Bienstock environment.

43
00:02:03,510 --> 00:02:04,890
Yes, at one.

44
00:02:06,480 --> 00:02:09,000
And so you have some quick examples.

45
00:02:09,030 --> 00:02:11,100
Name application.

46
00:02:12,000 --> 00:02:16,500
That's the application you already given that solution Stack Name the platform which you want to go

47
00:02:16,500 --> 00:02:16,890
with.

48
00:02:16,980 --> 00:02:19,890
So we really want to go with the Tomcat platform.

49
00:02:20,670 --> 00:02:23,280
You can check that from the documentation as well.

50
00:02:24,700 --> 00:02:25,540
But few other things.

51
00:02:25,540 --> 00:02:29,390
Let's see on a name we can give application we have even seen in prefix, right?

52
00:02:29,410 --> 00:02:33,460
We want to give a particular URL for our load balancer.

53
00:02:33,460 --> 00:02:38,380
We can use that description tier, but do you see there not many.

54
00:02:38,380 --> 00:02:44,110
Actually, most of the settings will be coming from this one setting option setting to configure the

55
00:02:44,110 --> 00:02:44,860
new environment.

56
00:02:44,860 --> 00:02:52,810
Like we want to give application load, balancer, security group or number of instances in our auto

57
00:02:52,810 --> 00:02:59,080
scaling, our sticky sessions and all those a lot of settings right in the stack that is going to be

58
00:02:59,080 --> 00:03:04,540
coming part of this settings option setting so we can see in detail.

59
00:03:05,400 --> 00:03:10,380
So we are to see like setting and we calibrate and inside that we can give these things namespace.

60
00:03:11,410 --> 00:03:14,890
Name value namespace is going to be the urn.

61
00:03:15,790 --> 00:03:18,430
Like for example you can see here setting namespace.

62
00:03:18,730 --> 00:03:21,100
So being stack should be part of our VPC, right?

63
00:03:21,100 --> 00:03:26,080
So namespace plus e to vpc, vpc id hide name.

64
00:03:26,790 --> 00:03:28,050
And the value.

65
00:03:30,490 --> 00:03:30,850
Like that.

66
00:03:30,850 --> 00:03:32,320
You can keep giving all the settings.

67
00:03:32,320 --> 00:03:37,000
You can have like a number of setting blocks like this as per the settings that you need.

68
00:03:38,270 --> 00:03:43,070
So these are just the sample, two samples of the settings, but there are so many settings in the beans

69
00:03:43,090 --> 00:03:45,020
stack, they are not listed over here.

70
00:03:45,020 --> 00:03:48,860
The namespace and what should we give the name and the value?

71
00:03:48,860 --> 00:03:52,610
It's not listed over here that you have to check from the docs.

72
00:03:56,370 --> 00:03:56,560
Okay.

73
00:03:56,610 --> 00:03:59,850
So you can call for all those settings like we're talking about VPC, right?

74
00:04:02,090 --> 00:04:06,440
So namespace equal to a colon ec2 two colon vpc.

75
00:04:08,270 --> 00:04:09,080
Night like that.

76
00:04:09,080 --> 00:04:10,160
And the name.

77
00:04:11,530 --> 00:04:12,400
Which name you want.

78
00:04:12,430 --> 00:04:14,800
VPC ID value.

79
00:04:16,190 --> 00:04:18,459
Value of the VPC ID, right.

80
00:04:18,709 --> 00:04:21,829
Similar to that like name subnets or what?

81
00:04:21,829 --> 00:04:27,710
All you can specify in a VPC subnets LP subnets you have you'll be scheme TB subnets.

82
00:04:28,370 --> 00:04:31,520
A lot of options you have there and you can give it value.

83
00:04:33,070 --> 00:04:33,440
Right.

84
00:04:34,140 --> 00:04:37,050
So you can check all the namespace you want to modify.

85
00:04:37,620 --> 00:04:40,410
You want to provide values to cloud watch logs.

86
00:04:42,270 --> 00:04:44,640
You'll be load balancer which load balancer you want.

87
00:04:44,640 --> 00:04:45,900
Load balancer details.

88
00:04:45,900 --> 00:04:46,160
Right.

89
00:04:46,170 --> 00:04:49,440
Load balancer, port port number, Right load balancer.

90
00:04:49,440 --> 00:04:50,810
If you see load balancer.

91
00:04:50,820 --> 00:04:51,390
Right.

92
00:04:51,810 --> 00:04:54,960
So do you on cross zone you what security group we have.

93
00:04:54,960 --> 00:04:56,970
We already created security group for load balancer.

94
00:04:56,970 --> 00:05:03,300
So we're going to use that at setting namespace load balancer and then security group and then the value

95
00:05:03,300 --> 00:05:06,660
of this security group that we created, what else we have.

96
00:05:06,750 --> 00:05:12,330
These are deprecated things load balancer, port numbers and all listener.

97
00:05:14,870 --> 00:05:18,250
So let's see if we have sticky session here.

98
00:05:18,260 --> 00:05:19,400
Policy name.

99
00:05:20,720 --> 00:05:24,710
You should find four sticky session sticky.

100
00:05:24,980 --> 00:05:30,980
Stickiness enable This is this belongs to its setting process elastic beanstalk environment process

101
00:05:30,980 --> 00:05:31,700
default.

102
00:05:32,530 --> 00:05:33,040
Yeah.

103
00:05:33,160 --> 00:05:35,740
So I can give that namespace equal to this.

104
00:05:35,740 --> 00:05:39,010
And then name stickiness enabled.

105
00:05:39,130 --> 00:05:41,410
It is value by default is false.

106
00:05:41,410 --> 00:05:42,850
We can change it to true.

107
00:05:43,300 --> 00:05:43,810
Yeah.

108
00:05:44,720 --> 00:05:46,340
Okay, coming back to this registry again.

109
00:05:46,340 --> 00:05:48,230
So we need to provide a few more details.

110
00:05:48,230 --> 00:05:49,640
Let's go to our code.

111
00:05:51,260 --> 00:05:53,510
The solution stack name.

112
00:05:54,140 --> 00:05:55,880
That is one important thing.

113
00:05:56,040 --> 00:05:58,920
And so here the example is given 64 bit.

114
00:05:58,940 --> 00:05:59,660
What's this for?

115
00:05:59,660 --> 00:06:00,350
Go platform.

116
00:06:00,350 --> 00:06:01,730
We need Tomcat platform.

117
00:06:01,730 --> 00:06:03,800
How do we find out what name to give?

118
00:06:04,250 --> 00:06:09,460
And let's check the arguments Solution Stack name Amazon API documentations.

119
00:06:09,470 --> 00:06:11,090
It's listed here.

120
00:06:13,820 --> 00:06:16,220
Supported platform and we have Tomcat.

121
00:06:16,460 --> 00:06:17,270
Tomcat.

122
00:06:19,760 --> 00:06:20,240
Okay.

123
00:06:21,480 --> 00:06:25,260
So these are the values that we can use with use.

124
00:06:26,460 --> 00:06:27,810
We can just copy it.

125
00:06:29,980 --> 00:06:30,220
All right.

126
00:06:30,220 --> 00:06:31,510
So we'll go with.

127
00:06:33,570 --> 00:06:36,120
Tomcat 8.5 should be fine.

128
00:06:36,120 --> 00:06:38,310
So most of them are 8.5.

129
00:06:40,570 --> 00:06:44,470
So if we have to use this name 64 bit Amazon Linux for blah blah, blah.

130
00:06:44,500 --> 00:06:45,880
Yeah, like that.

131
00:06:46,120 --> 00:06:51,400
So you can copy whatever you need and you can put it there in the solution stack name.

132
00:06:52,270 --> 00:06:58,330
Let's go to our ID C solution Stack solution stack name.

133
00:06:59,020 --> 00:07:00,580
And I need that one.

134
00:07:00,640 --> 00:07:01,060
Yeah.

135
00:07:01,090 --> 00:07:03,160
Nothing so special about this.

136
00:07:03,190 --> 00:07:04,480
Just the default one.

137
00:07:05,390 --> 00:07:05,870
Okay.

138
00:07:06,610 --> 00:07:06,780
Okay.

139
00:07:06,950 --> 00:07:10,010
See name prefix the URL.

140
00:07:10,580 --> 00:07:14,390
So I'll see that we profile haven't been hyphen praat hyphen domain.

141
00:07:16,040 --> 00:07:19,190
If that's not available, we'll get error also while we're creating it.

142
00:07:20,150 --> 00:07:21,620
Now let's start giving the settings.

143
00:07:21,920 --> 00:07:22,820
Settings.

144
00:07:23,360 --> 00:07:24,070
That's awesome.

145
00:07:24,080 --> 00:07:25,090
It gives everything right?

146
00:07:25,100 --> 00:07:26,610
Name namespace value.

147
00:07:26,630 --> 00:07:31,880
So name I want eaw s colon e c to colon VPC.

148
00:07:31,910 --> 00:07:34,760
I want to put this into my VPC that I created.

149
00:07:36,310 --> 00:07:38,440
Oh, that should go in the namespace.

150
00:07:38,680 --> 00:07:40,030
It should put that first.

151
00:07:40,030 --> 00:07:40,600
Really?

152
00:07:42,020 --> 00:07:45,200
This goes in the namespace name.

153
00:07:46,130 --> 00:07:47,900
So I need the vpc.

154
00:07:48,410 --> 00:07:52,520
I t all this you can find from the documentation again.

155
00:07:56,370 --> 00:08:01,830
Write a list called an Easy to Colon VPC, VPC ID, and then the value of VPC ID.

156
00:08:05,560 --> 00:08:10,180
So knocking double codes, we have the module dot VPC.

157
00:08:11,040 --> 00:08:13,210
Dot City.

158
00:08:14,220 --> 00:08:14,390
Okay.

159
00:08:14,490 --> 00:08:14,850
Like that.

160
00:08:14,850 --> 00:08:18,420
I'll put all the settings that I need for my bean stack environment.

161
00:08:19,350 --> 00:08:19,560
Okay.

162
00:08:19,620 --> 00:08:24,000
One setting is to create the instance role elastic beanstalk role.

163
00:08:25,220 --> 00:08:29,450
Associate public IP address that is also in the VPC.

164
00:08:30,290 --> 00:08:31,700
Next setting is for the subnets.

165
00:08:31,700 --> 00:08:38,330
I want to put all the instances in the private subnet, so again, I can use the VPC namespace subnets

166
00:08:38,330 --> 00:08:39,169
from that.

167
00:08:40,610 --> 00:08:43,760
And here I'm using a joint function from TerraForm.

168
00:08:43,940 --> 00:08:45,810
TerraForm has some nice functions.

169
00:08:45,830 --> 00:08:51,140
Join is one function that can join a list into a string.

170
00:08:51,140 --> 00:08:57,650
So I have list of subnets over here and which is going to return actually.

171
00:08:58,520 --> 00:09:02,240
The name of the subnets and I want to have that comma separated.

172
00:09:03,010 --> 00:09:05,050
Get in in the form of strings.

173
00:09:05,050 --> 00:09:07,550
So I'm joining all that.

174
00:09:07,570 --> 00:09:11,890
Subnet one subnet to subnet three with a join function.

175
00:09:12,680 --> 00:09:14,090
Separated by comma.

176
00:09:15,210 --> 00:09:17,770
So you can check the TerraForm Function's documentation.

177
00:09:17,890 --> 00:09:23,280
There's so many functions that TerraForm provides like string, function, chomp, join.

178
00:09:23,280 --> 00:09:26,250
We're using, join, join, simply joins.

179
00:09:27,290 --> 00:09:29,210
A list separate by comma.

180
00:09:29,900 --> 00:09:35,960
So in this case, I wanted the subnet names separated by a comma.

181
00:09:35,990 --> 00:09:40,700
So that's why I'm using the join function, because this is going to return me the list.

182
00:09:41,720 --> 00:09:46,350
And here the value is a string, not a list subnets here.

183
00:09:46,370 --> 00:09:48,050
Value is a string, not a list.

184
00:09:48,050 --> 00:09:50,720
So but we have the list.

185
00:09:50,990 --> 00:09:55,100
So we're going to convert that list to a string with join function.

186
00:09:55,970 --> 00:09:59,090
So you want to do add some programming intelligence like that.

187
00:09:59,090 --> 00:10:00,770
You can check the functions of terraform.

188
00:10:00,770 --> 00:10:08,330
There's so many functions replace split if you have done ever python programming, you know this almost

189
00:10:08,330 --> 00:10:13,280
similar or even Ruby scripting, then you have almost similar functions there as well.

190
00:10:13,880 --> 00:10:14,260
Okay.

191
00:10:16,210 --> 00:10:21,700
Elastic load balancers or instances will be in private subnet but are load balancer will be in public

192
00:10:21,700 --> 00:10:22,330
subnet.

193
00:10:22,530 --> 00:10:25,780
Can load balancer of a pin stack which should be in public subnet.

194
00:10:25,780 --> 00:10:33,040
So similar thing name you'll be subnet for this the value should be list of public subnet not sorry

195
00:10:33,040 --> 00:10:36,370
not list string separated by comma.

196
00:10:36,400 --> 00:10:37,900
And so this returns me a list.

197
00:10:37,900 --> 00:10:40,990
Again, I'm using join function to separate that by comma.

198
00:10:41,680 --> 00:10:44,440
And so this entire list will be converted to a string.

199
00:10:45,210 --> 00:10:46,980
Auto scaling launch configuration.

200
00:10:46,980 --> 00:10:52,680
I want to select instance type as TX two Micro key pair.

201
00:10:52,680 --> 00:10:56,790
I want to attach the key pair, the key pair that we created over here.

202
00:10:57,360 --> 00:10:57,630
Right.

203
00:10:57,630 --> 00:10:59,880
Eight plus key pair V profile key.

204
00:11:03,130 --> 00:11:03,580
Keypad.

205
00:11:03,580 --> 00:11:04,580
Dot v Profile Key.

206
00:11:04,600 --> 00:11:05,890
Dot Key Name.

207
00:11:07,460 --> 00:11:14,200
That's it's going to use this key that is created for our Beanstalk instance auto scaling group.

208
00:11:14,200 --> 00:11:20,890
I want it to be launching in any available I will say any three if we have three subnets.

209
00:11:20,890 --> 00:11:21,160
Right.

210
00:11:21,160 --> 00:11:22,900
So launch it in three subnets.

211
00:11:23,800 --> 00:11:24,610
Minimum size.

212
00:11:24,610 --> 00:11:29,050
I'm going with first one single instance, but I'm saying like, you know, maximum you can go probably

213
00:11:29,050 --> 00:11:31,330
eight instances auto scaling group settings.

214
00:11:33,560 --> 00:11:35,780
That's that's just the name of the environment.

215
00:11:37,180 --> 00:11:37,680
Fraud.

216
00:11:37,690 --> 00:11:38,850
I'm giving the environment name.

217
00:11:38,850 --> 00:11:39,910
Name is fraud.

218
00:11:42,510 --> 00:11:44,940
And lost setting for the logs.

219
00:11:45,850 --> 00:11:52,540
Settings for health monitoring enhanced can be expensive, so you can turn it to basic if you want.

220
00:11:52,570 --> 00:11:56,410
Again, you can check that from a B+ documentation.

221
00:11:57,660 --> 00:11:58,140
Upgrade.

222
00:11:58,140 --> 00:12:00,210
If you make any upgrade, it should be rolling upgrade.

223
00:12:00,210 --> 00:12:04,470
I'm saying with this namespace rolling update enable true.

224
00:12:05,370 --> 00:12:10,120
Rolling update policy based on the health right.

225
00:12:10,140 --> 00:12:15,120
If the incidence is healthy, then go to the other batch rolling update size.

226
00:12:15,120 --> 00:12:19,110
We can give a size like one instance at a time or you can give the percentage also.

227
00:12:19,820 --> 00:12:19,970
Okay.

228
00:12:20,280 --> 00:12:21,420
Load balancer.

229
00:12:22,250 --> 00:12:23,570
Cross zone load balancer.

230
00:12:23,570 --> 00:12:26,870
And I also wanted stickiness, so I'm going to add stickiness as well.

231
00:12:27,470 --> 00:12:29,390
So I'll add setting.

232
00:12:30,080 --> 00:12:31,340
Namespace.

233
00:12:31,730 --> 00:12:34,610
Let's search again for stickiness.

234
00:12:35,540 --> 00:12:36,080
Stickiness.

235
00:12:36,080 --> 00:12:36,470
Enable.

236
00:12:36,470 --> 00:12:37,100
True.

237
00:12:37,760 --> 00:12:38,750
Copy that.

238
00:12:39,990 --> 00:12:41,580
And that's the namespace.

239
00:12:42,700 --> 00:12:43,450
Name.

240
00:12:45,430 --> 00:12:46,900
Stickiness enabled.

241
00:12:49,560 --> 00:12:50,160
Hopes.

242
00:12:51,780 --> 00:12:52,860
Stickiness enabled.

243
00:12:52,980 --> 00:12:56,240
It's copying the new Klein character value.

244
00:12:56,250 --> 00:12:59,220
So what are the values default is to false?

245
00:12:59,430 --> 00:13:00,510
You have true and false.

246
00:13:00,510 --> 00:13:01,740
So we'll go with true.

247
00:13:02,730 --> 00:13:03,240
True.

248
00:13:05,660 --> 00:13:06,260
This should be good.

249
00:13:06,260 --> 00:13:08,060
Let me separate it a little bit.

250
00:13:08,510 --> 00:13:08,990
Yeah.

251
00:13:11,940 --> 00:13:15,060
Batch size you want given percent or you want to give it an.

252
00:13:16,680 --> 00:13:20,490
So fixed size, that size is going to be one instance at a time.

253
00:13:20,940 --> 00:13:26,850
Again, you can give the percent and you can give the person number of percent at 30%, 50% of the size.

254
00:13:28,530 --> 00:13:30,210
Get deployment policy rolling.

255
00:13:32,820 --> 00:13:38,370
Although Skilling launch configuration names security group so which security group we want our instance

256
00:13:38,370 --> 00:13:41,640
to be and so we already have created the security group.

257
00:13:42,480 --> 00:13:46,200
So DOT we profile product security group.

258
00:13:48,070 --> 00:13:48,260
Right.

259
00:13:48,300 --> 00:13:52,590
And this is going to be an ID format, So dot ID?

260
00:13:52,620 --> 00:13:53,850
Yes, that's right.

261
00:13:54,450 --> 00:13:55,390
Load balancer.

262
00:13:55,410 --> 00:13:57,930
Load balancer should be in which security group?

263
00:13:58,070 --> 00:13:58,470
Right.

264
00:13:58,470 --> 00:14:00,290
So we have the bins tag security.

265
00:14:00,310 --> 00:14:02,250
It'll be security group dot ID.

266
00:14:03,660 --> 00:14:04,290
Yes.

267
00:14:07,080 --> 00:14:07,680
Okay.

268
00:14:08,190 --> 00:14:10,440
I think we're done with all the settings.

269
00:14:10,470 --> 00:14:11,010
Yeah.

270
00:14:12,290 --> 00:14:17,420
Now we can go ahead and execute this, but there could be a bug in this.

271
00:14:17,720 --> 00:14:19,060
The bug could be this.

272
00:14:19,070 --> 00:14:22,430
We're creating security group and then we're creating beanstalk environment, right?

273
00:14:22,460 --> 00:14:27,290
First, our security group should get created and then the beanstalk environment should get created

274
00:14:27,290 --> 00:14:29,240
because it's referring most of the time.

275
00:14:29,240 --> 00:14:34,340
It will be intelligent to find that out, but sometimes there are some misfires that are happening and

276
00:14:34,340 --> 00:14:40,970
for that I want to base and I want to create a dependency like for the security group, get created

277
00:14:40,970 --> 00:14:44,930
and then the beanstalk environment so we can put an option depends on.

278
00:14:46,340 --> 00:14:48,410
So in which resource do you want it to depend.

279
00:14:48,410 --> 00:14:49,390
I'm going to say at a.

280
00:14:49,670 --> 00:14:52,280
S underscore security group.

281
00:14:54,590 --> 00:14:56,550
Security group you'll be.

282
00:14:56,750 --> 00:14:57,290
Yes.

283
00:14:57,290 --> 00:14:59,930
And also, this is a list so you can give multiples.

284
00:15:00,230 --> 00:15:00,810
One more.

285
00:15:00,880 --> 00:15:00,930
A.

286
00:15:01,250 --> 00:15:03,320
S underscore security group.

287
00:15:05,910 --> 00:15:06,870
Dot.

288
00:15:07,840 --> 00:15:08,920
No, not back.

289
00:15:08,920 --> 00:15:09,760
End her.

290
00:15:12,370 --> 00:15:19,000
P security group dot the broad security group That is the security group for Beanstalk.

291
00:15:19,030 --> 00:15:20,170
Easy, for instance.

292
00:15:20,740 --> 00:15:22,210
Yes, Dot.

293
00:15:23,960 --> 00:15:25,150
No, I don't need to give any dirt.

294
00:15:25,160 --> 00:15:26,510
This is a depends on you.

295
00:15:26,540 --> 00:15:27,020
Just give.

296
00:15:27,040 --> 00:15:29,270
You need to give the name of the resource, that's all.

297
00:15:29,430 --> 00:15:31,850
Can the resource type dot the resource name.

298
00:15:32,750 --> 00:15:41,960
Now, TerraForm now will make sure that these resource gets created first and then your beanstalk resource.

299
00:15:41,960 --> 00:15:43,340
This resource gets created.

300
00:15:43,700 --> 00:15:44,090
Okay.

301
00:15:44,120 --> 00:15:45,290
Now time to test it.

302
00:15:45,650 --> 00:15:51,800
Really, a lot of things that we did and there's definitely there will be chances of misfires, bugs,

303
00:15:51,800 --> 00:15:55,520
configuration errors, syntax errors, Reference errors.

304
00:15:55,820 --> 00:15:56,390
But.

305
00:15:57,320 --> 00:16:03,250
We are using the TerraForm plugin from intelligence, so it made very easy.

306
00:16:03,260 --> 00:16:05,210
You also refer to the documentation.

307
00:16:05,490 --> 00:16:08,330
Can you follow these basic things?

308
00:16:08,330 --> 00:16:08,590
Right.

309
00:16:08,600 --> 00:16:14,090
Go through the documentation you can use ID so you know you can save a lot of pain.

310
00:16:14,880 --> 00:16:15,330
Okay.

311
00:16:15,570 --> 00:16:16,890
Anyways, we have to test it.

312
00:16:16,890 --> 00:16:19,800
Let's go and test.

313
00:16:20,220 --> 00:16:22,440
So first terraform.

314
00:16:24,150 --> 00:16:25,540
You know we have.

315
00:16:25,780 --> 00:16:26,980
Anyways, let's run it.

316
00:16:27,160 --> 00:16:32,290
If you include any new module or anything because we're using directly beanstalk resource that is part

317
00:16:32,290 --> 00:16:34,930
of a plugin, so you don't need to do anything.

318
00:16:34,930 --> 00:16:37,570
But yes, there's been stack module also there.

319
00:16:39,970 --> 00:16:43,810
But that beanstalk model now, it's just almost similar to what we did.

320
00:16:45,370 --> 00:16:46,480
TerraForm.

321
00:16:46,600 --> 00:16:47,710
Validate.

322
00:16:47,950 --> 00:16:49,450
Let's check the syntax.

323
00:16:51,620 --> 00:16:53,630
So this ID is really helping us with the syntax.

324
00:16:53,630 --> 00:16:55,580
But yes, we had some problem.

325
00:16:57,030 --> 00:16:58,230
Subnet group.

326
00:16:59,530 --> 00:16:59,890
Okay.

327
00:17:02,280 --> 00:17:04,050
Dag is not expected here.

328
00:17:06,119 --> 00:17:06,450
Okay.

329
00:17:06,480 --> 00:17:10,890
Let's go and check back in services.

330
00:17:14,420 --> 00:17:14,740
Yeah.

331
00:17:14,750 --> 00:17:19,700
So the tag is not supported for this resource, it seems.

332
00:17:20,270 --> 00:17:21,050
Let's see.

333
00:17:21,380 --> 00:17:21,910
Tags.

334
00:17:21,980 --> 00:17:23,690
No, it's not there.

335
00:17:27,089 --> 00:17:28,170
Okay, this is fine.

336
00:17:28,170 --> 00:17:29,430
Let's make the change.

337
00:17:29,430 --> 00:17:32,250
Let's commit it being environment.

338
00:17:32,370 --> 00:17:32,780
Okay?

339
00:17:32,820 --> 00:17:34,110
Let's commit everything.

340
00:17:35,700 --> 00:17:37,060
Okay, let's try again.

341
00:17:37,080 --> 00:17:38,340
TerraForm Validate.

342
00:17:40,840 --> 00:17:45,380
Okay, that's a success and the tax is not supported and should support it.

343
00:17:45,400 --> 00:17:49,600
Tag is a very common thing, but anyways, it's not supported, so we removed it.

344
00:17:50,140 --> 00:17:52,240
TerraForm format.

345
00:17:52,240 --> 00:17:55,480
Yeah, it's back and services been in.

346
00:17:55,630 --> 00:17:56,410
We did a lot of things.

347
00:17:56,410 --> 00:17:56,620
Okay.

348
00:17:56,620 --> 00:17:59,950
This format is very necessary to make the code more readable.

349
00:18:00,340 --> 00:18:00,760
Okay.

350
00:18:00,760 --> 00:18:03,070
Finally, let's see if plan.

351
00:18:04,630 --> 00:18:07,200
Their chances of success are getting better and better, right?

352
00:18:07,210 --> 00:18:08,810
Validating syntax is good.

353
00:18:08,830 --> 00:18:10,120
Now let's say plan.

354
00:18:10,120 --> 00:18:14,650
If this also gives us good result, then we can apply it.

355
00:18:16,430 --> 00:18:18,440
Okay if he got into an error.

356
00:18:19,880 --> 00:18:25,370
Lie number three in our B environment file and resource application.

357
00:18:26,950 --> 00:18:32,170
Sexually inappropriate value for attribute application string required.

358
00:18:34,020 --> 00:18:35,400
Okay, let's check that.

359
00:18:36,430 --> 00:18:39,040
So be environment file, line number three.

360
00:18:40,840 --> 00:18:42,430
People for application.

361
00:18:42,430 --> 00:18:47,980
We profile proart OC dot name so it needs a string.

362
00:18:47,980 --> 00:18:48,160
Right?

363
00:18:48,190 --> 00:18:50,170
So name should be found there, I think.

364
00:18:50,320 --> 00:18:51,610
I think that should take it.

365
00:18:52,150 --> 00:18:53,170
Save it.

366
00:18:53,970 --> 00:18:54,270
Okay.

367
00:18:54,300 --> 00:18:55,530
Let's check once again.

368
00:18:56,130 --> 00:18:57,540
TerraForm Plan.

369
00:19:00,950 --> 00:19:04,160
Okay, that's a success of seven Things will be added.

370
00:19:05,060 --> 00:19:05,280
All right.

371
00:19:05,300 --> 00:19:06,230
That's awesome.

372
00:19:06,260 --> 00:19:07,550
I'm getting excited.

373
00:19:07,670 --> 00:19:10,400
Let me say terraform, apply now.

374
00:19:11,480 --> 00:19:11,810
Okay.

375
00:19:11,840 --> 00:19:13,610
Now we have very close.

376
00:19:14,400 --> 00:19:19,020
To have a complete application stack means stack backend services.

377
00:19:19,050 --> 00:19:20,880
VPC is there security groups?

378
00:19:20,880 --> 00:19:22,200
Load balancers?

379
00:19:23,340 --> 00:19:23,560
Right.

380
00:19:23,560 --> 00:19:25,570
So we're automating all that.

381
00:19:25,570 --> 00:19:27,640
Plus we're maintaining a state.

382
00:19:28,390 --> 00:19:31,240
We're maintaining the state in the remote state.

383
00:19:31,840 --> 00:19:34,630
S3 Yes, yes.

384
00:19:36,430 --> 00:19:38,110
S3 Bucket We're maintaining a state.

385
00:19:38,110 --> 00:19:45,610
We are also version controlling our code and so we are very much apt compatible to work in a DevOps

386
00:19:45,610 --> 00:19:49,540
team now if following all the right standards.

387
00:19:50,200 --> 00:19:53,290
Version controlling IT infrastructure as a code.

388
00:19:54,220 --> 00:19:56,950
We are maintaining the state in a centralized place.

389
00:19:58,500 --> 00:20:03,310
We are using nice ID to help with our infrastructure as a code.

390
00:20:03,960 --> 00:20:05,820
And moreover, we are testing it.

391
00:20:06,220 --> 00:20:11,400
We are formatting it properly and all the right standards are in right places.

392
00:20:11,790 --> 00:20:14,480
And it cannot get any better than this.

393
00:20:14,790 --> 00:20:19,280
You set up a CCD with this through Jenkins next.

394
00:20:19,390 --> 00:20:20,640
So now we can use that.

395
00:20:20,640 --> 00:20:22,710
Or you can use CCD from a.

396
00:20:24,090 --> 00:20:28,590
You can use code, commit code, build code, pipeline code, deploy all the services.

397
00:20:29,220 --> 00:20:29,580
Okay.

398
00:20:29,610 --> 00:20:34,560
While this is happening, let's also check from the console.

399
00:20:42,140 --> 00:20:43,190
Being stuck.

400
00:20:46,750 --> 00:20:49,120
In Ohio.

401
00:20:53,040 --> 00:20:54,380
He profile being brought?

402
00:20:54,390 --> 00:20:55,320
That's the one.

403
00:20:55,320 --> 00:20:56,760
It's in a pending state.

404
00:20:57,060 --> 00:20:58,040
It's getting created.

405
00:20:58,050 --> 00:20:59,340
That's pretty awesome.

406
00:21:02,030 --> 00:21:04,230
We should have all our backend services as well.

407
00:21:04,250 --> 00:21:05,960
Elastic Cache.

408
00:21:06,380 --> 00:21:08,000
Elastic Cache.

409
00:21:08,780 --> 00:21:10,280
Active queue.

410
00:21:14,010 --> 00:21:14,400
And.

411
00:21:14,400 --> 00:21:15,600
Ah, yes.

412
00:21:18,610 --> 00:21:21,730
So there's a cluster that's getting created.

413
00:21:22,680 --> 00:21:24,270
This we profile Rabbit.

414
00:21:24,510 --> 00:21:26,190
That takes a very long time to come up.

415
00:21:28,130 --> 00:21:29,930
And then there is ideas.

416
00:21:30,650 --> 00:21:32,630
Ideas also take some time to come up.

417
00:21:32,980 --> 00:21:34,400
CDB identifiers.

418
00:21:34,640 --> 00:21:39,940
We can actually use one more property to be identified and we can give a proper name instead of like

419
00:21:39,980 --> 00:21:42,020
TerraForm and that ID, right?

420
00:21:44,580 --> 00:21:49,140
Okay, So we'll wait for a few minutes until this becomes stable.

421
00:21:49,260 --> 00:21:53,340
So I'll pause my screen and come back one when this is completed.

422
00:21:54,550 --> 00:21:57,760
So after some time it completed successfully.

423
00:21:57,790 --> 00:22:01,300
Exactly 11 minutes, 6 seconds.

424
00:22:02,100 --> 00:22:02,400
Yeah.

425
00:22:02,400 --> 00:22:04,110
So everything is getting tracked.

426
00:22:04,470 --> 00:22:07,980
If you're good with your code, you can make sure you commit it.

427
00:22:11,940 --> 00:22:13,320
And you push it.

428
00:22:18,610 --> 00:22:21,670
Okay, So stocks should be completely up and running.

429
00:22:27,260 --> 00:22:28,090
Environment.

430
00:22:28,220 --> 00:22:29,630
It's an orchestrated.

431
00:22:32,060 --> 00:22:35,180
And that's the endpoint as a default application.

