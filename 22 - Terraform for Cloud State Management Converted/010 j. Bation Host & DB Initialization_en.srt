1
00:00:00,150 --> 00:00:03,240
Now we have two simple things pending.

2
00:00:03,900 --> 00:00:07,410
One is Initializing our Ideas database.

3
00:00:07,770 --> 00:00:10,590
So we have the SQL queries, the SQL file.

4
00:00:10,590 --> 00:00:19,440
We have to run it against this, my SQL IDs instance, but it is in the private subnet, so it cannot

5
00:00:19,440 --> 00:00:21,120
be accessed from the outside world.

6
00:00:21,120 --> 00:00:26,630
The only way to access it is to run through an instance which is in public subnet.

7
00:00:26,640 --> 00:00:27,390
So.

8
00:00:30,180 --> 00:00:31,530
The Bastion host.

9
00:00:32,270 --> 00:00:40,100
We anyway need Bastion host and we'll also use this bastion host to provision how to say initialize

10
00:00:40,100 --> 00:00:43,940
our ideas instance with SQL queries.

11
00:00:44,240 --> 00:00:50,750
So next we'll write the code to create a bastion host and execute database commands from there so it

12
00:00:50,750 --> 00:00:54,230
can access the ideas instance and initialize our database.

13
00:00:55,090 --> 00:00:56,590
So let's do that.

14
00:00:58,480 --> 00:01:01,030
So I'm going to create a new file over here.

15
00:01:05,370 --> 00:01:07,350
Named Bastion host.

16
00:01:09,980 --> 00:01:10,670
Dr..

17
00:01:14,190 --> 00:01:19,440
In this will mention the resource to provision to create a bastion host and easy to instance.

18
00:01:21,940 --> 00:01:23,140
Resources.

19
00:01:23,980 --> 00:01:24,390
E w.

20
00:01:24,460 --> 00:01:26,620
S underscore instance.

21
00:01:30,210 --> 00:01:31,560
Logical id.

22
00:01:32,190 --> 00:01:34,920
V profile hyphen bastion.

23
00:01:37,480 --> 00:01:39,970
For the army it will be coming from.

24
00:01:41,160 --> 00:01:42,450
The variables file.

25
00:01:43,380 --> 00:01:51,330
So we have to use a lookup function and look for the region name in the map variable Amis.

26
00:01:52,760 --> 00:01:57,250
So for that we will say look up function.

27
00:01:57,570 --> 00:02:01,460
We're going to pass the dot amis.

28
00:02:03,230 --> 00:02:08,030
And that dot underscore region.

29
00:02:08,479 --> 00:02:11,660
So this function will access the map variable EMI.

30
00:02:12,840 --> 00:02:16,050
And in that it will look for a key with the region name.

31
00:02:17,460 --> 00:02:20,280
So variable eight plus underscore region.

32
00:02:21,210 --> 00:02:25,830
Is going to return the region name us East to and it will find the army.

33
00:02:27,210 --> 00:02:31,140
So this image is of Ubuntu server 20 in our region.

34
00:02:34,780 --> 00:02:38,620
Which will be automatically fetched by this resource based on our region.

35
00:02:38,620 --> 00:02:42,040
Name instance type will keep it as tx to micro.

36
00:02:44,720 --> 00:02:47,330
And let me fill in a few other details.

37
00:02:48,860 --> 00:02:49,640
Key name.

38
00:02:52,030 --> 00:03:00,100
Which is coming from our key payers resource plus underscore key payer or we profile key dot key underscore

39
00:03:00,100 --> 00:03:00,670
name.

40
00:03:02,840 --> 00:03:07,590
So if you have to put this under the public subnet of our VPC.

41
00:03:09,980 --> 00:03:18,350
So subnet id module dot vpc dot public underscore subnets zero which is going to return.

42
00:03:19,140 --> 00:03:22,320
Model dot VPC public subnet zero.

43
00:03:22,320 --> 00:03:24,090
That is the first public subnet.

44
00:03:24,090 --> 00:03:28,830
So our bastion host will be created in the first public subnet of our VPC.

45
00:03:30,950 --> 00:03:33,080
Count will only keep it one.

46
00:03:33,080 --> 00:03:34,880
And we have a variable for that.

47
00:03:35,030 --> 00:03:36,950
Why, don't instance, count?

48
00:03:38,620 --> 00:03:40,600
Next is the security group VPC.

49
00:03:40,600 --> 00:03:41,860
Security Group ID.

50
00:03:45,010 --> 00:03:54,400
E w centers core security group dot v profile hyphen bastion hyphen sg dot ID should return the idea

51
00:03:54,400 --> 00:03:55,540
of this security group.

52
00:04:02,540 --> 00:04:04,100
Let's give a few tags.

53
00:04:07,110 --> 00:04:07,270
Okay.

54
00:04:07,380 --> 00:04:10,920
So that should really provision our bastion host in our security group.

55
00:04:11,490 --> 00:04:14,970
Oh, our VPC Public subnet VPC.

56
00:04:16,440 --> 00:04:17,399
And that should be fine.

57
00:04:17,399 --> 00:04:19,260
But we have one more thing to do.

58
00:04:19,290 --> 00:04:23,220
We have to provision our ideas instance with the schema.

59
00:04:23,640 --> 00:04:28,980
So we'll use a shell script, will push a Shell script to this Bastion host and we'll execute that Shell

60
00:04:28,980 --> 00:04:29,550
script.

61
00:04:29,580 --> 00:04:35,190
Now, that Shell script should have the IDs instance endpoint, the username and password.

62
00:04:35,580 --> 00:04:39,930
And that will be dynamic when we launch our ideas instance, we'll have an endpoint.

63
00:04:39,930 --> 00:04:41,190
We have to store it.

64
00:04:41,280 --> 00:04:43,770
So we can access our IDs instance endpoint.

65
00:04:43,770 --> 00:04:48,180
But TerraForm already maintains the state of the infrastructure.

66
00:04:48,180 --> 00:04:51,390
Its state should have information about the IDs endpoint.

67
00:04:51,840 --> 00:04:55,140
But to extract it in a file, we need to create a template.

68
00:04:56,540 --> 00:04:59,390
Set up a form template file documentation.

69
00:04:59,390 --> 00:05:01,010
So there is a template file.

70
00:05:02,110 --> 00:05:05,380
Function in TerraForm where we can pass.

71
00:05:06,720 --> 00:05:08,100
A part of a template file.

72
00:05:08,100 --> 00:05:14,790
So we can create a text file, we can put template information over there and we can mention the variables,

73
00:05:14,790 --> 00:05:18,660
like we can mention the IDS endpoint, which will be used in our template.

74
00:05:18,960 --> 00:05:21,330
A template file will be just any other file.

75
00:05:22,520 --> 00:05:24,750
But we can put a variable in the template file.

76
00:05:24,770 --> 00:05:28,910
TerraForm is going to interpolate the variables with the value.

77
00:05:29,880 --> 00:05:31,740
So this is an example of a template file.

78
00:05:31,740 --> 00:05:37,710
It's any other text except you have the variables, loops, all those things, conditions you can maintain

79
00:05:37,710 --> 00:05:44,370
and terraform is going to interpolate all that and create a text file from that, which then can be

80
00:05:44,370 --> 00:05:46,830
pushed with the template file function.

81
00:05:48,670 --> 00:05:55,270
So first I'm going to create a template file with the Shell commands, Linux Shell Command, which is

82
00:05:55,270 --> 00:05:58,210
going to initialize our ideas instance.

83
00:05:58,210 --> 00:05:58,900
So.

84
00:06:00,290 --> 00:06:01,670
Let's create a file.

85
00:06:04,550 --> 00:06:05,930
Mm db.

86
00:06:05,960 --> 00:06:09,580
Hyphen deploy dot dm.

87
00:06:09,620 --> 00:06:10,150
Bill.

88
00:06:10,160 --> 00:06:12,110
That should be the extension temple.

89
00:06:19,340 --> 00:06:19,700
Here.

90
00:06:19,700 --> 00:06:23,010
We'll put the shell commands that we want to execute.

91
00:06:23,030 --> 00:06:24,680
So first an update.

92
00:06:24,710 --> 00:06:30,800
Then I want to install Git and my SQL client.

93
00:06:33,670 --> 00:06:38,410
So planning to execute all these commands in our Bastion hosts our Bastion host is an open machine,

94
00:06:38,410 --> 00:06:41,500
so I'm putting Ubuntu commands installing get my SQL.

95
00:06:42,410 --> 00:06:44,750
And then I will clone the source code over here.

96
00:06:46,540 --> 00:06:47,050
Source code.

97
00:06:47,050 --> 00:06:49,870
Earl Branch VP hyphen rim.

98
00:06:50,980 --> 00:06:56,290
And we have the file in our source code, which we are going to execute with our MySQL command.

99
00:06:56,290 --> 00:07:00,160
So I'll give the MySQL command hyphen edge and the IDs endpoint.

100
00:07:00,190 --> 00:07:02,290
Now that has to be coming dynamically.

101
00:07:02,320 --> 00:07:05,350
So I'm giving a variable over here.

102
00:07:06,830 --> 00:07:10,480
Ideas have an endpoint, which we have not yet defined.

103
00:07:10,490 --> 00:07:17,360
We are going to pass it through our template function and hyphen u user dollar.

104
00:07:19,530 --> 00:07:21,030
DBE user.

105
00:07:22,030 --> 00:07:23,020
And the password.

106
00:07:23,020 --> 00:07:23,380
Hyphen.

107
00:07:23,380 --> 00:07:25,660
Hyphen password.

108
00:07:27,660 --> 00:07:29,250
Equal to dollar.

109
00:07:31,010 --> 00:07:32,390
DB boss.

110
00:07:34,500 --> 00:07:36,180
On database named accounts.

111
00:07:36,180 --> 00:07:38,520
So we created a database named Accounts.

112
00:07:40,880 --> 00:07:47,120
Input redirection and part of our SQL file, which has the SQL queries, which is in our source code.

113
00:07:47,120 --> 00:07:52,130
So when we clone, we should have a directory v profile hyphen project and this is happening in the

114
00:07:52,130 --> 00:07:53,950
home directory of a one to user.

115
00:07:53,960 --> 00:08:00,830
And I'm going to give the complete path, absolute path slash home slash open to slash V profile.

116
00:08:01,850 --> 00:08:03,290
Hyphen project.

117
00:08:04,740 --> 00:08:07,850
So in this directory, our source code will be cloned.

118
00:08:08,910 --> 00:08:16,830
And then inside that we have a source directory in that we have main in that we have three sources.

119
00:08:17,570 --> 00:08:24,500
And inside that we have the SQL file DB underscore backup dot SQL.

120
00:08:25,560 --> 00:08:32,070
If you are not so sure about this part, check in our repository GitHub repository.

121
00:08:32,549 --> 00:08:36,090
In VP branch you should see file in this part.

122
00:08:37,559 --> 00:08:40,960
So this will be our shell script that will get executed.

123
00:08:41,000 --> 00:08:44,880
First, we're going to push this Shell script to Bastion host and execute it.

124
00:08:45,450 --> 00:08:48,480
But this needs a few variables that will pass.

125
00:08:48,900 --> 00:08:52,020
So let's go to Bastian Host resource.

126
00:08:54,620 --> 00:08:59,450
So we'll use provisional file Provisional to push this file first.

127
00:08:59,750 --> 00:09:00,650
Provisional.

128
00:09:01,650 --> 00:09:03,480
We provisionally file.

129
00:09:06,630 --> 00:09:07,560
Content.

130
00:09:10,450 --> 00:09:12,300
It's not just any other text file.

131
00:09:12,310 --> 00:09:15,790
You have to pass it through this function template file function.

132
00:09:16,940 --> 00:09:22,010
And let's give part of the template db hyphen deploy dot tx.

133
00:09:22,010 --> 00:09:23,510
Simple.

134
00:09:24,510 --> 00:09:26,760
We have to put this into the double quotes.

135
00:09:30,910 --> 00:09:31,420
Goma.

136
00:09:31,420 --> 00:09:36,340
And we have to give the variable the variable that we have we are accessing in this template, this

137
00:09:36,370 --> 00:09:38,290
endpoint DB user DB path.

138
00:09:38,470 --> 00:09:40,990
We have to parse those variables after this.

139
00:09:41,740 --> 00:09:47,500
If you're using template or many, many templates, a good idea that you create a different directory

140
00:09:47,500 --> 00:09:51,370
and put your templates inside that so it becomes more manageable.

141
00:09:51,460 --> 00:09:53,440
So like I can create a directory.

142
00:09:55,820 --> 00:09:59,330
I will name it as templates.

143
00:10:00,410 --> 00:10:04,250
And let's move over template to this templates directory.

144
00:10:05,860 --> 00:10:06,820
We factor.

145
00:10:12,560 --> 00:10:13,010
Okay.

146
00:10:16,120 --> 00:10:21,430
And then I'm going to give the path templates slash.

147
00:10:22,410 --> 00:10:23,640
The template file name.

148
00:10:25,200 --> 00:10:28,980
That's not mandatory, but makes your code a little more manageable.

149
00:10:29,760 --> 00:10:34,300
Now, about passing the variables, so we are going to pass it this way.

150
00:10:34,320 --> 00:10:36,720
This is the way in curly braces.

151
00:10:36,750 --> 00:10:39,750
Give the variable name IDs, hyphen endpoint point.

152
00:10:39,750 --> 00:10:41,580
That's the variable we're using.

153
00:10:42,680 --> 00:10:44,030
Or do you have an end point?

154
00:10:45,510 --> 00:10:47,280
Equal to the value.

155
00:10:48,060 --> 00:10:50,880
So let's go to our backend services.

156
00:10:51,660 --> 00:10:59,550
So e underscore db underscore instance start v profile hyphen IDs and there is an attribute called US

157
00:10:59,550 --> 00:11:02,220
address which is going to get us the endpoint.

158
00:11:06,010 --> 00:11:07,840
So that's the value of.

159
00:11:08,690 --> 00:11:09,890
One variable like that.

160
00:11:09,890 --> 00:11:11,330
We have two other variables.

161
00:11:11,900 --> 00:11:17,240
So comma separated DB user, that's another variable.

162
00:11:19,490 --> 00:11:21,800
And its value is in the variables file.

163
00:11:23,520 --> 00:11:25,620
DB user and DB pass.

164
00:11:25,620 --> 00:11:27,780
So we're going to use these variables.

165
00:11:30,280 --> 00:11:32,950
Var dot db user.

166
00:11:36,300 --> 00:11:43,770
Comma db pos equal to var dot db pos.

167
00:11:45,660 --> 00:11:47,430
Let's just check the syntax.

168
00:12:17,320 --> 00:12:20,200
So it's going to take that template and push it.

169
00:12:20,200 --> 00:12:23,350
And we need to mention the destination where we want to push it.

170
00:12:23,650 --> 00:12:25,060
So destination.

171
00:12:28,810 --> 00:12:30,520
Let's put it in a temp directory.

172
00:12:31,970 --> 00:12:33,620
Damp slash.

173
00:12:34,990 --> 00:12:43,240
We profile hyphen db deploy dot as such, so we'll store it with the extension dots because this will

174
00:12:43,240 --> 00:12:45,250
be a shell script that we are going to execute.

175
00:12:47,240 --> 00:12:51,560
And next is, once we have the Shell script over there, we just have to execute that Shell script.

176
00:12:51,560 --> 00:12:52,850
So another provision for.

177
00:12:56,330 --> 00:13:05,840
Not provider provision and remote exec which will execute our script on this bastion host.

178
00:13:06,970 --> 00:13:08,970
So we're going to give inline commands.

179
00:13:08,980 --> 00:13:14,530
So you say inline equal to and in the list format, you give the list of the commands that you want

180
00:13:14,530 --> 00:13:15,100
to execute.

181
00:13:15,100 --> 00:13:18,520
First, you want to make it executable.

182
00:13:18,520 --> 00:13:20,710
So C each mod plus X.

183
00:13:22,310 --> 00:13:24,170
And the part of our script.

184
00:13:34,470 --> 00:13:35,420
Coma separated.

185
00:13:35,430 --> 00:13:39,090
You can give multiple commands or the next command is obviously executing the script.

186
00:13:39,090 --> 00:13:40,290
So we'll say pseudo.

187
00:13:41,770 --> 00:13:43,120
And execute the script.

188
00:13:43,390 --> 00:13:46,330
So part of the script, which will execute the Shell script.

189
00:13:47,170 --> 00:13:47,470
All right.

190
00:13:47,470 --> 00:13:54,340
So this script will get executed, which will access our ideas endpoint and run our SQL queries on it,

191
00:13:54,340 --> 00:13:56,710
which will initialize our database.

192
00:14:00,530 --> 00:14:02,450
Let me see these two things.

193
00:14:04,970 --> 00:14:11,180
Of course, we need to give also the connection information, how a TerraForm is going to access this

194
00:14:11,180 --> 00:14:14,770
bastion host to push the file and execute Shell script.

195
00:14:14,780 --> 00:14:16,760
So you need to give the connection information.

196
00:14:19,010 --> 00:14:24,770
Connection information user forgot username which is in available file private key.

197
00:14:26,450 --> 00:14:31,010
I'm going to be using a file function, which is going to open up our private key.

198
00:14:31,040 --> 00:14:32,210
That's the variable.

199
00:14:34,210 --> 00:14:35,590
Private key part.

200
00:14:37,390 --> 00:14:39,360
And the name of the file is V Profile Key.

201
00:14:39,370 --> 00:14:40,590
So that's the file.

202
00:14:40,600 --> 00:14:43,480
And the private key file is going to open up and use that file.

203
00:14:45,600 --> 00:14:46,590
And IP.

204
00:14:47,220 --> 00:14:51,660
So since we are executing it from our local machine, we are going to access it over the internet.

205
00:14:51,660 --> 00:14:53,520
So we have to use the public IP.

206
00:14:54,480 --> 00:15:01,020
Of the Bastion hosts so host self dot public IP which is going to return the public IP of this bastion

207
00:15:01,020 --> 00:15:01,620
host.

208
00:15:02,500 --> 00:15:04,380
So it will use these credentials.

209
00:15:04,380 --> 00:15:06,150
Log into the Bastion host.

210
00:15:06,270 --> 00:15:09,090
Push the script and execute the script.

211
00:15:10,380 --> 00:15:10,620
All right.

212
00:15:10,620 --> 00:15:13,720
So in this, we're not only just provisioning the Bastion host.

213
00:15:13,740 --> 00:15:17,670
We are also executing script, which is going to initialize our ideas instance.

214
00:15:17,670 --> 00:15:19,290
So two things in one.

215
00:15:19,980 --> 00:15:24,390
But then you have to make sure this runs only after this instance is provisioned.

216
00:15:24,840 --> 00:15:31,020
If you're running all the scripts at once, then there may be a chance that it will launch Bastion Host

217
00:15:31,020 --> 00:15:36,110
first and then it will create the backend services, backend service.

218
00:15:36,130 --> 00:15:41,670
If the database is not ready, if this instance is not ready, will not get this endpoint.

219
00:15:42,920 --> 00:15:43,090
All right.

220
00:15:43,160 --> 00:15:47,840
So it provisions it trying to deploy this template file it will throw you error so this.

221
00:15:48,800 --> 00:15:54,020
Bastion host setup should happen only after your backend services are up and running.

222
00:15:54,020 --> 00:15:59,690
So if you're going to put depends on over here and we'll mention the ideas.

223
00:16:01,640 --> 00:16:07,910
Resource ideas underscore db underscore instance dot v profile hyphen radius.

224
00:16:08,450 --> 00:16:15,470
So then TerraForm will make sure first it is going to provision the DB instance and then only it will

225
00:16:15,470 --> 00:16:17,150
access our provision.

226
00:16:17,150 --> 00:16:22,040
The bastion host So you're creating a dependency there, which is very, very important.

227
00:16:23,380 --> 00:16:23,800
Okay.

228
00:16:23,830 --> 00:16:25,360
Now it's time to test.

229
00:16:34,690 --> 00:16:36,060
TerraForm in it.

230
00:16:36,070 --> 00:16:38,920
If I have anything, it will download any modules.

231
00:16:40,880 --> 00:16:42,890
But I don't think I have mentioned anything new.

232
00:16:42,890 --> 00:16:44,060
So this is fine.

233
00:16:45,760 --> 00:16:48,700
TerraForm validate.

234
00:16:53,870 --> 00:16:54,860
Okay, That's a success.

235
00:16:54,860 --> 00:16:55,670
That's surprising.

236
00:16:55,670 --> 00:16:58,940
I thought I will get some errors that are from format.

237
00:16:58,940 --> 00:17:04,609
So Bastion host everything gets formatted properly and this is good.

238
00:17:04,609 --> 00:17:05,869
Let's see if this.

239
00:17:09,160 --> 00:17:11,369
And finally, TerraForm Plan.

240
00:17:17,460 --> 00:17:20,040
Now get all the validation completed successfully.

241
00:17:20,040 --> 00:17:22,530
It's time to now apply the changes.

242
00:17:23,430 --> 00:17:25,050
So it is one to add.

243
00:17:25,050 --> 00:17:28,920
It's going to add one instance, which is our bastion host, actually.

244
00:17:33,240 --> 00:17:35,030
And I say, I am good with this.

245
00:17:35,040 --> 00:17:36,240
Let's say yes.

246
00:17:45,540 --> 00:17:46,830
Okay, so there is an error.

247
00:17:46,830 --> 00:17:48,360
My SQL command.

248
00:17:48,630 --> 00:17:50,370
It says not found.

249
00:17:50,520 --> 00:17:56,100
So it pushed our script, but it was not able to execute it or execute it, but it did not complete

250
00:17:56,100 --> 00:17:57,060
it successfully.

251
00:17:57,390 --> 00:17:58,930
Script execution failed.

252
00:17:58,950 --> 00:18:01,090
So let's check our template.

253
00:18:01,110 --> 00:18:02,070
This is our script.

254
00:18:06,970 --> 00:18:09,430
So the script looks perfectly fine.

255
00:18:10,300 --> 00:18:15,650
It is failing at this command where it is running my SQL hyphen edge ideas endpoint.

256
00:18:15,670 --> 00:18:21,490
For some reason it seems it's not able to access our IDs instance from the Bastion host.

257
00:18:22,520 --> 00:18:24,200
And we can test this ourself.

258
00:18:27,360 --> 00:18:29,040
Let's go to the Bastion instance.

259
00:18:31,000 --> 00:18:32,020
Let's get it.

260
00:18:32,050 --> 00:18:33,280
IP address.

261
00:18:36,210 --> 00:18:39,120
As a such hyphen i v profile.

262
00:18:39,120 --> 00:18:40,080
That's the key.

263
00:18:40,410 --> 00:18:41,400
Or one too.

264
00:18:42,330 --> 00:18:43,650
And the IP address.

265
00:18:46,860 --> 00:18:48,750
So we're in the Bastion host.

266
00:18:49,080 --> 00:18:55,650
And if you go to the temp directory, we should find our script V profile deployed dot script.

267
00:18:58,550 --> 00:19:04,010
And you see it has got the endpoint, the username, the password, everything correct.

268
00:19:04,100 --> 00:19:06,170
Let's try to log in with this command.

269
00:19:09,190 --> 00:19:11,530
And it's not able to log in.

270
00:19:12,360 --> 00:19:18,110
So this instance is not allowing the connection, and most probably it will be the security group.

271
00:19:18,120 --> 00:19:20,850
Let's check the security group of IDs, instance.

272
00:19:23,970 --> 00:19:25,650
So that's what this instance.

273
00:19:27,130 --> 00:19:28,370
That's the security group.

274
00:19:28,390 --> 00:19:29,500
Let's click on that.

275
00:19:31,630 --> 00:19:37,570
Now, this instant security group rule says allow all traffic from the profile security group.

276
00:19:38,330 --> 00:19:41,540
In which we have our bins attack instances.

277
00:19:41,600 --> 00:19:45,710
But our bastion host security group value should be also over here.

278
00:19:46,430 --> 00:19:50,510
So it should allow 3306 from Bastion host security group.

279
00:19:53,250 --> 00:19:55,230
Bastion host security group.

280
00:19:56,190 --> 00:20:00,600
We profile hyphen bastion hyphen SG and will not do that manually.

281
00:20:00,600 --> 00:20:02,370
We'll put that in our code.

282
00:20:04,610 --> 00:20:06,410
So let's go to security group.

283
00:20:08,710 --> 00:20:15,340
People fall back backgrounds security group in this we have this instance so it has connection allowed

284
00:20:16,270 --> 00:20:22,240
all IP from protected group that's right we have seen that we have to make one more rule over here.

285
00:20:24,530 --> 00:20:25,550
Ingress.

286
00:20:27,630 --> 00:20:31,380
From Port 3306.

287
00:20:32,670 --> 00:20:35,970
DCP 3306.

288
00:20:40,400 --> 00:20:42,560
Allowed from the security group.

289
00:20:44,550 --> 00:20:51,930
It does underscore security group DOT the Bastion security group.

290
00:20:54,220 --> 00:20:55,570
Dot it.

291
00:20:57,930 --> 00:20:59,670
Okay, let's see this.

292
00:21:01,370 --> 00:21:04,580
There is one more update in this project video.

293
00:21:05,120 --> 00:21:08,840
If you're getting this error cell connection error.

294
00:21:11,070 --> 00:21:15,150
This is because of new 1 to 20 security settings.

295
00:21:15,930 --> 00:21:17,520
And as a temporary fix.

296
00:21:17,520 --> 00:21:22,170
As of now, you can give one option while you're executing the MySQL command.

297
00:21:22,470 --> 00:21:25,860
That's hyphen hyphen SQL hyphen more equal to disabled.

298
00:21:26,960 --> 00:21:28,280
See this file.

299
00:21:29,170 --> 00:21:30,430
And then you can continue.

300
00:21:30,430 --> 00:21:36,460
But if you're using open to 18 ami for Bastion host, you should not get this error and you don't need

301
00:21:36,460 --> 00:21:37,540
to put this setting.

302
00:21:39,220 --> 00:21:42,430
This option is only for new ubuntu 20.

303
00:21:43,450 --> 00:21:47,680
So see the file and then you can continue the execution.

304
00:21:48,460 --> 00:21:50,020
And let's do this once again.

305
00:21:54,880 --> 00:21:55,960
TerraForm.

306
00:21:57,220 --> 00:21:58,300
Validate.

307
00:22:00,610 --> 00:22:01,930
There are farm.

308
00:22:02,780 --> 00:22:03,620
Format.

309
00:22:05,420 --> 00:22:07,560
The reform plan.

310
00:22:11,420 --> 00:22:12,350
Things looks good.

311
00:22:12,350 --> 00:22:14,240
Let's say TerraForm apply.

312
00:22:17,290 --> 00:22:22,390
It sees one to destroy, it's going to delete our Bastion host and recreate it once again.

313
00:22:22,390 --> 00:22:28,000
And that is what we want when it creates new Bastion hosts going to execute the script.

314
00:22:28,000 --> 00:22:31,420
This time it should be able to access the ideas instance.

315
00:22:34,490 --> 00:22:34,940
Let's see.

316
00:22:34,940 --> 00:22:35,660
Yes.

317
00:22:39,480 --> 00:22:41,700
So this time it completed successfully.

318
00:22:42,150 --> 00:22:46,140
Sebastian Host Created and executed our script.

319
00:22:46,560 --> 00:22:49,290
Initialized ideas DB instance.

320
00:22:49,530 --> 00:22:55,500
And yes, now we have a complete stack and we can upload our artifact to being stack.

