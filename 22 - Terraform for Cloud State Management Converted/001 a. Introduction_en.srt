1
00:00:10,800 --> 00:00:17,130
Welcome to the Project Cloud State with TerraForm is the name of this project.

2
00:00:19,620 --> 00:00:22,380
And yes, state, not automation.

3
00:00:22,620 --> 00:00:28,920
Yes, of course we automate cloud setup with TerraForm, but it's more about maintaining the state of

4
00:00:28,920 --> 00:00:30,390
your cloud infrastructure.

5
00:00:36,650 --> 00:00:36,890
All right.

6
00:00:36,890 --> 00:00:43,040
So let's say you have a cloud management team and they are in charge of deploying setup and managing

7
00:00:43,040 --> 00:00:49,520
the infrastructure on the cloud and also very heavy usage of cloud services.

8
00:00:49,790 --> 00:00:54,980
Now, of course, then there will be regular provisioning requests and regular changes, regular deployments.

9
00:00:55,310 --> 00:01:01,850
So if you have the heavy usage of cloud services and a very regular usage, then you should also get

10
00:01:01,850 --> 00:01:03,050
into some problems.

11
00:01:07,170 --> 00:01:12,120
When we talk about infrastructure, there are so many things and setting up an entire infrastructure

12
00:01:12,120 --> 00:01:13,260
is a complex process.

13
00:01:13,260 --> 00:01:20,430
This network does security, there's operating systems, the storage load balancers, etc., etc..

14
00:01:20,910 --> 00:01:25,980
One time infrastructure setup is fine, but if you want to do it multiple times, doing the same thing

15
00:01:25,980 --> 00:01:27,150
is not repeatable.

16
00:01:27,380 --> 00:01:33,150
Or maybe similar infrastructure for dev staging productions and also multiple projects.

17
00:01:33,300 --> 00:01:36,420
So manually, if you're doing that, it's not repeatable.

18
00:01:37,150 --> 00:01:42,250
Also, it will be very difficult to track like who made the change when the change was made.

19
00:01:42,490 --> 00:01:49,090
You try to make documents of the infrastructure like inventory, but that's time consuming process and

20
00:01:49,090 --> 00:01:54,010
that should happen because if the infrastructure state is not centralized.

21
00:01:55,190 --> 00:02:01,670
Also, there'll be huge chance of making human errors and these things can lead to non-functional infrastructure

22
00:02:01,910 --> 00:02:08,330
or bugs errors or even exposed infrastructure in such a huge environment.

23
00:02:08,479 --> 00:02:11,090
Doing all those things will take a lot of time.

24
00:02:13,210 --> 00:02:13,450
All right.

25
00:02:13,450 --> 00:02:15,490
So these are some problems, common problems.

26
00:02:15,490 --> 00:02:16,570
There could be more.

27
00:02:18,030 --> 00:02:19,260
Let's look at the solution.

28
00:02:22,370 --> 00:02:25,490
You need to have configuration management of the infrastructure.

29
00:02:26,230 --> 00:02:28,270
Like at a centralized place.

30
00:02:28,870 --> 00:02:34,360
And you need to have everything automated, of course, so there's less chance of making human error.

31
00:02:35,640 --> 00:02:40,470
And always you should be maintaining a centralized state of the infrastructure.

32
00:02:41,300 --> 00:02:47,060
So all the configuration of your infrastructure is maintained at a centralized place and we can automatically

33
00:02:47,060 --> 00:02:48,410
deploy the changes.

34
00:02:48,740 --> 00:02:53,720
Any change management can be triggered very easily and we can avoid the human errors.

35
00:02:59,560 --> 00:03:04,620
Your infrastructure should be in files or in code so you can version control it.

36
00:03:04,630 --> 00:03:11,530
You have infrastructure as a code and you should have a repeatable infrastructure as a code.

37
00:03:11,530 --> 00:03:19,780
So you should not hard code values also, then it should be reusable across different environments like

38
00:03:19,780 --> 00:03:27,190
def queue, staging production or even across different projects should also have a reusable code.

39
00:03:32,360 --> 00:03:35,090
Cloud automation adds lots of business value.

40
00:03:35,090 --> 00:03:36,840
And here are some statistics.

41
00:03:36,860 --> 00:03:41,390
71% of the company says they have seen 10% of revenue growth.

42
00:03:41,690 --> 00:03:45,020
84% have lowered their operations cost.

43
00:03:45,200 --> 00:03:48,050
81% have become more innovative.

44
00:03:48,410 --> 00:03:51,440
When you automate infrastructure, you save a lot of time.

45
00:03:51,440 --> 00:03:57,110
You can invest that time in learning and adapting new technologies in your projects, which can add

46
00:03:57,110 --> 00:03:58,250
more business value.

47
00:03:58,250 --> 00:03:59,900
And of course, you become more agile.

48
00:03:59,940 --> 00:04:03,170
So 84% have become more agile quickly.

49
00:04:03,170 --> 00:04:08,780
They can deploy changes as per the requirements, and I think infrastructure was never so easy.

50
00:04:09,760 --> 00:04:14,950
Infrastructure has really become a code now, and we'll see how we're going to do that.

51
00:04:17,630 --> 00:04:24,500
So we are going to use TerraForm and enable a cloud computing platform so we can set up a complete infrastructure

52
00:04:24,500 --> 00:04:27,100
on a cloud by using TerraForm.

53
00:04:27,110 --> 00:04:30,300
Not only set up, you're going to see how we're going to maintain its status.

54
00:04:30,320 --> 00:04:35,180
So any change, how we can very easily deploy to our infrastructure.

55
00:04:35,810 --> 00:04:37,160
Okay, so here are the things.

56
00:04:38,350 --> 00:04:41,320
Four steps that we're going to do.

57
00:04:41,350 --> 00:04:44,230
We're going to set up TerraForm with back and forth.

58
00:04:44,230 --> 00:04:49,720
So we have a centralized state of terraform or of a cloud infrastructure.

59
00:04:50,710 --> 00:04:53,230
Then we are going to set up VPC.

60
00:04:54,120 --> 00:05:01,140
With that gateway Internet gateway subnet so we can have a secure and highly available VPC set up with

61
00:05:01,140 --> 00:05:01,890
TerraForm.

62
00:05:03,200 --> 00:05:08,690
Will also provision beans, tech, environment with TerraForm and also the backend services that we're

63
00:05:08,690 --> 00:05:09,560
going to use.

64
00:05:09,590 --> 00:05:12,190
Ideas elastic cash and active MQ.

65
00:05:12,840 --> 00:05:18,530
And also along with that, we have security groups, Key Bastion hosts and few other things that you're

66
00:05:18,530 --> 00:05:21,020
going to automate and maintain with TerraForm.

67
00:05:27,190 --> 00:05:28,810
Okay, so let's do this.

68
00:05:28,810 --> 00:05:32,590
But one thing keep in mind, it's not about just automation.

69
00:05:32,590 --> 00:05:34,610
It's not about just the speed now.

70
00:05:34,630 --> 00:05:40,960
It's also about maintaining the state, having the state of your infrastructure in a file.

71
00:05:40,990 --> 00:05:42,220
That's pretty awesome.

72
00:05:42,790 --> 00:05:48,310
And obviously then when you have state, you can very easily make changes, the differential changes.

73
00:05:48,460 --> 00:05:51,100
So let's see the architecture of the project.

74
00:05:52,050 --> 00:05:53,400
Okay, so this is the architecture.

75
00:05:53,400 --> 00:05:59,700
We're going to have TerraForm on our local machine and we're going to store the state, the information

76
00:05:59,700 --> 00:06:04,920
about our infrastructure in an S3 bucket, which will be obviously in our cloud account.

77
00:06:05,100 --> 00:06:08,280
We'll also configure TerraForm with the proper authentication.

78
00:06:08,730 --> 00:06:15,780
We're going to use then TerraForm to access our cloud services and create a VPC, a VPC that is distributed

79
00:06:15,780 --> 00:06:17,430
among multiple zones.

80
00:06:18,000 --> 00:06:21,000
Or should I say its subnets distributed among multiple zones.

81
00:06:21,000 --> 00:06:28,650
So we'll have public subnet distributed among multiple zones connected to an Internet gateway with our

82
00:06:28,650 --> 00:06:29,380
route table.

83
00:06:29,400 --> 00:06:33,660
So we're going to set up route table and route the traffic to the Internet gateway.

84
00:06:34,140 --> 00:06:38,100
We'll also have private subnet again distributed among multiple zones.

85
00:06:38,100 --> 00:06:44,640
In our private subnet, we're going to set up services like ESI, two instances, my SQL database or

86
00:06:44,640 --> 00:06:45,810
elastic cache.

87
00:06:45,840 --> 00:06:50,460
Of course, this private subnet will be connected to a NAT gateway through a route table.

88
00:06:51,640 --> 00:06:53,890
And to access this entire VPC.

89
00:06:54,780 --> 00:06:59,700
Or should I say, to access a private systems in your private subnet?

90
00:06:59,730 --> 00:07:05,580
We are also going to have a bastion host, so we'll even provision bastion host from our TerraForm Scripts.

91
00:07:08,220 --> 00:07:13,210
So once we have our VPC created, then we're going to create our infrastructure on that.

92
00:07:13,230 --> 00:07:15,210
Or should I say layout or stack?

93
00:07:15,970 --> 00:07:18,610
Which we'll see in the next architectural diagram.

94
00:07:19,210 --> 00:07:25,060
Once we have our VPC set up, we are going to create our stack the services that we need to set up our

95
00:07:25,060 --> 00:07:25,580
stack.

96
00:07:25,600 --> 00:07:31,030
We're using TerraForm again and obviously we are going to maintain the state in the S3 bucket as you

97
00:07:31,030 --> 00:07:33,580
have seen the previous design as well.

98
00:07:34,180 --> 00:07:41,680
So TerraForm is going to set up IDs instance in private subnet, elastic cache in private subnet, again

99
00:07:41,920 --> 00:07:50,020
Amazon MQ again in private subnet in the VPC and bean stack, where the load balancer of the bean stack

100
00:07:50,020 --> 00:07:56,140
will be in the public subnet and the instances will be in the private subnets to access our infrastructure

101
00:07:56,140 --> 00:08:02,830
will also take care of the security group and the rules and also log in key if we need to log into our

102
00:08:02,830 --> 00:08:05,290
ec2 instances which are part of our bean stack.

103
00:08:07,740 --> 00:08:12,150
But we don't need to create it in multiple steps as we did it in Ansible project.

104
00:08:12,150 --> 00:08:14,520
We did first thing, then we did second thing.

105
00:08:14,520 --> 00:08:20,100
Yes, we could have done all the things together in Ansible as well, but the complexity is too much

106
00:08:20,100 --> 00:08:20,280
there.

107
00:08:20,280 --> 00:08:22,140
So we divide it into multiple phases.

108
00:08:22,140 --> 00:08:26,510
But in TerraForm it's going to be much easier to automate these things.

109
00:08:26,520 --> 00:08:31,860
Also, it's not just about automation, it's also about maintaining the state of the infrastructure,

110
00:08:31,860 --> 00:08:33,480
as I keep repeating that.

111
00:08:34,380 --> 00:08:41,700
So there are no varieties of tools in the market to automate cloud computing tasks, but I think in

112
00:08:41,700 --> 00:08:45,060
today's market, TerraForm is one of the best cloud automation tool.

113
00:08:45,920 --> 00:08:50,720
Also, if you have used cloud formation, you know it will be similar.

114
00:08:50,720 --> 00:08:53,130
But cloud formation is very specific for us.

115
00:08:53,180 --> 00:08:56,060
But you can use TerraForm to do other things as well.

116
00:08:56,090 --> 00:09:00,950
You can use other cloud providers and there are other kinds of automation that it supports.

117
00:09:01,400 --> 00:09:03,770
So let's get started now.

