1
00:00:00,420 --> 00:00:03,600
Welcome to the introductory session of TerraForm.

2
00:00:03,630 --> 00:00:10,200
This is not a new project, but first we'll learn the basics of TerraForm and then we'll see how we

3
00:00:10,200 --> 00:00:13,530
can use TerraForm for our project implementation.

4
00:00:13,800 --> 00:00:17,670
If you already know TerraForm, then you can directly skip to the project video.

5
00:00:18,060 --> 00:00:21,690
But if you're new to TerraForm, then you can continue with this video.

6
00:00:22,580 --> 00:00:23,930
So let's get started.

7
00:00:24,870 --> 00:00:29,010
Okay, so what really TerraForm is there are so many automation tools in the market.

8
00:00:29,010 --> 00:00:34,060
TerraForm is infrastructure as a code so we can code IT infrastructure.

9
00:00:34,080 --> 00:00:40,710
So we set up infrastructure on cloud computing environment like Google Cloud Azure, so you can manage

10
00:00:40,710 --> 00:00:43,140
your infrastructure from TerraForm through code.

11
00:00:44,330 --> 00:00:46,850
We can define the infrastructure state.

12
00:00:47,120 --> 00:00:54,620
If you talk about a state or for instance, or for instance, security group load balancers, bienstock

13
00:00:54,650 --> 00:00:58,880
or any such service you're using on a platform, you can define its state.

14
00:00:59,330 --> 00:01:03,980
And TerraForm will make sure that your system's your infrastructure is in the same state.

15
00:01:04,690 --> 00:01:08,920
So how does it compare with automation tool like Ansible, Puppet or Chef?

16
00:01:09,190 --> 00:01:14,410
If you talk about these tools, these are configuration management tools for systems, mostly OS related

17
00:01:14,410 --> 00:01:14,680
tasks.

18
00:01:14,680 --> 00:01:20,110
They'll define the state of the machine to be specific, state of the operating system, what packages

19
00:01:20,110 --> 00:01:26,740
should be installed, what vision, what configuration file we can use Ansible as and other automation

20
00:01:26,740 --> 00:01:28,870
tool also to do cloud automation.

21
00:01:29,320 --> 00:01:32,710
But these tools don't manage the state of the infrastructure.

22
00:01:33,310 --> 00:01:38,310
We can see we can automate cloud with Ansible, but we can't maintain its state.

23
00:01:38,320 --> 00:01:39,730
It doesn't maintain any state.

24
00:01:39,910 --> 00:01:41,590
Everything is in a YAML file.

25
00:01:42,460 --> 00:01:48,130
TerraForm, on the other hand, automates the infrastructure itself and also maintain its state.

26
00:01:49,610 --> 00:01:55,100
Like any cloud provider, E.W. has Google Cloud, Azure Digital Ocean.

27
00:01:58,030 --> 00:02:04,810
Now TerraForm, combining together with automation tools like Ansible can give you complete automation.

28
00:02:05,200 --> 00:02:09,780
So once your infrastructure is set up and if you're provisioning easy to instances, launching easy

29
00:02:09,789 --> 00:02:14,920
two instances with TerraForm, you'd like to provision it with some software packages you can use Ansible

30
00:02:14,920 --> 00:02:17,590
with that, or even puppet or even chef.

31
00:02:17,800 --> 00:02:23,050
Otherwise, normal batch scripting is also fine with TerraForm or even PowerShell scripting.

32
00:02:23,670 --> 00:02:27,480
You don't need to know any programming language to use TerraForm.

33
00:02:28,260 --> 00:02:29,600
You have come so far.

34
00:02:29,610 --> 00:02:35,460
You have no you have done so many projects, you know, Ansible, you know, infrastructure, you know,

35
00:02:35,460 --> 00:02:36,510
cloud computing.

36
00:02:36,540 --> 00:02:40,500
It's just a matter of learning the syntax of TerraForm.

37
00:02:40,950 --> 00:02:46,620
Once you know the TerraForm syntax and the basic execution, then you can use the TerraForm documentation

38
00:02:46,620 --> 00:02:50,640
and write your complete automation or infrastructure state.

39
00:02:52,340 --> 00:02:54,890
TerraForm does not have any programming language.

40
00:02:55,010 --> 00:02:57,710
It has its own syntax domain specific language.

41
00:02:57,710 --> 00:02:59,780
DSL, which is similar to JSON.

42
00:02:59,780 --> 00:03:01,070
Very easy to understand.

43
00:03:01,740 --> 00:03:04,320
And on top of that, you have great documentation.

44
00:03:06,720 --> 00:03:07,650
Remember in Davos.

45
00:03:07,650 --> 00:03:10,260
We need to automate everything we do.

46
00:03:10,260 --> 00:03:12,210
We know how to automate systems with Ansible.

47
00:03:12,210 --> 00:03:13,620
We can do also cloud automation.

48
00:03:13,620 --> 00:03:18,810
With Ansible, we can do Cascade on Jenkins, we can do CSC on us.

49
00:03:19,590 --> 00:03:24,210
But when it comes to the infrastructure itself, I find TerraForm is one of the best tools today in

50
00:03:24,210 --> 00:03:29,040
the market to maintain the state of your cloud infrastructure and also to automate it.

51
00:03:29,970 --> 00:03:34,120
So you have a centralized configuration management of your cloud infrastructure.

52
00:03:34,140 --> 00:03:35,490
That sounds pretty awesome.

53
00:03:36,530 --> 00:03:37,310
So what do you need?

54
00:03:37,340 --> 00:03:39,860
Well, installing TerraForm is very easy.

55
00:03:39,860 --> 00:03:40,820
There's a binary file.

56
00:03:40,820 --> 00:03:42,010
You can just download it.

57
00:03:42,020 --> 00:03:44,780
You have it for Linux Windows on Mac as well.

58
00:03:45,170 --> 00:03:49,700
So you can just download the binary and you can store it in your path.

59
00:03:50,060 --> 00:03:56,060
You can put in an environment variable in windows or you can export it in Linux or in Windows.

60
00:03:56,060 --> 00:03:58,930
You can also do Choco install TerraForm.

61
00:03:58,940 --> 00:04:00,290
That is also better.

62
00:04:01,040 --> 00:04:03,080
So first exercise.

63
00:04:03,740 --> 00:04:04,620
First exercise.

64
00:04:04,640 --> 00:04:09,980
What we're going to do is launching easy to instance with TerraForm script, very basic.

65
00:04:10,580 --> 00:04:12,380
So we need a native plus account.

66
00:04:12,410 --> 00:04:18,290
We need an IAM user with access keys and we'll have a TerraForm file to launch our instance.

67
00:04:19,690 --> 00:04:21,970
And then once we have that file, we're just going to say, Run!

68
00:04:21,970 --> 00:04:22,720
TerraForm.

69
00:04:23,200 --> 00:04:26,050
And TerraForm will launch our instance.

70
00:04:26,890 --> 00:04:29,350
So this is the exercise we'll write.

71
00:04:29,650 --> 00:04:31,030
Instance DOT to file.

72
00:04:31,360 --> 00:04:33,490
TerraForm File ends with DF.

73
00:04:34,260 --> 00:04:34,650
Kemp.

74
00:04:35,280 --> 00:04:39,900
We're going to execute it, launch the instance, then we'll make some changes to those instances,

75
00:04:40,050 --> 00:04:43,350
and then we're going to apply TerraForm again.

76
00:04:43,350 --> 00:04:45,750
And we'll see how TerraForm maintains the state.

77
00:04:45,750 --> 00:04:51,030
If your system, for instance, is not in the state as defined in your file, then it's going to reapply

78
00:04:51,030 --> 00:04:51,930
the changes.

79
00:04:52,920 --> 00:04:53,940
Then what are you waiting for?

80
00:04:53,970 --> 00:04:55,500
Let's get started with TerraForm.

81
00:04:58,120 --> 00:05:00,130
First will download a terraform.

82
00:05:00,160 --> 00:05:03,640
On our Windows machine, we're going to execute TerraForm from Windows Machine.

83
00:05:03,640 --> 00:05:07,810
If you want, you can execute it from MacBook Linux anywhere.

84
00:05:08,050 --> 00:05:13,300
So you'll go to downloads in TerraForm and select your operating system of your choice.

85
00:05:13,300 --> 00:05:15,610
You can go with Windows 64 bit.

86
00:05:15,910 --> 00:05:21,640
It's going to download a zip file for you which you can extract and put it in your location like C Drive

87
00:05:22,210 --> 00:05:22,720
Linux.

88
00:05:22,720 --> 00:05:26,530
If you have just download it, put it into your local bin.

89
00:05:27,430 --> 00:05:34,060
Extract this into your local bin and you should have terraform and then you have Mac OS and Windows.

90
00:05:34,060 --> 00:05:36,790
The easiest way is actually to install it from Choco.

91
00:05:36,820 --> 00:05:38,710
You can just open your PowerShell.

92
00:05:39,870 --> 00:05:40,110
All right.

93
00:05:40,110 --> 00:05:45,300
That's the most easiest way you can just say I have to open it as an administrator.

94
00:05:47,470 --> 00:05:48,550
Paul Schell.

95
00:05:50,030 --> 00:05:50,460
She.

96
00:05:53,760 --> 00:06:00,390
And I can see just Choko install terraform.

97
00:06:00,900 --> 00:06:05,620
I don't need to download the binary and extract it.

98
00:06:05,640 --> 00:06:06,870
This is the easiest way.

99
00:06:08,950 --> 00:06:12,190
Or if you want to do it this way, you can just download it, extract it.

100
00:06:13,090 --> 00:06:15,160
You need to extract it to some location.

101
00:06:17,290 --> 00:06:19,210
You can go to your C drive.

102
00:06:19,360 --> 00:06:21,640
Maybe you can do it somewhere in the C drive.

103
00:06:22,240 --> 00:06:23,710
I can create a folder.

104
00:06:24,190 --> 00:06:26,680
Let's say TerraForm.

105
00:06:28,030 --> 00:06:29,890
And you can extract it over there.

106
00:06:32,150 --> 00:06:36,530
So I now have TerraForm Directory in the C Drive and this TerraForm Extractor.

107
00:06:36,560 --> 00:06:42,120
Now we need to set this into systems variable so you can just search for environment variable.

108
00:06:42,140 --> 00:06:43,910
You can edit environment variable.

109
00:06:44,450 --> 00:06:45,950
Environment variable.

110
00:06:51,490 --> 00:06:56,890
Right for my particular user, I can just edit the path and I can just add a new entry.

111
00:06:58,010 --> 00:06:58,990
And I can just see.

112
00:06:59,000 --> 00:07:00,560
Okay, so terraform.

113
00:07:00,590 --> 00:07:03,740
Then I can directly start accessing TerraForm from the command line.

114
00:07:04,490 --> 00:07:05,240
So.

115
00:07:06,780 --> 00:07:12,530
Choose your way either download it binary and put the environment variable or the best way is just install

116
00:07:12,540 --> 00:07:13,290
terraform.

117
00:07:14,160 --> 00:07:15,750
In any case, you should have terraform.

118
00:07:16,880 --> 00:07:21,860
Once you have TerraForm, we can start doing some automation, but I would like to set authentication

119
00:07:21,860 --> 00:07:22,550
first.

120
00:07:23,300 --> 00:07:27,830
We need authentication once you can define it as access key and secret key.

121
00:07:27,980 --> 00:07:29,120
So we're using eight.

122
00:07:29,690 --> 00:07:35,840
So we're going to use IAM user access key in secret key to access ADA services.

123
00:07:36,680 --> 00:07:41,690
But the problem is then we have to define it in the data from file, which is not at all safe.

124
00:07:41,690 --> 00:07:44,180
So install a CLI.

125
00:07:45,080 --> 00:07:48,020
And set your access key on line.

126
00:07:49,090 --> 00:07:52,690
So if you have done previous project, you should already have a CLI.

127
00:07:52,780 --> 00:07:59,680
If you don't have your windows machine, just say choko, install a blue collar.

128
00:08:00,520 --> 00:08:07,000
So say choko, install a plus c ally if you're on windows.

129
00:08:09,860 --> 00:08:14,630
If your MacBook might be a MacBook, then you can just do your book ask install.

130
00:08:16,440 --> 00:08:16,650
Yeah.

131
00:08:16,650 --> 00:08:21,090
Once you have your blue collar installed, then just do a configure.

132
00:08:21,840 --> 00:08:23,930
And set up your access key and secret key.

133
00:08:23,940 --> 00:08:25,220
So we need an user.

134
00:08:25,230 --> 00:08:26,250
We need a user.

135
00:08:26,490 --> 00:08:29,220
So we'll go to a management console.

136
00:08:30,620 --> 00:08:31,820
You go to Imam.

137
00:08:36,990 --> 00:08:37,220
Yeah.

138
00:08:37,230 --> 00:08:38,580
Let's create a user.

139
00:08:39,720 --> 00:08:41,039
Mm.

140
00:08:41,460 --> 00:08:45,670
Tera admin or This one is fine.

141
00:08:45,810 --> 00:08:46,500
Write when.

142
00:08:47,620 --> 00:08:48,940
Programmatic access.

143
00:08:50,050 --> 00:08:53,240
So we're really going to do a lot of things with this user.

144
00:08:53,260 --> 00:08:55,030
We need administrator access.

145
00:08:55,120 --> 00:08:57,370
We're going to access a lot of services.

146
00:09:00,840 --> 00:09:02,700
Let's let's download the credentials.

147
00:09:04,050 --> 00:09:04,320
Okay.

148
00:09:04,320 --> 00:09:05,820
I have my credentials now.

149
00:09:05,820 --> 00:09:07,380
I'm going to copy paste that.

150
00:09:08,630 --> 00:09:13,310
Now, again, I keep reminding to you in every project, do not share your credentials with everyone.

151
00:09:15,800 --> 00:09:17,420
I'm showing you because I have to show.

152
00:09:17,420 --> 00:09:20,570
But anyways, I'm going to delete it once this video is done.

153
00:09:36,850 --> 00:09:41,170
So for now, I'm going to be in a higher region, so I will select that region.

154
00:09:44,650 --> 00:09:45,820
And output format.

155
00:09:45,820 --> 00:09:47,410
JSON should be fine.

156
00:09:48,670 --> 00:09:48,960
Anyways.

157
00:09:49,000 --> 00:09:50,350
We are not going to use a WC.

158
00:09:50,560 --> 00:09:53,650
TerraForm is going to use the credentials of a WC ally.

159
00:09:54,220 --> 00:09:57,160
We should have TerraForm now already installed.

160
00:10:04,620 --> 00:10:04,810
Right.

161
00:10:04,870 --> 00:10:05,730
So TerraForm is there.

162
00:10:06,020 --> 00:10:13,710
We have a client's credential and now we can get start and writing our write our first TerraForm file.

163
00:10:14,460 --> 00:10:21,420
So I'm going to use Sublime text, the simplest ID or editor, but first I'll create some directory.

164
00:10:21,930 --> 00:10:27,780
So in my F drive I'll create a directory terraform hyphen scripts.

165
00:10:29,400 --> 00:10:30,540
And then.

166
00:10:31,910 --> 00:10:34,790
In that I'll create exercise one.

167
00:10:34,790 --> 00:10:36,500
So first exercise.

168
00:10:39,700 --> 00:10:40,660
Okay, great.

169
00:10:40,750 --> 00:10:44,740
I'll open my sublime text editor and we'll start writing the code.

170
00:10:46,250 --> 00:10:50,420
So I'm going to say Open folder and TerraForm scripts.

171
00:10:50,720 --> 00:10:51,590
It should be good.

172
00:10:52,560 --> 00:10:52,700
Yeah.

173
00:10:52,860 --> 00:10:53,400
Exercise one.

174
00:10:53,400 --> 00:10:58,320
Let's write our first file new file, and we will name it as.

175
00:11:00,680 --> 00:11:07,130
My underscore instance dot t f or you can say first instance.

176
00:11:11,520 --> 00:11:15,720
Again, TerraForm is used by so many cloud providers.

177
00:11:15,930 --> 00:11:19,560
You can use it to automate so many cloud providers infrastructure.

178
00:11:20,220 --> 00:11:24,000
So first you have to mention the provider provider.

179
00:11:24,000 --> 00:11:25,230
So we're going to use ADA.

180
00:11:25,530 --> 00:11:31,350
So I'm going to say provider is a plus in double quotes, and then you give the curly brace opening

181
00:11:31,350 --> 00:11:31,860
and closing.

182
00:11:31,860 --> 00:11:35,190
This is important in TerraForm, so there's no indentation here.

183
00:11:35,190 --> 00:11:37,450
There's opening and closing curly braces.

184
00:11:37,680 --> 00:11:40,710
You have to just keep, you know, take care of that apart from that.

185
00:11:40,740 --> 00:11:43,020
Things are very declarative.

186
00:11:43,980 --> 00:11:46,530
Now you can define a region over here.

187
00:11:47,820 --> 00:11:50,640
Region equal to that's the region.

188
00:11:50,640 --> 00:11:52,080
And you can give the region name.

189
00:11:52,590 --> 00:11:58,740
So us is to my region name and you can also define here axis key.

190
00:12:00,890 --> 00:12:03,460
Equal to and your access key.

191
00:12:03,470 --> 00:12:05,840
And also you can define secret key.

192
00:12:06,410 --> 00:12:10,640
This is your IM user access key and secret key, you see.

193
00:12:10,790 --> 00:12:11,050
All right.

194
00:12:11,090 --> 00:12:14,480
But there is always chance of, you know, exposing this, right?

195
00:12:14,930 --> 00:12:16,680
Putting it on public repository.

196
00:12:16,700 --> 00:12:18,370
So don't do this.

197
00:12:18,380 --> 00:12:24,830
If you have already given credentials in our system by using a C ally, and that's much better and much

198
00:12:24,830 --> 00:12:25,460
safer.

199
00:12:27,020 --> 00:12:31,130
So you mentioned the provider, and next thing we are going to define the resource that we're going

200
00:12:31,130 --> 00:12:31,820
to use.

201
00:12:32,420 --> 00:12:34,430
So we have to say resource.

202
00:12:36,430 --> 00:12:38,020
And you give the resource name.

203
00:12:38,020 --> 00:12:38,480
E w.

204
00:12:38,500 --> 00:12:44,470
S underscore instance is the resource to create to access a fabulous instance.

205
00:12:44,740 --> 00:12:49,150
So this is a resource type and then we can give resource a name.

206
00:12:50,270 --> 00:12:52,130
So I can give like intro.

207
00:12:53,310 --> 00:12:57,170
You can give any resource name and then open and close your calibrates.

208
00:12:57,180 --> 00:13:03,930
And in between these two calibrates you give the attributes like EMI is one attribute where you can

209
00:13:03,930 --> 00:13:05,340
give the EMI ID.

210
00:13:05,730 --> 00:13:07,710
So let's find some EMI ID.

211
00:13:08,830 --> 00:13:09,580
That's.

212
00:13:10,460 --> 00:13:11,630
Go easy to.

213
00:13:12,360 --> 00:13:13,680
Launch instance.

214
00:13:15,890 --> 00:13:18,770
And I will go with Amazon Linux.

215
00:13:20,420 --> 00:13:20,710
Okay.

216
00:13:20,750 --> 00:13:22,250
That's the image you will select.

217
00:13:23,810 --> 00:13:25,070
Let's see the amid.

218
00:13:25,670 --> 00:13:26,600
No space there.

219
00:13:27,170 --> 00:13:31,490
And other things like instance type, instance, underscore type.

220
00:13:32,890 --> 00:13:35,080
So we need to to micro.

221
00:13:38,700 --> 00:13:43,380
Other things like availability zone, if you want to mention just just for sake of it.

222
00:13:49,020 --> 00:13:49,430
Okay.

223
00:13:50,430 --> 00:13:51,210
Key Name Login.

224
00:13:51,210 --> 00:13:53,860
Key and key underscore name.

225
00:13:53,890 --> 00:13:55,800
Now we don't have a login key.

226
00:13:56,730 --> 00:13:59,040
If you want, we can create it and then mention it.

227
00:13:59,760 --> 00:14:01,620
I will do that first.

228
00:14:01,620 --> 00:14:05,100
We'll do that manually and then we'll see how we can also create key automatically.

229
00:14:08,420 --> 00:14:09,980
Okay, so let's create a keeper.

230
00:14:13,560 --> 00:14:15,330
I will name it as Dove.

231
00:14:15,900 --> 00:14:17,730
Yeah, just some name.

232
00:14:18,000 --> 00:14:19,000
Dokey.

233
00:14:26,230 --> 00:14:32,620
So I will say my key is dove hyphen key, which the private key is already I have downloaded now.

234
00:14:32,620 --> 00:14:33,070
Right.

235
00:14:35,240 --> 00:14:36,200
Security group.

236
00:14:36,230 --> 00:14:42,740
Security group also will create it now and will give the name of the security group ID, but later we'll

237
00:14:42,740 --> 00:14:43,730
create it automatically.

238
00:14:43,730 --> 00:14:45,320
So let's create a security group.

239
00:14:47,250 --> 00:14:47,700
We'll see.

240
00:14:47,730 --> 00:14:49,620
Dove hyphen sg.

241
00:14:54,380 --> 00:15:01,070
And will give some rule 22 from my IP and C create security group.

242
00:15:01,830 --> 00:15:01,900
Okay.

243
00:15:02,000 --> 00:15:03,410
Copy the security group ID.

244
00:15:07,490 --> 00:15:09,320
So VPC.

245
00:15:09,350 --> 00:15:18,860
Underscore security underscore group underscore I is equal to.

246
00:15:20,190 --> 00:15:21,410
And square bracket.

247
00:15:21,420 --> 00:15:23,250
It's going to be in a list format.

248
00:15:24,990 --> 00:15:26,380
So let's get the sick.

249
00:15:26,400 --> 00:15:26,700
Copy.

250
00:15:26,700 --> 00:15:28,050
The security group ID.

251
00:15:32,050 --> 00:15:35,380
All these attributes are mentioned in TerraForm documentation.

252
00:15:35,380 --> 00:15:37,210
Very well, which I'm going to show you.

253
00:15:39,060 --> 00:15:41,220
But first, let's finish this tax.

254
00:15:44,330 --> 00:15:46,910
And the tag is going to be in a hash format.

255
00:15:47,390 --> 00:15:51,260
Indentations are not mandatory, but it's better you do it.

256
00:15:52,220 --> 00:15:54,410
So you code looks good.

257
00:15:54,740 --> 00:15:56,120
Dove instance.

258
00:15:57,380 --> 00:15:59,480
Okay, so let's save this file now.

259
00:16:01,230 --> 00:16:02,640
Let's go to get back.

260
00:16:03,660 --> 00:16:05,850
So I'm going to have drive.

261
00:16:06,750 --> 00:16:08,280
You have to terraform.

262
00:16:09,260 --> 00:16:10,370
Exercise one.

263
00:16:11,390 --> 00:16:14,520
All right, so that's our script.

264
00:16:16,450 --> 00:16:16,600
Okay.

265
00:16:16,720 --> 00:16:20,950
First thing, what you do is you run the command, terraform in it.

266
00:16:21,850 --> 00:16:25,600
Now you can do this through PowerShell Command, Prompt terminal, anywhere you want.

267
00:16:25,960 --> 00:16:27,360
I just find it from good batch.

268
00:16:27,370 --> 00:16:31,630
Little convenient so I can version control it also quickly from here if I want.

269
00:16:32,170 --> 00:16:38,290
So I'm just going to run TerraForm in it and this is going to check my provider that is eight and it's

270
00:16:38,290 --> 00:16:42,310
going to download the plugins for us in the current working directory.

271
00:16:44,480 --> 00:16:45,020
Yeah.

272
00:16:45,070 --> 00:16:45,770
There you go.

273
00:16:47,800 --> 00:16:51,250
If you do a less hyphen, you'll find a dot terraform directory.

274
00:16:51,370 --> 00:16:53,140
I don't directory in that.

275
00:16:53,140 --> 00:16:53,870
You can check.

276
00:16:53,890 --> 00:16:55,480
You should have plug ins.

277
00:17:00,310 --> 00:17:06,250
Before we really execute, we are going to do some validation for code will say TerraForm validate,

278
00:17:06,400 --> 00:17:11,859
which will syntactically check our code and will give you some errors if there are.

279
00:17:13,890 --> 00:17:17,310
Okay, so I'm going to make some syntax error.

280
00:17:17,760 --> 00:17:19,440
The double code is removed.

281
00:17:22,420 --> 00:17:24,339
And let's do TerraForm Validate.

282
00:17:26,910 --> 00:17:31,680
You see, I'm getting an error over there because I've missed the double quotes over there.

283
00:17:31,680 --> 00:17:37,170
The value of key underscore name is a string, but I have just given just like that without any double

284
00:17:37,170 --> 00:17:37,760
quotes.

285
00:17:37,770 --> 00:17:39,560
So that's a syntax error.

286
00:17:39,570 --> 00:17:40,680
Syntax error.

287
00:17:41,590 --> 00:17:44,510
Now I can see that all of you missed some options.

288
00:17:44,510 --> 00:17:50,360
If there is any syntax error, it's not going to check any remote resources, just going to do a syntax

289
00:17:50,360 --> 00:17:50,840
check.

290
00:17:52,750 --> 00:17:53,440
This is success.

291
00:17:53,440 --> 00:17:55,420
So that's the benefit of validating.

292
00:17:56,250 --> 00:17:56,490
Right.

293
00:17:56,590 --> 00:18:04,150
There's also one more option you can use after this FMT format, so it will format your TerraForm code

294
00:18:04,150 --> 00:18:10,140
or should I say rewrite in a in its what it sees as canonical format and style.

295
00:18:10,150 --> 00:18:10,600
Right.

296
00:18:11,280 --> 00:18:12,780
So nothing really, you know?

297
00:18:12,930 --> 00:18:18,510
No, it's just going to change the format, the style, like, you know, space and all those things.

298
00:18:19,840 --> 00:18:22,880
First instance for us didn't do anything.

299
00:18:23,170 --> 00:18:24,010
You see that?

300
00:18:24,780 --> 00:18:26,610
It's all equal to that line now.

301
00:18:27,500 --> 00:18:28,670
Yeah, you can see that.

302
00:18:28,920 --> 00:18:30,830
That's the format Fmt.

303
00:18:31,100 --> 00:18:32,790
So it makes your code more readable.

304
00:18:32,810 --> 00:18:37,010
I recommend you run TerraForm FMT before you actually do an execution.

305
00:18:37,010 --> 00:18:39,200
So we did TerraForm in it.

306
00:18:39,320 --> 00:18:40,550
TerraForm Validate.

307
00:18:40,580 --> 00:18:42,260
TerraForm for FMT.

308
00:18:42,710 --> 00:18:44,840
Now TerraForm Plan.

309
00:18:47,750 --> 00:18:49,270
Plan is not going to do anything.

310
00:18:49,280 --> 00:18:50,900
It's just going to show you that.

311
00:18:51,930 --> 00:18:53,790
Well, what will be the execution?

312
00:18:54,000 --> 00:18:55,610
It's just going to give you, like, a preview.

313
00:18:55,650 --> 00:18:57,570
What will happen if you apply this?

314
00:18:58,460 --> 00:19:04,760
Okay, So it's going to show you this plus means the addition TerraForm will perform the following action.

315
00:19:04,970 --> 00:19:11,530
So it's going to this instance is going to launch and there are all the attributes like this is the

316
00:19:11,540 --> 00:19:17,180
my ID is taking the instance type and other thing which we'll get after we apply this.

317
00:19:18,820 --> 00:19:18,910
Right.

318
00:19:19,030 --> 00:19:22,240
If you're good with all those things, you can see TerraForm apply.

319
00:19:22,390 --> 00:19:27,820
If TerraForm is deleting anything, it will also tell you that you know what it is really going to delete

320
00:19:27,820 --> 00:19:29,620
or delete and recreate.

321
00:19:30,520 --> 00:19:31,930
So terraform apply finally.

322
00:19:31,930 --> 00:19:33,280
And then you say Yes.

323
00:19:35,040 --> 00:19:40,650
Now I've given you so many commands, you can directly jump and start and jump and write TerraForm apply.

324
00:19:40,770 --> 00:19:45,460
Yeah, but it's better to first validate, have proper format, right?

325
00:19:45,570 --> 00:19:51,450
And then check your plan, what it's going to do, and then do the actual execution in a proper way.

326
00:19:52,410 --> 00:19:54,120
Okay, so it's launching easy.

327
00:19:54,120 --> 00:19:55,770
For instance, let's go and check.

328
00:19:58,410 --> 00:20:02,700
Now you see there, it's launching incidents and it has given the right tag as well.

329
00:20:03,390 --> 00:20:04,970
Name of instance.

330
00:20:04,990 --> 00:20:05,490
Right.

331
00:20:05,640 --> 00:20:10,350
Security group, which would have taken down security group and also the key.

332
00:20:12,670 --> 00:20:13,430
Keep it.

333
00:20:13,450 --> 00:20:13,960
Name?

334
00:20:13,960 --> 00:20:14,740
Dove Key.

335
00:20:15,950 --> 00:20:16,830
Okay, That's good.

336
00:20:16,840 --> 00:20:17,680
It's in a running state.

337
00:20:17,680 --> 00:20:19,300
Let's see what's happening here.

338
00:20:19,510 --> 00:20:22,000
It says it completed successfully.

339
00:20:22,920 --> 00:20:23,310
Kemp.

340
00:20:24,030 --> 00:20:26,400
Okay, now we'll make a little change.

341
00:20:27,630 --> 00:20:28,410
Very simple change.

342
00:20:28,410 --> 00:20:33,210
We'll just change tag or we'll add extra tag and we'll see what happens.

343
00:20:34,230 --> 00:20:36,090
Give a tag called us project.

344
00:20:40,620 --> 00:20:41,310
Duff.

345
00:20:42,420 --> 00:20:42,810
Okay.

346
00:20:42,820 --> 00:20:43,320
I'm going to see you.

347
00:20:43,320 --> 00:20:43,430
And.

348
00:20:43,440 --> 00:20:43,620
Good.

349
00:20:43,890 --> 00:20:46,380
You can do it through Sublime also if you want.

350
00:20:48,480 --> 00:20:48,720
Okay.

351
00:20:48,720 --> 00:20:49,890
I made the change.

352
00:20:51,290 --> 00:20:52,080
All right, let's see.

353
00:20:53,250 --> 00:20:53,580
Yeah.

354
00:20:53,580 --> 00:20:54,480
Extra things.

355
00:20:54,480 --> 00:20:55,890
I have added extra tag.

356
00:20:57,350 --> 00:20:58,490
Let's do TerraForm.

357
00:20:58,520 --> 00:20:59,480
Validate.

358
00:21:03,050 --> 00:21:03,910
Okay, good.

359
00:21:03,920 --> 00:21:07,670
It's a success TerraForm Fmt format.

360
00:21:08,770 --> 00:21:10,690
Okay, Let's see if it changed anything.

361
00:21:11,020 --> 00:21:11,710
You see that?

362
00:21:13,600 --> 00:21:15,260
Aligned the equal to theirs.

363
00:21:15,280 --> 00:21:15,830
Right.

364
00:21:15,850 --> 00:21:17,710
It was not like this.

365
00:21:18,820 --> 00:21:20,260
Yeah, but now it's a line That's.

366
00:21:20,260 --> 00:21:21,640
That's what FMT does.

367
00:21:22,700 --> 00:21:24,250
TerraForm Plan.

368
00:21:25,970 --> 00:21:29,680
They always recommend you run a plan before you apply anything.

369
00:21:30,480 --> 00:21:36,470
Okay, because there are a lot of benefits with TerraForm, but one very, you know, huge drawback

370
00:21:36,480 --> 00:21:42,930
or should I don't want to say drawback but you know, if you if you're not careful and you made some

371
00:21:42,930 --> 00:21:46,770
changes, it can also delete your resource and recreate it.

372
00:21:46,800 --> 00:21:48,360
It could be very dangerous.

373
00:21:48,360 --> 00:21:50,100
Think about this instance.

374
00:21:50,250 --> 00:21:55,320
You made some changes and it's going to delete the instance ideas instance and recreate it to apply

375
00:21:55,320 --> 00:21:56,070
the changes.

376
00:21:56,100 --> 00:21:58,590
You lose all your data, right?

377
00:21:58,590 --> 00:22:02,100
So always do terraform a plan and see what it is going to do.

378
00:22:02,100 --> 00:22:03,510
It's going to do one change.

379
00:22:03,510 --> 00:22:05,900
No additions, zero destroy.

380
00:22:05,910 --> 00:22:07,260
So we are safe.

381
00:22:07,350 --> 00:22:10,140
Let's do terraform apply.

382
00:22:11,980 --> 00:22:13,960
And I'll say, yes, apply it.

383
00:22:21,050 --> 00:22:21,650
All right.

384
00:22:21,650 --> 00:22:22,820
That made the changes.

385
00:22:22,820 --> 00:22:25,340
You can check from the console refresh.

386
00:22:26,750 --> 00:22:28,110
Let's go to tags.

387
00:22:28,130 --> 00:22:28,660
Come on.

388
00:22:28,670 --> 00:22:30,050
Tags with our tags.

389
00:22:31,280 --> 00:22:32,150
Dags.

390
00:22:33,370 --> 00:22:33,820
Project.

391
00:22:33,830 --> 00:22:34,960
You see new tag.

392
00:22:35,770 --> 00:22:40,240
So TerraForm really maintains the state of your infrastructure.

393
00:22:40,810 --> 00:22:47,170
If you do less here from where you executed TerraForm, there are files that are form of state file

394
00:22:47,170 --> 00:22:48,670
if you see this file.

395
00:22:49,510 --> 00:22:50,980
It's all the content.

396
00:22:51,960 --> 00:22:53,730
How about your easy to instance?

397
00:22:54,720 --> 00:22:58,260
Right amid availability zone CPU core count.

398
00:22:58,260 --> 00:23:02,070
So the current state of your ESI two instance is all over here.

399
00:23:03,060 --> 00:23:04,260
In JSON format.

400
00:23:05,100 --> 00:23:05,380
Right.

401
00:23:05,420 --> 00:23:08,960
So it compares the this state with your remote state.

402
00:23:08,960 --> 00:23:11,750
If there are any differences, it will apply the differences.

403
00:23:12,720 --> 00:23:13,100
Okay.

404
00:23:13,110 --> 00:23:16,530
And this also terraform TFS state backup file.

405
00:23:16,580 --> 00:23:16,920
Right?

406
00:23:16,920 --> 00:23:22,680
When I say TerraForm maintain state, I mean to say this, it really maintains the state in a file.

407
00:23:23,220 --> 00:23:29,610
Later we'll also see how we can keep keep this state file in a centralized location like an S3 bucket.

408
00:23:30,360 --> 00:23:30,720
Okay.

409
00:23:30,840 --> 00:23:34,770
That solve in this exercise, we'll do one final thing you're going to destroy.

410
00:23:35,580 --> 00:23:38,170
We can set terraform, destroy to delete our resource.

411
00:23:38,170 --> 00:23:40,890
So TerraForm Destroy is going to read your current state.

412
00:23:40,920 --> 00:23:45,180
You have an instance and it will say, Yes, I will destroy that.

413
00:23:45,180 --> 00:23:46,290
Are you okay with that?

414
00:23:46,890 --> 00:23:48,600
And I will say, Yes, I'm okay.

415
00:23:48,870 --> 00:23:52,680
Destroy c one to destroy.

416
00:23:56,870 --> 00:23:58,420
Okay, so let's summarize.

417
00:23:58,430 --> 00:24:01,520
We have written an easy to institute instant study of file.

418
00:24:01,550 --> 00:24:02,500
We launched the instance.

419
00:24:02,510 --> 00:24:05,030
We made some changes and we applied the changes.

420
00:24:06,350 --> 00:24:11,630
So we have instance dot file is one file for now, which has the instance information.

421
00:24:12,540 --> 00:24:16,240
And also the provider, Oedipus Cam.

422
00:24:17,100 --> 00:24:18,460
So there are some apply.

423
00:24:18,480 --> 00:24:25,530
Remember before you before you apply TerraForm do TerraForm plan so you can see what is getting ADD

424
00:24:25,530 --> 00:24:27,120
and what is getting removed.

425
00:24:29,640 --> 00:24:33,060
So once you're good with the plan, then you can say TerraForm apply.

426
00:24:33,570 --> 00:24:35,190
We shall apply all your changes.

427
00:24:35,190 --> 00:24:36,450
Maintain the state.

428
00:24:37,170 --> 00:24:41,730
Once you're done with the exercise, you can say TerraForm, destroy, and it will destroy what you

429
00:24:41,730 --> 00:24:42,720
created.

430
00:24:43,350 --> 00:24:45,120
That's all in this exercise.

431
00:24:45,390 --> 00:24:47,490
We'll then move to the next exercise.

