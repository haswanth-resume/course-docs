1
00:00:00,620 --> 00:00:06,800
In this section, we're going to talk about TerraForm Provisioning, what you can do in TerraForm to

2
00:00:06,800 --> 00:00:10,310
provision the task once your operating system is up.

3
00:00:11,470 --> 00:00:15,280
We used to have provisioning to do things like building image.

4
00:00:16,100 --> 00:00:16,730
With Packer.

5
00:00:16,730 --> 00:00:20,840
So when you're building the image, you really need to provision all the things you need to install

6
00:00:20,840 --> 00:00:26,750
software's push files, you need to do all those things so you can use provisioning for that purpose.

7
00:00:27,920 --> 00:00:28,580
Or in general.

8
00:00:28,580 --> 00:00:32,810
Also you want to provision an instance with some packages, some files.

9
00:00:32,810 --> 00:00:33,800
You can do that.

10
00:00:34,340 --> 00:00:36,800
You can upload some files like artifact.

11
00:00:38,030 --> 00:00:44,570
You can use a remote exec option in provisioning to execute task remotely on any instance.

12
00:00:44,660 --> 00:00:49,400
So you just launch the instance, you can say remote exec yum, install or APT install some package

13
00:00:49,400 --> 00:00:51,860
or even cocoa install if it's a windows machine.

14
00:00:52,840 --> 00:00:57,100
You can also use provisionals like Ansible Puppet or Chef Puppet and chef.

15
00:00:57,130 --> 00:01:00,000
You have the out of the box feature in this.

16
00:01:00,010 --> 00:01:01,810
It will set up a puppet client or chef client.

17
00:01:01,810 --> 00:01:06,580
In Ansible, you don't have client master relationships, so you can just use your Ansible playbook

18
00:01:06,580 --> 00:01:09,520
and run your ansible playbooks with just remote exec.

19
00:01:10,780 --> 00:01:11,650
To do provisioning.

20
00:01:11,650 --> 00:01:17,620
We need to give connection details like how will we provision will do access to a Linux machine when

21
00:01:17,620 --> 00:01:22,980
arm to Windows machine and we'll open PowerShell or bash Shell in Linux and we'll execute our command.

22
00:01:22,990 --> 00:01:25,440
So TerraForm also needs detail for that.

23
00:01:25,450 --> 00:01:29,140
If you want to do a search or not, you need to provide details.

24
00:01:30,040 --> 00:01:30,990
So sample this.

25
00:01:31,000 --> 00:01:38,620
You want to push a file, you can use provisional file resource source you the source file destination

26
00:01:38,620 --> 00:01:40,060
where you want to push.

27
00:01:40,300 --> 00:01:44,830
So source file obviously existing in your machine destination is going to be the easy to instance directory.

28
00:01:45,620 --> 00:01:50,930
In order to do that, TerraForm needs the connection details so we can provide that connection.

29
00:01:50,930 --> 00:01:52,280
And this is going to be the same.

30
00:01:52,280 --> 00:01:54,740
BLOCK We're going to give a connection detail.

31
00:01:55,220 --> 00:02:01,370
So it's a Linux machine, so you can say type, search, user username, password, and you can give

32
00:02:01,370 --> 00:02:03,290
the password the variable you define.

33
00:02:04,010 --> 00:02:08,539
And if it's a new machine, you are going to do, log in with the key, obviously, so you can provide

34
00:02:08,539 --> 00:02:10,340
the key also instead of password.

35
00:02:10,970 --> 00:02:14,540
And in windows side, you have the same thing you want to do.

36
00:02:15,360 --> 00:02:19,830
Now you want to push a file, you can use the same resource file, but connection is going to be different

37
00:02:19,860 --> 00:02:24,270
type item, user username and the password will be the password.

38
00:02:25,080 --> 00:02:29,490
So in order to push a file, you need to provide the connection detail based on the operating system.

39
00:02:30,420 --> 00:02:31,950
You have more probationers.

40
00:02:31,980 --> 00:02:35,040
File is just one that we have seen here previously.

41
00:02:35,220 --> 00:02:38,570
Pushing a file with your other provisions like remote exec.

42
00:02:38,580 --> 00:02:40,560
You want to run some command?

43
00:02:40,560 --> 00:02:46,470
So let's say with file proof, more file resource, you push your script and with remote execute and

44
00:02:46,470 --> 00:02:47,700
execute that script.

45
00:02:48,270 --> 00:02:49,740
Or you can execute any command.

46
00:02:50,340 --> 00:02:55,260
Local exec is to execute task locally from where you are running TerraForm.

47
00:02:58,580 --> 00:03:01,240
So these are the general provisions, but we have more provisions.

48
00:03:01,280 --> 00:03:06,260
You can use Puppet as a provision where it will install a puppet agent on the remote machine.

49
00:03:06,680 --> 00:03:12,890
And based on the operating system, it can use a search or binary chef provision that we have.

50
00:03:12,890 --> 00:03:15,380
So it's going to install chef client.

51
00:03:15,890 --> 00:03:20,690
And again, based on the operating system, it can use as a search or wine item to install that client.

52
00:03:21,020 --> 00:03:25,090
If you're going to use Ansible, then you know how simple it is to run an Ansible playbook.

53
00:03:25,100 --> 00:03:31,040
You can use a remote exec or local exec, local exec to force to get the IP address, and then you can

54
00:03:31,040 --> 00:03:34,550
say Ansible playbook and you can give the playbook name.

55
00:03:35,180 --> 00:03:36,950
So it's very easy to read with Ansible.

56
00:03:36,950 --> 00:03:37,520
Really.

57
00:03:37,940 --> 00:03:41,900
There are a few other things that we need in order to run our provisioning.

58
00:03:42,710 --> 00:03:48,020
So in variables you can define things like the private key file path and the public key file path.

59
00:03:48,020 --> 00:03:54,740
So we're going to generate keys first locally and by TerraForm, we're going to push the public key

60
00:03:54,740 --> 00:03:56,810
to our cloud account.

61
00:03:57,140 --> 00:04:04,250
So in order to use these file names in our instance file, we can define variables so we can very easily

62
00:04:04,250 --> 00:04:04,850
access them.

63
00:04:04,850 --> 00:04:07,310
Also the username for the connection.

64
00:04:10,760 --> 00:04:13,670
So we can create the key pair.

65
00:04:14,770 --> 00:04:18,040
Locally, we can run like a search kitchen.

66
00:04:18,040 --> 00:04:23,350
We'll generate the key pair and then we'll push the public key to our account.

67
00:04:23,350 --> 00:04:27,080
So for that we're going to say resource plus underscore, key, underscore, pair.

68
00:04:27,100 --> 00:04:30,520
That's the resource name, that's the resource type.

69
00:04:30,520 --> 00:04:31,750
And this is the resource name.

70
00:04:31,750 --> 00:04:32,890
You can give any resource name.

71
00:04:32,890 --> 00:04:34,420
I've given down hyphen key here.

72
00:04:35,360 --> 00:04:41,090
You give the keenum, the private Keenum or just the Keenum of key and this is the name of the key that

73
00:04:41,090 --> 00:04:42,860
will be there in the cloud account.

74
00:04:42,890 --> 00:04:43,790
You can see that.

75
00:04:44,730 --> 00:04:49,270
The public key that we want to upload to a plus account.

76
00:04:49,290 --> 00:04:51,380
So public underscore key equal to file.

77
00:04:51,390 --> 00:04:53,960
So you have to give the content of the public key.

78
00:04:53,970 --> 00:04:58,620
And instead of giving the content, you can use a function in TerraForm called this file function.

79
00:04:58,890 --> 00:05:01,020
You say file and you give a file path.

80
00:05:01,020 --> 00:05:07,680
It will open that file or read that file content, and that content can be stored into this variable.

81
00:05:07,980 --> 00:05:13,540
So this resource is going to create a public key on our account, right?

82
00:05:13,650 --> 00:05:16,650
Private key will be still with us because we generated it locally.

83
00:05:17,150 --> 00:05:23,910
Then we can refer this key in our instance resource so we can see instance instance, name, RMI, instance

84
00:05:23,910 --> 00:05:26,730
type, availability, zone key underscore name.

85
00:05:26,730 --> 00:05:29,460
We are giving a plus, underscore key underscore pair.

86
00:05:29,880 --> 00:05:36,180
That's the resource type which is over here that we have defined dot dove hyphen key dot key underscore

87
00:05:36,180 --> 00:05:36,660
name.

88
00:05:37,900 --> 00:05:46,150
So A.W. underscore key underscore dot dove hyphen key dot key name which will return this dove key.

89
00:05:46,750 --> 00:05:52,240
So we create the key pair here and then we refer it in our to instance like this or easy to resource

90
00:05:52,240 --> 00:05:52,960
like this.

91
00:05:53,620 --> 00:06:01,150
So new things that you have seen now is one is the resource key pair a file function in TerraForm that

92
00:06:01,150 --> 00:06:06,160
can read a file and then how to access a resource from other resource.

93
00:06:07,040 --> 00:06:07,220
All right.

94
00:06:07,250 --> 00:06:09,080
We want to access this, Dulcie.

95
00:06:10,300 --> 00:06:13,450
This value so we can access the key underscore name properties.

96
00:06:13,630 --> 00:06:19,840
So we have to give the resource type, dot, resource name, dot the attribute or the property, and

97
00:06:19,840 --> 00:06:23,650
that will return the value of key based on the same concept.

98
00:06:23,650 --> 00:06:25,720
Let's see one more resource definition.

99
00:06:26,840 --> 00:06:29,310
So we want to push a file.

100
00:06:29,330 --> 00:06:35,510
So it's a provisional file source file web dot search, which is a shell script destination.

101
00:06:35,510 --> 00:06:40,670
So we want to push this shell script and we have to mention the connection detail.

102
00:06:43,860 --> 00:06:46,790
Okay, so the connection detail is user var dot user.

103
00:06:46,800 --> 00:06:49,440
We have a variable there, private key.

104
00:06:49,440 --> 00:06:51,360
So we're not going to give password.

105
00:06:51,600 --> 00:06:53,550
We just provision an instance with a new key.

106
00:06:53,550 --> 00:06:56,850
So we need to give the key, but the content of the key.

107
00:06:56,850 --> 00:07:03,690
So private underscore key equal to five function and the file name, which is again a variable here.

108
00:07:04,200 --> 00:07:08,670
And these variables are defined in the variable file, right?

109
00:07:08,700 --> 00:07:12,540
So variable private underscore key underscore path, that's the file name.

110
00:07:12,540 --> 00:07:15,330
So it's going to open up that file and.

111
00:07:16,480 --> 00:07:21,760
But in the content of the private keys, it's going to use this private key and this user via dot user

112
00:07:21,760 --> 00:07:26,050
is defined here to login to easy to instance and push this file.

113
00:07:27,500 --> 00:07:31,450
The important thing here is you have to define the host.

114
00:07:31,460 --> 00:07:36,590
So the resource which gets created, that in-situ instance gets created.

115
00:07:36,620 --> 00:07:38,570
We will have the public IP of it.

116
00:07:38,570 --> 00:07:45,200
We can say self dot, public IP or the private IP, whatever connection you prefer based on where you

117
00:07:45,200 --> 00:07:47,510
are executing TerraForm, you can get the IP.

118
00:07:48,250 --> 00:07:52,810
And it's going to use that IP, that username and key to login and push this file.

119
00:07:53,950 --> 00:07:55,450
Kept coming back.

120
00:07:55,450 --> 00:07:56,440
Going back.

121
00:07:57,690 --> 00:08:02,100
We create the key public key enables account launch the instance.

122
00:08:02,340 --> 00:08:05,040
Then with file provisioning, we're going to push the file.

123
00:08:05,160 --> 00:08:06,740
There are connection details.

124
00:08:06,750 --> 00:08:09,090
Variables are mentioned in the variables file.

125
00:08:09,760 --> 00:08:11,170
Now we push the shelf script.

126
00:08:11,170 --> 00:08:14,410
Now we want to execute it so we can use a remote exec.

127
00:08:15,700 --> 00:08:17,800
So we can see a provisional remote exec.

128
00:08:18,310 --> 00:08:25,690
And then in the places in line equal to square bracket in a list format, we're going to give a list

129
00:08:25,690 --> 00:08:26,680
of commands.

130
00:08:27,280 --> 00:08:32,890
And the first command, I'm saying give execute permission to my shell script and then pseudo part of

131
00:08:32,890 --> 00:08:34,960
the Shell script, which will execute the script.

132
00:08:35,919 --> 00:08:37,240
So it will hear three steps.

133
00:08:37,240 --> 00:08:42,039
First launch instance with the key, create the key, launch the instance.

134
00:08:42,070 --> 00:08:46,500
Second, push the shell script with local exec sorry with file provision.

135
00:08:46,750 --> 00:08:50,110
Third remote exec and execute your script.

136
00:08:51,090 --> 00:08:51,420
Okay.

137
00:08:51,450 --> 00:08:53,490
Let's check out exercise again.

138
00:08:55,770 --> 00:08:59,160
So we're going to generate key payer first screen locally.

139
00:08:59,550 --> 00:09:04,800
Then we'll write a script which can do some task installing packages and stuff.

140
00:09:05,730 --> 00:09:07,200
We like provide a file.

141
00:09:07,200 --> 00:09:10,950
When we mention a provider, we'll write Vasco file.

142
00:09:10,950 --> 00:09:12,810
We'll mention all our variables.

143
00:09:14,230 --> 00:09:15,820
We let instance dot to file.

144
00:09:15,820 --> 00:09:21,910
We'll create the key pair in this key in this private upload the public key in this and launch the instance.

145
00:09:23,650 --> 00:09:28,980
That's a keeper resource plus instance resource will mention in this and provision will mention.

146
00:09:30,570 --> 00:09:36,330
So we have one provision that as file, we're going to push our shell script there and then remote exec

147
00:09:36,330 --> 00:09:38,520
provisioning which will execute our Shell script.

148
00:09:39,120 --> 00:09:41,610
And then we're going to apply the changes.

149
00:09:42,570 --> 00:09:44,070
Let's see this exercise now.

150
00:09:45,320 --> 00:09:46,780
So this is going to be extreme.

151
00:09:46,790 --> 00:09:48,080
Let's create a directory.

152
00:09:54,640 --> 00:09:56,900
In this access three directory will create key pair.

153
00:09:56,920 --> 00:10:00,730
So let's go to that directory.

154
00:10:04,080 --> 00:10:06,750
So I'll say search hyphen kitchen.

155
00:10:10,640 --> 00:10:12,200
Said dove key.

156
00:10:16,900 --> 00:10:18,940
So I'll just say for Stacy's kitchen.

157
00:10:20,140 --> 00:10:26,770
It will ask me the file name and here I can give it dove key in the current directory I will create.

158
00:10:29,210 --> 00:10:32,720
I guess I should have a public key and a private key.

159
00:10:38,070 --> 00:10:38,640
We see there.

160
00:10:38,640 --> 00:10:41,160
That's our private key and that's our public key.

161
00:10:41,620 --> 00:10:42,050
It's okay.

162
00:10:42,060 --> 00:10:43,200
We don't need to open it.

163
00:10:43,650 --> 00:10:45,720
We'll create the variables file first.

164
00:10:52,380 --> 00:10:56,910
So we're going to define three variables again, Region Zone and AMIS.

165
00:10:57,850 --> 00:11:00,310
And later, we're going to update it with few more variables.

166
00:11:00,310 --> 00:11:01,560
But that's all for now.

167
00:11:01,570 --> 00:11:02,440
There's three variables.

168
00:11:02,440 --> 00:11:06,100
For now, of course, the private cloud providers are.

169
00:11:13,640 --> 00:11:20,810
Just the region in the providers provider region variable, which is going to be us, is to one.

170
00:11:20,810 --> 00:11:22,400
That variable is defined here.

171
00:11:22,970 --> 00:11:24,620
We'll also write a shell script.

172
00:11:24,620 --> 00:11:26,240
We will see a new file.

173
00:11:27,390 --> 00:11:30,720
And we named the script as Web dot search.

174
00:11:32,110 --> 00:11:34,780
So we're going to provision our instance with this script.

175
00:11:37,110 --> 00:11:39,510
So we're going to install three packages.

176
00:11:39,510 --> 00:11:45,230
We're going to provision Amazon Linux so we can use them to install software's start and enable extra

177
00:11:45,240 --> 00:11:46,020
DVD service.

178
00:11:46,020 --> 00:11:53,190
Then it's going to download a template like an artifact which has its HTML content, unzip it, copy

179
00:11:53,190 --> 00:11:56,730
all the content to the HTML and restart the service.

180
00:11:57,360 --> 00:11:59,640
So we'll provision our instance with this script.

181
00:12:00,450 --> 00:12:01,470
Let's see that.

182
00:12:02,380 --> 00:12:04,420
See the software providers dot.

183
00:12:06,100 --> 00:12:09,130
Finally, let's create our instance data file.

184
00:12:15,780 --> 00:12:17,850
And this will mention our instance detail.

185
00:12:18,510 --> 00:12:20,680
First, we're going to create the key pair.

186
00:12:20,700 --> 00:12:22,480
So the re source is E.

187
00:12:22,800 --> 00:12:26,400
S underscore key underscore pair.

188
00:12:27,240 --> 00:12:29,040
And let's cue some name.

189
00:12:29,200 --> 00:12:30,670
I say dove key.

190
00:12:30,690 --> 00:12:32,310
Dove hyphen key.

191
00:12:35,610 --> 00:12:38,310
So keep in mind, this is just the name of the reserve resource.

192
00:12:38,310 --> 00:12:43,350
We can use it to refer to it in our next task or our next next resource.

193
00:12:43,650 --> 00:12:45,630
This will not be the name of the key.

194
00:12:45,990 --> 00:12:53,580
And to prove that I'm going to give a key name different, like it's a key underscore name.

195
00:12:55,060 --> 00:12:57,400
And I said, Duckie, no hyphen.

196
00:12:57,400 --> 00:13:01,600
So you will see the key on the plus gets created with this name and not this name.

197
00:13:01,780 --> 00:13:03,340
This is just the reference name.

198
00:13:05,450 --> 00:13:08,210
I guess the public key that you want to upload.

199
00:13:08,450 --> 00:13:12,300
So going to say public underscore key equal to.

200
00:13:12,320 --> 00:13:14,390
So to give the content of the public key.

201
00:13:14,390 --> 00:13:14,560
Right.

202
00:13:14,570 --> 00:13:17,540
So ideally it should be like this in double code we should give.

203
00:13:19,620 --> 00:13:20,730
All this content.

204
00:13:23,400 --> 00:13:23,640
All right.

205
00:13:23,640 --> 00:13:25,020
We should be giving this.

206
00:13:25,460 --> 00:13:25,550
Right?

207
00:13:25,590 --> 00:13:26,910
But that's too much.

208
00:13:27,150 --> 00:13:27,750
All right.

209
00:13:27,870 --> 00:13:31,950
So instead of doing that, we'll write a function.

210
00:13:32,370 --> 00:13:36,000
There is a function called a file function, which will just read the file.

211
00:13:36,830 --> 00:13:41,390
And we give the name of the file Dove Kee Dot pub.

212
00:13:44,770 --> 00:13:46,480
Should be exactly same name.

213
00:13:47,130 --> 00:13:47,320
All right.

214
00:13:47,320 --> 00:13:52,960
So it's going to open that file and we don't need to put the entire content that should upload the public

215
00:13:52,960 --> 00:13:53,380
key.

216
00:13:54,350 --> 00:13:58,520
Now the insurance resource, same as the previous exercises.

217
00:13:58,880 --> 00:14:03,830
The instance name will give different dove hyphen instance.

218
00:14:07,250 --> 00:14:07,780
All right.

219
00:14:07,900 --> 00:14:13,810
So the EMI, which will be coming from the variables file map variable instance type availability zone

220
00:14:13,810 --> 00:14:16,060
again, variable coming from variables file.

221
00:14:18,120 --> 00:14:19,080
The key name.

222
00:14:19,080 --> 00:14:21,150
So key underscore name.

223
00:14:21,420 --> 00:14:26,280
Now we really know, like right here and we can just directly say dove key over here.

224
00:14:27,110 --> 00:14:29,220
And we can give like, dove key.

225
00:14:29,240 --> 00:14:30,140
We can do that.

226
00:14:35,050 --> 00:14:36,400
Not Dfki Duff.

227
00:14:37,930 --> 00:14:42,040
Yeah, but I'll show you how you can access a particular.

228
00:14:42,830 --> 00:14:46,610
Attribute a parameter from a resource to do that.

229
00:14:48,550 --> 00:14:50,710
You give the resource type that you're using.

230
00:14:52,980 --> 00:14:56,490
Dot the resource name that you have given to that resource.

231
00:14:57,630 --> 00:14:59,490
Like I have given dev hyphen key here.

232
00:15:00,690 --> 00:15:01,530
Dot.

233
00:15:02,460 --> 00:15:03,780
The attribute name.

234
00:15:06,400 --> 00:15:08,590
Which is going to return us this.

235
00:15:09,100 --> 00:15:11,860
I will say it would be really simple if we just give dove cure there.

236
00:15:11,860 --> 00:15:12,040
Right?

237
00:15:12,040 --> 00:15:14,590
But that's the name we have given.

238
00:15:14,590 --> 00:15:16,420
Maybe if it's a variable, then what?

239
00:15:16,780 --> 00:15:17,360
All right.

240
00:15:17,380 --> 00:15:22,000
Or even if you want to like that, refer a resource from one resource to other resource.

241
00:15:22,000 --> 00:15:25,870
Any attribute you want to refer, then you should know how to do it.

242
00:15:27,260 --> 00:15:28,360
I know those standard things.

243
00:15:28,370 --> 00:15:30,110
Security group ID tag.

244
00:15:30,140 --> 00:15:31,040
That should be it.

245
00:15:31,550 --> 00:15:32,450
Save it.

246
00:15:33,080 --> 00:15:37,040
Now, that should provision our instance, but we just don't want to provision the instance.

247
00:15:37,040 --> 00:15:39,560
So we don't just want to launch the instance.

248
00:15:39,560 --> 00:15:42,380
You want to really provision it with our shell script.

249
00:15:42,380 --> 00:15:42,890
Right.

250
00:15:43,070 --> 00:15:44,900
To do that again.

251
00:15:45,900 --> 00:15:53,310
You have to be in the same resource block area block instance, resource block, da instance, like

252
00:15:53,310 --> 00:15:54,930
you're giving EMI instance type.

253
00:15:54,960 --> 00:15:55,590
Same way here.

254
00:15:55,590 --> 00:15:59,160
You have to give the detail of provision so you can see a provision for.

255
00:16:01,620 --> 00:16:02,910
And a provisional.

256
00:16:02,910 --> 00:16:07,020
We are using this file provisional, which is used to upload files.

257
00:16:08,640 --> 00:16:10,410
And we have to give source.

258
00:16:11,160 --> 00:16:14,730
So we have a shell script in the same directory.

259
00:16:14,730 --> 00:16:16,190
So we're just going to give the name.

260
00:16:16,200 --> 00:16:18,210
You can give the absolute path also.

261
00:16:19,670 --> 00:16:20,840
Destination.

262
00:16:25,310 --> 00:16:26,300
Destination.

263
00:16:28,430 --> 00:16:31,820
So I would like to push it at the temp location.

264
00:16:36,170 --> 00:16:39,720
That should push this script, but it needs the connection detail.

265
00:16:39,740 --> 00:16:40,930
How is it going to connect to that?

266
00:16:40,940 --> 00:16:41,960
Easy to instance?

267
00:16:42,960 --> 00:16:46,380
So we are going to give the connection, detail, connection.

268
00:16:51,300 --> 00:16:52,230
User.

269
00:16:53,190 --> 00:16:54,760
So we already know the user.

270
00:16:54,810 --> 00:16:56,940
We can put this into the variables file.

271
00:16:57,390 --> 00:16:59,610
We can create another variable over here.

272
00:17:08,430 --> 00:17:12,150
So Amazon Linux, easy to hyphen user, that's the user, right?

273
00:17:12,150 --> 00:17:14,069
And we can just use that variable.

274
00:17:14,369 --> 00:17:15,720
Let's see this file.

275
00:17:16,260 --> 00:17:18,359
So we'll say var dot user.

276
00:17:19,440 --> 00:17:21,839
Var dot user.

277
00:17:21,839 --> 00:17:22,890
The capital user.

278
00:17:23,790 --> 00:17:24,420
Key.

279
00:17:25,560 --> 00:17:26,579
Private.

280
00:17:27,480 --> 00:17:28,650
Underscore.

281
00:17:29,760 --> 00:17:33,990
Key again, the content of the private key.

282
00:17:33,990 --> 00:17:37,410
So you can use the file function and you can give.

283
00:17:38,620 --> 00:17:39,580
Dove key.

284
00:17:39,610 --> 00:17:46,030
The name of the key or again, you can put this also as a variable, but let's skip that for now.

285
00:17:46,840 --> 00:17:47,050
Okay.

286
00:17:47,050 --> 00:17:48,320
Also, one more thing.

287
00:17:48,340 --> 00:17:52,660
Host self dot.

288
00:17:55,210 --> 00:17:57,970
Public underscore IP.

289
00:17:58,540 --> 00:18:05,110
So that's a way to tell TerraForm that use the public IP of the instance and use this user and key to

290
00:18:05,110 --> 00:18:05,770
login.

291
00:18:06,250 --> 00:18:11,710
Also, I would like to do the remote exec once this file the script is pushed.

292
00:18:11,710 --> 00:18:13,900
I would like to do a remote exec.

293
00:18:14,710 --> 00:18:16,120
And execute my script.

294
00:18:16,120 --> 00:18:16,810
So.

295
00:18:18,230 --> 00:18:24,920
We're going to use a provisional, we call it as a remote hyphen exec.

296
00:18:25,940 --> 00:18:31,700
And this provision can execute commands on the remote machine, on a receiver instance that will be

297
00:18:31,700 --> 00:18:32,330
launching.

298
00:18:33,350 --> 00:18:39,170
So we can mention the list of commands should be in this format in line equal to and in a list format.

299
00:18:40,370 --> 00:18:42,590
And you can keep giving your commands.

300
00:18:42,620 --> 00:18:43,760
Line by line.

301
00:18:43,940 --> 00:18:46,640
So I'm going to say first, make my script executable.

302
00:18:46,670 --> 00:18:47,030
C h.

303
00:18:47,030 --> 00:18:49,910
Mod u plus x.

304
00:18:51,120 --> 00:18:52,800
And the part of our script.

305
00:18:56,790 --> 00:18:59,190
And then finally executed.

306
00:19:02,850 --> 00:19:02,960
Now.

307
00:19:03,230 --> 00:19:07,490
Now, there are really so many curly braces and we need to be careful at this part.

308
00:19:08,820 --> 00:19:12,390
So let's check once again that curly brace.

309
00:19:13,580 --> 00:19:13,680
Right.

310
00:19:13,760 --> 00:19:15,800
And it's a resource instance resource.

311
00:19:15,800 --> 00:19:18,350
Start over here and it should complete there.

312
00:19:19,410 --> 00:19:20,940
In between that you have.

313
00:19:21,940 --> 00:19:23,680
Distance properties.

314
00:19:24,600 --> 00:19:29,460
Provisional polls close there and remote exit opens and closes.

315
00:19:29,460 --> 00:19:32,610
Their connection opens and closes there.

316
00:19:32,880 --> 00:19:33,960
Seems good.

317
00:19:34,530 --> 00:19:37,110
Let's save this and let's test it.

318
00:19:41,070 --> 00:19:43,080
First thing terraform in it.

319
00:19:46,540 --> 00:19:46,990
Okay.

320
00:19:47,620 --> 00:19:49,120
It's a list, comma separated.

321
00:19:49,120 --> 00:19:49,450
Right.

322
00:19:49,450 --> 00:19:51,430
So we have to give a comma there.

323
00:19:52,470 --> 00:19:54,840
Let's see that control less.

324
00:20:01,490 --> 00:20:02,360
Okay, terraforming.

325
00:20:02,360 --> 00:20:03,230
It is done.

326
00:20:03,410 --> 00:20:04,910
Let's do a terraform.

327
00:20:05,030 --> 00:20:06,020
Validate.

328
00:20:08,210 --> 00:20:09,890
It would validate our syntax.

329
00:20:15,100 --> 00:20:16,030
Wow, that's nice.

330
00:20:16,030 --> 00:20:16,900
It's a success.

331
00:20:16,900 --> 00:20:19,720
Let's say TerraForm FM to format it.

332
00:20:21,430 --> 00:20:23,840
And let's see the instant starter file.

333
00:20:25,400 --> 00:20:26,750
Properly formatted.

334
00:20:26,870 --> 00:20:27,620
Very good.

335
00:20:28,730 --> 00:20:29,780
TerraForm.

336
00:20:31,150 --> 00:20:31,960
Plan.

337
00:20:35,610 --> 00:20:41,160
Okay to add to to add the two things are getting add added.

338
00:20:41,430 --> 00:20:44,100
One is the instance and the other is the key.

339
00:20:44,440 --> 00:20:46,740
And you can see the public key content also.

340
00:20:47,700 --> 00:20:48,090
Yeah.

341
00:20:48,300 --> 00:20:50,340
Let's do a terraform.

342
00:20:50,370 --> 00:20:51,450
Apply.

343
00:20:56,530 --> 00:20:57,430
Yes.

344
00:21:01,940 --> 00:21:04,220
Kat's Keeper is getting created.

345
00:21:04,510 --> 00:21:06,500
Oh, the public is getting uploaded.

346
00:21:07,820 --> 00:21:09,860
And instance is getting created.

347
00:21:12,400 --> 00:21:16,830
Okay, This instance security group should allow 22 from our IP.

348
00:21:18,540 --> 00:21:20,910
Can't see the security group that we have selected.

349
00:21:20,940 --> 00:21:23,700
Otherwise the provision will not be able to do anything.

350
00:21:24,560 --> 00:21:26,780
So we said 22 from my IP.

351
00:21:26,810 --> 00:21:27,780
I think that's good.

352
00:21:27,800 --> 00:21:28,640
That's fine.

353
00:21:30,250 --> 00:21:32,350
So it completed successfully.

354
00:21:32,770 --> 00:21:34,030
So let's check that.

355
00:21:34,600 --> 00:21:34,840
Okay.

356
00:21:34,840 --> 00:21:36,760
Let's go to keep Air Force.

357
00:21:39,720 --> 00:21:41,430
So you'll see Dove key.

358
00:21:42,160 --> 00:21:42,520
Okay.

359
00:21:42,550 --> 00:21:44,140
That is the name of the key.

360
00:21:44,710 --> 00:21:47,350
So if you go to our instance, start your file.

361
00:21:47,620 --> 00:21:50,660
We have given key name, key, underscore, name, dove key.

362
00:21:50,680 --> 00:21:51,940
So that's the name of the key.

363
00:21:52,090 --> 00:21:53,250
Not dove hyphen key.

364
00:21:53,260 --> 00:21:58,000
This is the name of a resource which we use it to refer in our other resources.

365
00:21:58,000 --> 00:21:59,440
Like here we have used it.

366
00:22:01,020 --> 00:22:03,510
Okay, so let's go back to the console.

367
00:22:04,050 --> 00:22:06,060
Our instance should be up and running.

368
00:22:07,120 --> 00:22:08,200
That's our instance.

369
00:22:08,920 --> 00:22:09,250
All right.

370
00:22:09,490 --> 00:22:10,480
The latest instance.

371
00:22:10,480 --> 00:22:11,530
Let's refresh.

372
00:22:12,070 --> 00:22:13,630
Yeah, that's our instance.

373
00:22:14,850 --> 00:22:17,650
And you should have the verb service enabled.

374
00:22:17,670 --> 00:22:22,770
Let's allow Port 80 from my IP so I can access it.

375
00:22:23,850 --> 00:22:27,420
Bought it from my IP.

376
00:22:31,250 --> 00:22:31,370
Yeah.

377
00:22:31,460 --> 00:22:33,890
Let's get its IP address.

378
00:22:39,140 --> 00:22:42,500
And yes, you see, it's provisioned with a website.

379
00:22:43,370 --> 00:22:45,170
The Web service is really running.

380
00:22:48,870 --> 00:22:50,010
Okay, that is good.

381
00:22:50,040 --> 00:22:52,170
A few points I want to note.

382
00:22:53,220 --> 00:22:57,780
But to bring to your attention really is the Web dot asset shell script.

383
00:22:58,080 --> 00:23:01,590
So you're going to get it anyways through from the source code.

384
00:23:02,500 --> 00:23:03,880
All these exercises.

385
00:23:04,880 --> 00:23:10,910
But if you're copying it into some Windows editor and from there you copy it into.

386
00:23:12,880 --> 00:23:14,620
A text file with name like that.

387
00:23:14,650 --> 00:23:14,860
Right.

388
00:23:14,890 --> 00:23:19,470
So there may be some invisible special character which you will not be able to see.

389
00:23:19,480 --> 00:23:26,770
So I recommend you copy to a normal notepad with the windows, normal notepad, and then put then put

390
00:23:26,770 --> 00:23:28,600
it in your ID when, where you want.

391
00:23:28,840 --> 00:23:34,690
If that is also troublesome, then you can just from the git bash, you can just say vim and give the

392
00:23:34,690 --> 00:23:35,830
name of your script.

393
00:23:36,020 --> 00:23:36,310
Right.

394
00:23:36,340 --> 00:23:38,440
And then put the content, type the content.

395
00:23:38,980 --> 00:23:43,480
Otherwise there could be some special character which would be very difficult for you to find out and

396
00:23:43,480 --> 00:23:45,010
you will keep getting errors.

397
00:23:45,450 --> 00:23:48,130
And then that is all in this section.

398
00:23:48,130 --> 00:23:51,970
Let's delete our instance, TerraForm Destroy.

399
00:23:52,360 --> 00:23:55,360
So not only our instance, our key will also get deleted.

400
00:24:02,760 --> 00:24:02,940
Yeah.

401
00:24:03,000 --> 00:24:03,810
You see there.

402
00:24:04,500 --> 00:24:06,660
I will not delete it for a moment.

403
00:24:07,650 --> 00:24:10,410
I will show you the TerraForm State file.

404
00:24:11,010 --> 00:24:11,220
Yeah.

405
00:24:11,280 --> 00:24:15,540
So all the content is in the TerraForm State file, right?

406
00:24:16,020 --> 00:24:21,480
And you're going to see the next session if you want to print anything out, like private type your

407
00:24:21,480 --> 00:24:22,530
public IP.

408
00:24:22,920 --> 00:24:26,400
It's going to be printing it from this TerraForm State file.

409
00:24:26,430 --> 00:24:30,540
And so we can access our resources and we can print them.

410
00:24:31,760 --> 00:24:33,530
Okay, Let's destroy it now.

411
00:24:43,600 --> 00:24:48,480
You know, okay, my resources are deleted and that should be all in this section.

412
00:24:49,230 --> 00:24:51,300
Wrap this up and join me in the next section.

