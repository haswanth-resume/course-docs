1
00:00:00,450 --> 00:00:01,320
All right.

2
00:00:01,510 --> 00:00:02,710
So service.

3
00:00:02,940 --> 00:00:05,130
All the services are running fine.

4
00:00:05,460 --> 00:00:08,820
In this lecture, we will be migrating this code.

5
00:00:09,620 --> 00:00:12,080
The Profile Project code.

6
00:00:12,530 --> 00:00:15,530
The branch see hyphen Jenkins.

7
00:00:16,850 --> 00:00:20,960
All this code, we will be migrating in our own git repository.

8
00:00:20,960 --> 00:00:21,560
So.

9
00:00:22,300 --> 00:00:24,280
Log into your GitHub account.

10
00:00:25,000 --> 00:00:29,890
Which you created in Politico sites and they create repository.

11
00:00:30,640 --> 00:00:33,220
And let's give this repository a name.

12
00:00:33,610 --> 00:00:37,660
I will give a name as the Privacy Project.

13
00:00:38,260 --> 00:00:40,600
And it is this name is available so I can take it.

14
00:00:40,600 --> 00:00:43,060
And we will be creating a private repository.

15
00:00:43,060 --> 00:00:44,500
So click on private.

16
00:00:45,700 --> 00:00:47,680
And create a repository.

17
00:00:48,340 --> 00:00:53,350
Okay, now this is how it will be different from what you will be doing in your own actual project.

18
00:00:53,590 --> 00:00:58,300
You will have a source code repository like that, and you will directly have access to it.

19
00:00:58,420 --> 00:01:03,910
You will have your account which will have privilege to make changes to the repository.

20
00:01:04,330 --> 00:01:05,050
But.

21
00:01:06,270 --> 00:01:06,990
In this course.

22
00:01:06,990 --> 00:01:09,720
While we are practicing this, we need to make changes.

23
00:01:09,720 --> 00:01:12,990
Comments and you cannot make change in my repository.

24
00:01:12,990 --> 00:01:14,070
This is my repository.

25
00:01:14,070 --> 00:01:17,640
I cannot give thousands of students the access to my repository, right?

26
00:01:17,640 --> 00:01:22,070
So for that purpose, you have to create your own repository.

27
00:01:22,080 --> 00:01:27,600
Now, you may or may not have this in real time, but you will definitely have a GitHub repository access,

28
00:01:27,600 --> 00:01:31,890
whether it will be your own created repository or the project repository.

29
00:01:32,040 --> 00:01:36,480
So in order to simulate similar behavior, we are creating our own repository here.

30
00:01:37,410 --> 00:01:41,340
So you will have two kinds of access to your git repository, GitHub repository.

31
00:01:41,340 --> 00:01:43,740
One is HTTP based and one is SSH.

32
00:01:43,740 --> 00:01:44,970
We will be using as such.

33
00:01:44,970 --> 00:01:47,460
This is the way forward and a safer approach.

34
00:01:47,760 --> 00:01:55,350
Now how do I migrate this code from this repository to my own repository that we'll be seeing now?

35
00:01:55,650 --> 00:02:02,970
But I also need to set up authentication method from my laptop to this GitHub account for that purpose.

36
00:02:02,970 --> 00:02:10,530
As I said, we'll be using SSH login, so open your git bash or for macOS use open your terminal and

37
00:02:10,530 --> 00:02:19,110
run the command search hyphen key gen and this command just need to run a hyphen keychain, hit enter

38
00:02:19,800 --> 00:02:21,090
and just hit enter.

39
00:02:21,090 --> 00:02:22,410
Enter, enter.

40
00:02:22,440 --> 00:02:22,910
Okay.

41
00:02:23,630 --> 00:02:28,430
Now, this created a public key in this path and a private key in this part.

42
00:02:28,640 --> 00:02:32,030
You need to copy the public key in your GitHub account.

43
00:02:32,060 --> 00:02:36,920
I say public key, not the private key, the one that is highlighted.

44
00:02:37,160 --> 00:02:45,230
So I'm going to clear the screen and I'm going to say cat tilde, which is the symbol of your home directory

45
00:02:45,260 --> 00:02:52,430
slash dot such slash ID underscore RSA dot pub do a cat.

46
00:02:53,860 --> 00:02:55,780
That's the public and that's how it looks.

47
00:02:55,780 --> 00:02:58,650
If it's a private key, it will be written there that it is a private key.

48
00:02:58,660 --> 00:03:01,690
So again, public key copied carefully.

49
00:03:03,360 --> 00:03:05,130
Make sure no extra space.

50
00:03:05,340 --> 00:03:06,060
Copy.

51
00:03:07,620 --> 00:03:09,060
Leave this tab as it is.

52
00:03:09,060 --> 00:03:12,030
Just open another tab and open GitHub.

53
00:03:12,720 --> 00:03:14,210
Make sure logged into your account.

54
00:03:14,220 --> 00:03:17,850
Click on this dropdown here and go to settings.

55
00:03:20,640 --> 00:03:23,550
And come to search and GPG keys.

56
00:03:25,420 --> 00:03:27,130
See new, newest, such key.

57
00:03:28,680 --> 00:03:29,700
Give some name.

58
00:03:30,420 --> 00:03:35,610
Like I will say, this is my laptop key and I will paste it.

59
00:03:37,830 --> 00:03:38,240
Okay.

60
00:03:38,250 --> 00:03:40,020
Once again, public key.

61
00:03:40,020 --> 00:03:45,030
I know I'm repeating again and again, but many people copy the private key, which is quite dangerous.

62
00:03:45,300 --> 00:03:48,420
The private key is the key to open this lock.

63
00:03:48,420 --> 00:03:51,570
So you put the lock, not the key lock here.

64
00:03:52,110 --> 00:03:53,430
And as such key.

65
00:03:55,510 --> 00:03:57,160
Once this is done, let's make a test.

66
00:03:57,190 --> 00:04:02,590
You need to run this command as a search hyphen capital T get at GitHub dotcom.

67
00:04:06,170 --> 00:04:06,530
Okay.

68
00:04:06,560 --> 00:04:07,220
See that?

69
00:04:07,490 --> 00:04:09,560
It says you have successfully authenticated.

70
00:04:09,620 --> 00:04:11,930
It basically used our private key.

71
00:04:12,260 --> 00:04:13,400
Let me show you that.

72
00:04:16,660 --> 00:04:22,000
So it has used this private key to login and connect with this public key.

73
00:04:22,450 --> 00:04:24,010
And this public key is on GitHub.

74
00:04:24,400 --> 00:04:25,570
So that worked.

75
00:04:26,170 --> 00:04:26,450
Okay.

76
00:04:26,470 --> 00:04:32,290
Once we set the authentication, create a folder somewhere, a directory somewhere, I'm creating it

77
00:04:32,290 --> 00:04:33,070
in F drive.

78
00:04:33,100 --> 00:04:35,020
Choose whatever directory you want.

79
00:04:35,050 --> 00:04:38,830
I will call this as project git repo.

80
00:04:40,050 --> 00:04:42,210
And I will do seed into it.

81
00:04:44,300 --> 00:04:47,430
Now create folder wherever you want.

82
00:04:47,450 --> 00:04:49,850
I have f drive, so I'm going to f drive.

83
00:04:50,450 --> 00:04:52,100
Now comes the migration part.

84
00:04:52,850 --> 00:04:59,180
First, I'm going to clone the Vpro file repository, which is a public repository git clone, hyphen

85
00:04:59,180 --> 00:05:00,820
b ci hyphen Jenkins.

86
00:05:00,830 --> 00:05:04,100
Make sure you get the branch name and hit enter.

87
00:05:07,430 --> 00:05:07,720
Okay.

88
00:05:07,760 --> 00:05:09,050
It cloned it to a less.

89
00:05:09,050 --> 00:05:10,880
And you should see this profile project.

90
00:05:10,880 --> 00:05:14,780
We will rename this folder with the name of our repository.

91
00:05:15,140 --> 00:05:17,060
So go back to your tab here.

92
00:05:17,060 --> 00:05:20,600
And that's our project name.

93
00:05:20,960 --> 00:05:22,490
Sorry, repository name.

94
00:05:23,270 --> 00:05:24,470
So copy that name.

95
00:05:24,470 --> 00:05:26,060
This is really not a mandatory step.

96
00:05:26,060 --> 00:05:28,220
You can have folder, any name you want.

97
00:05:28,640 --> 00:05:31,610
Go back to get bash or the terminal.

98
00:05:31,640 --> 00:05:34,520
So we're just renaming just for understanding.

99
00:05:34,520 --> 00:05:36,410
Purpose, as I said, is not mandatory.

100
00:05:36,410 --> 00:05:38,540
Your folder name can be anything.

101
00:05:41,660 --> 00:05:41,870
Okay.

102
00:05:41,870 --> 00:05:43,100
So we renamed it.

103
00:05:44,890 --> 00:05:46,870
Let's get into that folder.

104
00:05:48,420 --> 00:05:48,650
Okay.

105
00:05:48,660 --> 00:05:56,670
You should see here Sy Hyphen Jenkins that name we are in the repository and run this command cat dot

106
00:05:56,670 --> 00:05:58,480
git config.

107
00:05:58,500 --> 00:06:02,130
This is the file in your repository which will have.

108
00:06:03,460 --> 00:06:04,630
The remote you are.

109
00:06:04,810 --> 00:06:07,960
GitHub account repository, whatever you want to call it.

110
00:06:07,960 --> 00:06:10,270
So this early is for V Profile Project.

111
00:06:10,270 --> 00:06:14,080
We are going to replace this with our repository that we created.

112
00:06:14,080 --> 00:06:18,370
So all our code goes to our repository and to do that.

113
00:06:20,090 --> 00:06:21,230
This is the command.

114
00:06:22,870 --> 00:06:28,750
Get remote set URL origin and copy your URL of your repository.

115
00:06:29,810 --> 00:06:29,980
Okay.

116
00:06:30,050 --> 00:06:33,530
Click on set here and copy this.

117
00:06:37,770 --> 00:06:39,460
You look at it carefully.

118
00:06:41,120 --> 00:06:42,140
And hit it.

119
00:06:43,630 --> 00:06:43,970
Okay.

120
00:06:43,990 --> 00:06:50,430
Now, if we do a cat to the config file, you should see now your repository URL.

121
00:06:50,680 --> 00:06:54,130
Now I am going to create here one branch get.

122
00:06:55,340 --> 00:06:58,040
Branch hyphen c min.

123
00:07:00,400 --> 00:07:03,340
Get checkout men.

124
00:07:05,380 --> 00:07:05,840
Oops.

125
00:07:05,860 --> 00:07:07,240
Spelling mistake.

126
00:07:08,130 --> 00:07:09,480
Get check out Main.

127
00:07:11,230 --> 00:07:12,430
Clear the screen.

128
00:07:16,730 --> 00:07:17,040
Okay.

129
00:07:17,060 --> 00:07:20,760
So I have basically two branches now in my repository.

130
00:07:20,780 --> 00:07:23,420
One is CI hyphen Jenkins and one is main.

131
00:07:23,420 --> 00:07:25,070
We'll see how to use this main.

132
00:07:25,070 --> 00:07:30,770
Later, we'll switch back to Sy Hyphen Jenkins.

133
00:07:32,170 --> 00:07:32,350
Okay.

134
00:07:32,470 --> 00:07:35,650
Still, everything is on my local machine, on my laptop.

135
00:07:35,650 --> 00:07:36,700
I need to push this.

136
00:07:36,700 --> 00:07:40,510
So I'm going to say get push, hyphen, hyphen, all origin.

137
00:07:40,930 --> 00:07:47,080
This will push both the branch that I did check out on main and see Jenkins.

138
00:07:50,050 --> 00:07:50,700
OC.

139
00:07:51,530 --> 00:07:57,170
So this is going to our own private repository, the privacy project repository.

140
00:07:58,420 --> 00:07:58,730
Okay.

141
00:07:58,750 --> 00:07:59,290
You see that?

142
00:07:59,290 --> 00:08:01,380
Two branches that went.

143
00:08:01,390 --> 00:08:03,580
And now let's go to GitHub.

144
00:08:04,510 --> 00:08:05,980
Refresh this page.

145
00:08:07,070 --> 00:08:09,250
Okay for our repository, right?

146
00:08:09,260 --> 00:08:14,510
And if you see the code, you should see here two branches, main and C.I. Jenkins.

147
00:08:16,540 --> 00:08:21,100
And that's how we migrated the repository from one account to other account.

148
00:08:21,910 --> 00:08:28,570
One final thing in this video, we will be integrating our GitHub repository with our VTS code.

149
00:08:28,780 --> 00:08:30,580
So go back to get bash.

150
00:08:30,640 --> 00:08:37,059
Make sure you're in the repository and run the command code dot which will open your VTS code editor.

151
00:08:41,289 --> 00:08:41,919
Nola.

152
00:08:43,250 --> 00:08:43,789
Okay.

153
00:08:43,850 --> 00:08:44,450
All right.

154
00:08:45,210 --> 00:08:46,890
Now let's do some test here.

155
00:08:46,890 --> 00:08:50,610
You should know how to commit from voice code.

156
00:08:51,780 --> 00:08:54,720
Commit and push from Vsco to your GitHub repository.

157
00:08:54,720 --> 00:08:56,460
So let's make some test.

158
00:08:56,520 --> 00:09:01,140
Let's go to read MCM file and here there are a few hash.

159
00:09:01,140 --> 00:09:02,640
Let's add a few more hash.

160
00:09:03,450 --> 00:09:07,830
So just for the test, do control TSS which will save this file.

161
00:09:07,980 --> 00:09:12,210
And as soon as you save the file, you will see when notification pops here.

162
00:09:12,360 --> 00:09:14,400
Source Control, click on that.

163
00:09:15,570 --> 00:09:20,460
And here there is a drop down button you can commit and push at the same time.

164
00:09:20,460 --> 00:09:22,230
So you click on it and push.

165
00:09:23,080 --> 00:09:23,550
See?

166
00:09:23,560 --> 00:09:24,250
Yes.

167
00:09:25,900 --> 00:09:26,040
Okay.

168
00:09:26,140 --> 00:09:29,350
If you get this error, click on open git log.

169
00:09:31,550 --> 00:09:37,580
If you're using GitHub git for the first time from your computer, you will get this error.

170
00:09:37,580 --> 00:09:44,090
It is asking you to set your email and your username so all you need to do is just copy this command,

171
00:09:44,390 --> 00:09:50,000
go to get bash or terminal paste it and oops I made a mistake.

172
00:09:50,570 --> 00:09:51,560
Let's fix it.

173
00:09:51,860 --> 00:09:53,900
Directly pasted execute executed also.

174
00:09:53,900 --> 00:09:57,050
So let's give the user dot email.

175
00:09:57,050 --> 00:10:02,630
I'm going to see I am now dev ops at gmail.com.

176
00:10:03,680 --> 00:10:08,450
It's better you give the same email address that you use to create your GitHub account.

177
00:10:09,830 --> 00:10:10,970
And then.

178
00:10:12,410 --> 00:10:13,970
User dot.

179
00:10:15,300 --> 00:10:15,990
Name.

180
00:10:16,960 --> 00:10:18,410
And you can do anything you want.

181
00:10:18,430 --> 00:10:20,440
I'm just going to give my name.

182
00:10:22,070 --> 00:10:22,460
Okay.

183
00:10:22,610 --> 00:10:23,450
This is good.

184
00:10:23,480 --> 00:10:26,990
Now, what it does is it creates a file.

185
00:10:27,900 --> 00:10:31,800
Tilde slashdot git config this file.

186
00:10:33,050 --> 00:10:38,720
That you'll have your email and your username, which it will use to store the information when it is

187
00:10:38,720 --> 00:10:39,440
doing a comment.

188
00:10:39,440 --> 00:10:40,790
So that's done.

189
00:10:40,790 --> 00:10:44,210
Let's go back and let's do once again commit and push.

190
00:10:44,900 --> 00:10:45,680
Yes.

191
00:10:46,980 --> 00:10:52,170
Now either it will open up a window for you to give a commit message or it will open up this file where

192
00:10:52,170 --> 00:10:54,390
you can write a commit commit message.

193
00:10:54,390 --> 00:10:56,370
So I will say first.

194
00:10:59,620 --> 00:11:04,060
Commit type some message and say, put this.

195
00:11:05,250 --> 00:11:06,030
Just checkmark.

196
00:11:06,030 --> 00:11:08,880
Accept this, commit message and save.

197
00:11:12,470 --> 00:11:14,810
And wait for this done.

198
00:11:15,050 --> 00:11:15,950
It is done.

199
00:11:15,980 --> 00:11:17,270
If you want to check that.

200
00:11:17,360 --> 00:11:19,940
Go to your GitHub account.

201
00:11:21,150 --> 00:11:24,460
And you can see readmitted file 43 seconds ago.

202
00:11:24,480 --> 00:11:25,200
Committed.

203
00:11:25,440 --> 00:11:25,980
Right.

204
00:11:26,430 --> 00:11:27,250
All right.

205
00:11:27,270 --> 00:11:31,830
I know a lot of work, but extremely important to do for this project.

206
00:11:31,830 --> 00:11:34,950
So wrap this up and join me in the next lecture.

