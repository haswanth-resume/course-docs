1
00:00:11,610 --> 00:00:13,090
Hello and welcome.

2
00:00:13,110 --> 00:00:16,470
Welcome to the next project in the Davos Project series.

3
00:00:16,590 --> 00:00:22,890
The name of this project is Continuous Delivery with Jenkins and Tools.

4
00:00:23,600 --> 00:00:28,280
So if you have the continuous integration project, this is just an extension of that project.

5
00:00:28,280 --> 00:00:34,370
Continuous delivery force will understand what is continuous delivery, what are the problems that it

6
00:00:34,370 --> 00:00:34,970
solve.

7
00:00:35,180 --> 00:00:37,790
And then you will set up the continuous delivery pipeline.

8
00:00:42,980 --> 00:00:43,270
Okay.

9
00:00:43,280 --> 00:00:44,400
So this is the scenario.

10
00:00:44,420 --> 00:00:49,910
There there is a product development happening with Agile, SDLC.

11
00:00:50,570 --> 00:00:54,830
So all these developers are making regular code changes and building the product.

12
00:00:55,250 --> 00:00:59,390
And in an agile SDLC developer will make regular code changes.

13
00:01:00,250 --> 00:01:08,260
And all these code changes which gets merged with your remote repositories needs to be build tested

14
00:01:08,260 --> 00:01:14,590
and also needs to be deployed to servers for further software testing or performance testing or load

15
00:01:14,590 --> 00:01:15,250
testing.

16
00:01:15,400 --> 00:01:20,710
So before even it gets promoted to the production, there are so many tests that happens first on the

17
00:01:20,710 --> 00:01:25,900
code that happens in the continuous integration pipeline and then after delivering the code to the servers,

18
00:01:25,900 --> 00:01:28,120
more tests, tests are conducted.

19
00:01:33,460 --> 00:01:40,240
So once the code is packaged into an artifact, it will be deployed to servers, maybe staging servers,

20
00:01:40,240 --> 00:01:45,730
and then there will be more test conducted like software testing, integration testing, load testing,

21
00:01:45,730 --> 00:01:46,900
performance testing.

22
00:01:47,230 --> 00:01:53,830
And if this test reports checks out, fine, then only you get approval to deploy your changes to production.

23
00:02:01,810 --> 00:02:04,990
Now we have to understand we are working in an agile environment.

24
00:02:04,990 --> 00:02:10,570
There will be frequent code changes and all these changes needs to be deployed to different, different

25
00:02:10,570 --> 00:02:17,260
servers, which is called US delivery and which will be very time consuming if this process is manual.

26
00:02:18,040 --> 00:02:23,410
And moreover, the ops team will not be able to cope with such frequent changes.

27
00:02:23,410 --> 00:02:26,950
They will not be able to deploy it so frequently if the process is manual.

28
00:02:32,570 --> 00:02:35,630
And moreover, here comes a lot of dependencies.

29
00:02:36,080 --> 00:02:38,930
The developer will be dependent on build and release team.

30
00:02:39,050 --> 00:02:45,050
Those teams will be dependent on operations team and the interaction between these teams will be happening

31
00:02:45,050 --> 00:02:50,780
through ticketing system or through emails and some fancy tools also.

32
00:02:51,020 --> 00:02:56,690
But my point is, there are too much of dependencies, too many tools involved, which actually delays

33
00:02:56,690 --> 00:02:58,110
the process of delivery.

34
00:02:58,130 --> 00:03:05,000
So a developer, as fast as they're developing the code, not at the same speed or not at the same pace,

35
00:03:05,270 --> 00:03:07,220
the code is delivered to the server.

36
00:03:12,630 --> 00:03:17,940
One thing is for sure in this fast moving world, whenever there is a code change, this code needs

37
00:03:17,940 --> 00:03:24,870
to be built, tested, deployed and then tested more further before you deploy to production system.

38
00:03:25,290 --> 00:03:31,860
And if this has to be done for every commit, every pull request, then this process needs to be automated

39
00:03:31,860 --> 00:03:32,280
process.

40
00:03:32,760 --> 00:03:39,240
And whatever you build your test or deploy or for every place, there should be a notification, every

41
00:03:39,240 --> 00:03:40,980
task, completion or failure.

42
00:03:40,980 --> 00:03:43,470
There should be notification if something fails.

43
00:03:44,100 --> 00:03:50,400
The product owner who saw is the responsible developer or a tester will get into it and fix those problems.

44
00:03:50,400 --> 00:03:51,720
Even operations team.

45
00:03:52,880 --> 00:03:58,910
So if there is any bug in a code that can be isolated very quickly and developers can work on making

46
00:03:58,910 --> 00:04:04,010
the code change, making all the fix and patches, and then this automated process can repeat again.

47
00:04:04,770 --> 00:04:09,090
So completely automated build, test, deploy, test, deploy tests.

48
00:04:09,600 --> 00:04:15,690
This entire process is called this continuous delivery process.

49
00:04:17,440 --> 00:04:22,630
And mind you hear, the word delivery really means delivering it till preproduction.

50
00:04:22,630 --> 00:04:26,650
So your artifact is really ready now to deploy to production.

51
00:04:26,650 --> 00:04:28,360
We have not deployed to production.

52
00:04:28,510 --> 00:04:30,280
We are still waiting for the approval.

53
00:04:30,670 --> 00:04:37,060
We have delivered it to all the pre prod environment and even tested it and we are ready to deploy it

54
00:04:37,060 --> 00:04:37,600
on production.

55
00:04:37,600 --> 00:04:38,590
We just need the approval.

56
00:04:38,590 --> 00:04:43,240
That's what is continuous delivery process and we'll understand it much better by doing it.

57
00:04:47,300 --> 00:04:50,040
Some common benefits about continuous deliveries.

58
00:04:50,060 --> 00:04:52,670
You can resolve any issue quickly.

59
00:04:53,910 --> 00:04:57,360
So you don't wait and accumulate the bugs and errors in the code.

60
00:04:57,570 --> 00:04:59,730
If there is any problem, a code fix will be done.

61
00:04:59,730 --> 00:05:04,380
Automated process will deploy to everywhere and will make the test quickly so mean.

62
00:05:04,380 --> 00:05:06,150
Time to repair will be very short.

63
00:05:09,840 --> 00:05:15,900
It will be very well agile and no human intervention or very, very less human intervention.

64
00:05:15,900 --> 00:05:18,480
No human intervention is better, actually.

65
00:05:18,720 --> 00:05:22,620
So you try to achieve with your continuous delivery pipeline, no human intervention.

66
00:05:24,050 --> 00:05:29,900
In such cases when you're running your pipeline and if you happen to have any bug or any error in your

67
00:05:29,900 --> 00:05:34,160
pipeline or in the code, it can be isolated very quickly and you can fix it.

68
00:05:35,020 --> 00:05:35,300
Okay.

69
00:05:35,320 --> 00:05:37,960
Now let's see the tools that we are going to use.

70
00:05:39,120 --> 00:05:39,420
Okay.

71
00:05:39,450 --> 00:05:46,020
So the tools are first we will be using Jenkins as a continuous integration and continuous delivery

72
00:05:46,020 --> 00:05:46,680
server.

73
00:05:46,920 --> 00:05:53,250
Next repository from where we'll download Maven dependency and upload our artifact.

74
00:05:54,190 --> 00:06:01,810
Next Sona Cube server sona cube scanner for code analysis and sona cube server to check the quality

75
00:06:01,810 --> 00:06:10,630
gates maven which will be used in Jenkins to build our artifact our Java artifact repository, where

76
00:06:10,630 --> 00:06:14,560
we will have our source code and our pipeline code as well.

77
00:06:17,890 --> 00:06:20,260
Slack for notifications.

78
00:06:20,960 --> 00:06:23,540
Docker to build our Docker images.

79
00:06:23,780 --> 00:06:29,400
So we will copy our artifact, our Java artefact in a Docker image.

80
00:06:29,420 --> 00:06:33,410
Publish the Docker image to Amazon ACR.

81
00:06:33,680 --> 00:06:38,600
So here, the final product in our continuous integration will be a Docker image.

82
00:06:38,870 --> 00:06:48,590
We build it in the Jenkins and push it to Amazon easier elastic container registry x where we will be

83
00:06:48,590 --> 00:06:50,900
hosting our Docker containers.

84
00:06:51,820 --> 00:07:00,940
A.W. Seelye, which will run from Jenkins fetch the latest image from Amazon ACR and deployed on.

85
00:07:02,080 --> 00:07:03,670
Ethics cluster.

86
00:07:04,630 --> 00:07:07,360
Let's take a look at all these tools in a flow.

87
00:07:09,630 --> 00:07:12,000
So developer will be using get.

88
00:07:12,950 --> 00:07:20,090
To make changes to the code committed and push it to GitHub, which will also have our Jenkins pipeline

89
00:07:20,090 --> 00:07:20,600
code.

90
00:07:21,820 --> 00:07:26,080
Jenkins will fetch the latest code whenever there is a comet.

91
00:07:27,320 --> 00:07:36,620
Using Maven will run a unit test textile for code analysis, then sonar scanner again for code analysis.

92
00:07:36,890 --> 00:07:39,140
Upload the result to sonar cube server.

93
00:07:39,440 --> 00:07:42,050
Check for quality gates if everything is good.

94
00:07:42,830 --> 00:07:47,360
That build the Docker image, which will have the Java artefact in it.

95
00:07:47,690 --> 00:07:54,980
This Docker image will be a tomcat docker image with our artifact in that which will be pushed or published

96
00:07:54,980 --> 00:07:56,630
to Amazon ACR.

97
00:07:57,380 --> 00:08:03,890
Then we will use a C command from Jenkins Pipeline, which will deploy.

98
00:08:04,860 --> 00:08:09,030
Our latest image to Amazon X cluster.

99
00:08:09,030 --> 00:08:16,080
So Amazon X will fetch the latest image from ACR and run it on x cluster.

100
00:08:18,640 --> 00:08:21,300
Take a look once again at this flu.

101
00:08:24,260 --> 00:08:24,650
Okay.

102
00:08:24,680 --> 00:08:25,790
The objectives.

103
00:08:26,000 --> 00:08:29,270
So we want fault isolation quickly.

104
00:08:29,720 --> 00:08:31,550
We want short MDR.

105
00:08:32,870 --> 00:08:34,789
We want fast turnaround time.

106
00:08:34,909 --> 00:08:41,390
So if there is any new request and a new code change, it can be built quickly by the developer and

107
00:08:41,390 --> 00:08:43,610
can be also delivered very quickly.

108
00:08:43,730 --> 00:08:46,610
So that's what fast turnaround time means here.

109
00:08:48,650 --> 00:08:50,120
And less disruptive.

110
00:08:50,450 --> 00:08:54,050
Once everything is automated, you have in that continuous delivery pipeline.

111
00:08:54,590 --> 00:08:57,130
Then there are very less chance of making human error.

112
00:08:57,140 --> 00:08:59,720
No human error actually in the pipeline is going on.

113
00:09:00,140 --> 00:09:01,850
So it's going to be less disruptive.

114
00:09:03,620 --> 00:09:06,540
All right, so let's achieve our goals.

115
00:09:12,760 --> 00:09:13,060
Okay.

116
00:09:13,060 --> 00:09:18,120
Now we'll see the architecture of continuous delivery pipeline and also the flow of execution, how

117
00:09:18,130 --> 00:09:20,230
we're going to execute this entire project.

118
00:09:23,070 --> 00:09:23,370
Okay.

119
00:09:23,370 --> 00:09:24,630
So this is the design.

120
00:09:26,220 --> 00:09:31,350
So first thing developer makes a code change once you have a continuous delivery pipeline set up.

121
00:09:31,770 --> 00:09:35,280
Then this entire process will execute automatically.

122
00:09:36,030 --> 00:09:40,170
So the law makes a code change into a remote repository.

123
00:09:40,440 --> 00:09:42,470
We are using we are going to use GitHub.

124
00:09:42,480 --> 00:09:44,850
So as soon as there is a new commit in GitHub.

125
00:09:45,240 --> 00:09:51,750
Jenkins server or automation server is going to fetch the latest changes automatically build it, run

126
00:09:51,750 --> 00:09:57,270
some test, unit test or code analysis all the kinds of tests and give the information to.

127
00:09:58,050 --> 00:09:59,730
The developer on Slack.

128
00:10:00,250 --> 00:10:01,380
Oh, what are they using?

129
00:10:01,380 --> 00:10:03,450
We're going to use Slack for notification.

130
00:10:04,410 --> 00:10:09,870
Then the next job in the pipeline will get executed, which is actually going to package the artifact

131
00:10:10,430 --> 00:10:14,370
version it and store it on some remote repository.

132
00:10:15,500 --> 00:10:18,340
Remote software repository like Nexus Sonata.

133
00:10:18,350 --> 00:10:23,450
If you're going to use Nexus sonar type repository, once that is done, a notification is sent.

134
00:10:24,200 --> 00:10:30,710
The next job then gets triggered automatically, which is going to deploy the artifact to staging environment.

135
00:10:31,310 --> 00:10:35,690
Once it is deployed to a staging environment, there will be a few more tests conducted integration,

136
00:10:35,690 --> 00:10:38,180
test load tests, any software testing.

137
00:10:38,180 --> 00:10:41,810
So there will be a software testers, test scripts.

138
00:10:42,170 --> 00:10:47,510
We are going to execute that from a Windows server, which is going to check our staging environment

139
00:10:47,870 --> 00:10:50,300
for any bugs, any errors.

140
00:10:50,330 --> 00:10:51,680
If everything is good.

141
00:10:52,580 --> 00:10:54,560
Then again, the notification will be sent.

142
00:10:54,770 --> 00:11:00,890
The artifact can then be stored to somewhere else for production, deployment or like S3 or you can

143
00:11:00,890 --> 00:11:03,770
keep it in excess repository also.

144
00:11:04,280 --> 00:11:06,260
And this will be a very well tested artifact.

145
00:11:06,290 --> 00:11:07,220
Now same artifact.

146
00:11:07,220 --> 00:11:08,750
You can deploy it on production.

147
00:11:09,080 --> 00:11:12,860
Now, in continuous delivery, we don't automatically deploy to production.

148
00:11:12,860 --> 00:11:16,640
In continuous delivery, we are done till here and we wait for the approval.

149
00:11:17,000 --> 00:11:22,010
We have the artifact stored now, which is well tested, deployed and again tested.

150
00:11:22,250 --> 00:11:23,360
We're waiting for the approval.

151
00:11:23,360 --> 00:11:27,200
Once we have the approval, we are going to trigger a job which is going to do deployment to production

152
00:11:27,200 --> 00:11:30,320
environment, and a few more tests will be conducted.

153
00:11:31,700 --> 00:11:33,860
So it will be a manual trigger.

154
00:11:34,770 --> 00:11:40,140
All right, now let's see the flow of execution, all the steps that we are going to perform in order

155
00:11:40,140 --> 00:11:46,080
to complete this project, in case whenever you are lost while doing the project, you don't know what

156
00:11:46,110 --> 00:11:47,880
or where we are currently.

157
00:11:47,910 --> 00:11:51,930
You can anytime watch this and understand where exactly you are.

158
00:11:52,020 --> 00:11:57,420
So starting with updating GitHub webhook with the new Jenkins IP.

159
00:11:59,230 --> 00:12:05,680
After doing the continuous integration project on Jenkins, you would have stopped Jenkins server and

160
00:12:05,680 --> 00:12:07,180
now you power it on again.

161
00:12:07,180 --> 00:12:11,140
It's public IP will change in our GitHub repository.

162
00:12:11,140 --> 00:12:16,210
We have given the public IP of Jenkins for the webhook, so we need to update that.

163
00:12:16,210 --> 00:12:21,640
We need to change it to the newer IP so our pipeline gets executed automatically whenever we make a

164
00:12:21,640 --> 00:12:22,570
code change.

165
00:12:24,140 --> 00:12:32,840
Now since we will be deploying Docker containers on X cluster first we need to prepare the Docker images

166
00:12:32,840 --> 00:12:38,420
and that gets prepared through Docker files that are already Docker files and we provide repository.

167
00:12:38,720 --> 00:12:42,050
We're going to copy it from there and put it in our own repository.

168
00:12:43,480 --> 00:12:47,470
We will be seeing the deployment on a staging environment and production environment, and for that

169
00:12:47,470 --> 00:12:51,910
we will create two separate Jenkins file in the source code in the repository.

170
00:12:52,820 --> 00:12:53,460
In place.

171
00:12:53,570 --> 00:12:55,370
We need to do a few things.

172
00:12:55,400 --> 00:13:01,760
Of course we need to create an IAM user, which Jenkins will use to access ACR repository.

173
00:13:01,790 --> 00:13:07,340
We also need to create the ACL repository where Jenkins will store the Docker images.

174
00:13:08,590 --> 00:13:16,930
In Jenkins we log into the dashboard and we need to install some plug ins, Amazon, ACR, Docker plugin,

175
00:13:16,930 --> 00:13:20,860
Docker, build and publish plug in pipeline steps.

176
00:13:21,310 --> 00:13:22,930
These are the plugins that we need to install.

177
00:13:22,960 --> 00:13:29,050
There's also one more plug in credentials which gets installed when you install this plugin as a dependency.

178
00:13:29,230 --> 00:13:34,720
So you'll need to mention that the Jenkins is going to build the Docker images.

179
00:13:34,720 --> 00:13:37,660
So we will be installing Docker engine on the Jenkins.

180
00:13:38,540 --> 00:13:43,010
So Docker engine is the tool in the Jenkins that will build the docker images.

181
00:13:43,760 --> 00:13:44,810
It will use CLI.

182
00:13:44,840 --> 00:13:51,890
So when we deploy our docker images to x cluster, we will be running a sqlite commands.

183
00:13:51,890 --> 00:13:54,500
So we install a cloud as well.

184
00:13:56,740 --> 00:14:01,450
After all this preparation, we are going to write the code in the Jenkins file to build the Docker

185
00:14:01,450 --> 00:14:04,150
image and publish it to a CCR.

186
00:14:05,610 --> 00:14:08,430
Once our image is published to our.

187
00:14:09,380 --> 00:14:16,610
We will need x elastic container service to run our Docker container from our Docker image.

188
00:14:16,670 --> 00:14:24,230
So we need to create an X, so we have to create x cluster in that we create task definition.

189
00:14:25,670 --> 00:14:27,400
And then we create a service.

190
00:14:27,410 --> 00:14:30,770
This service is going to create the Docker container for us.

191
00:14:30,770 --> 00:14:34,280
It's going to fetch the image from ACR and run the container.

192
00:14:34,280 --> 00:14:37,850
It will also provide us load balancer and few other things that we will be seeing.

193
00:14:38,450 --> 00:14:41,420
Once our X cluster and service is set up.

194
00:14:41,420 --> 00:14:46,790
We will write the code in the Jenkins file to deploy our Docker image to X cluster.

195
00:14:47,840 --> 00:14:50,720
Now, so far, this one is for the staging environment.

196
00:14:51,720 --> 00:14:59,490
Once we deploy our Docker container on staging easiest cluster, we need to deploy to production environment.

197
00:14:59,490 --> 00:15:02,460
Of course, in real time there will be testing, there'll be software testing.

198
00:15:02,460 --> 00:15:07,410
Once everything is approved then you can deploy the container to the production environment.

199
00:15:07,410 --> 00:15:11,610
So we'll just repeat the same step eight and nine for production.

200
00:15:11,610 --> 00:15:12,660
Easiest cluster.

201
00:15:14,240 --> 00:15:16,640
Then we will see steps or process.

202
00:15:16,640 --> 00:15:20,060
How do we promote our Docker container to production environment?

203
00:15:20,660 --> 00:15:26,450
So these are all the steps or stages that we will be executing in order to complete this project.

204
00:15:27,080 --> 00:15:30,410
Take a look once again and join me in the next lecture.

