1
00:00:00,710 --> 00:00:05,660
Will use Docker compose to run all these containers and connect them together.

2
00:00:06,170 --> 00:00:08,930
And for this we need to install Docker compose.

3
00:00:10,020 --> 00:00:15,240
Dr. Campos Documentation docs dot, dot, dot com slash Campos.

4
00:00:16,480 --> 00:00:19,180
Dr. Campos reads a file.

5
00:00:19,180 --> 00:00:21,330
Dr. Hyphen, Campos Will.

6
00:00:22,000 --> 00:00:24,760
You mention the containers services.

7
00:00:24,760 --> 00:00:27,010
You see over there are actually the containers.

8
00:00:27,250 --> 00:00:33,040
So in this example, you have a web container and you have a red is container container named Web and

9
00:00:33,040 --> 00:00:37,600
container named Red is red is container is going to be built.

10
00:00:37,630 --> 00:00:39,340
It's going to be run from an image.

11
00:00:39,360 --> 00:00:42,160
It's going to fetch this image and run the container.

12
00:00:42,160 --> 00:00:43,960
And there are no options over here.

13
00:00:43,960 --> 00:00:45,640
Just fetch the container and run it.

14
00:00:45,640 --> 00:00:46,360
That's all.

15
00:00:47,170 --> 00:00:53,180
But for web container there is a build dot, so there should be a Docker file present.

16
00:00:53,200 --> 00:00:59,230
So it's going to build container, build an image from a Docker file and run a container with this name

17
00:00:59,710 --> 00:01:00,560
ports.

18
00:01:01,120 --> 00:01:06,250
It's going to expose or map port 5000 with the container port 5000.

19
00:01:07,630 --> 00:01:10,240
Volumes so you can attach multiple volumes.

20
00:01:10,240 --> 00:01:16,540
Hyphen dot current working directory will be mapped with slash code directory in the container and one

21
00:01:16,540 --> 00:01:18,430
more volume log Volume zero.

22
00:01:19,030 --> 00:01:21,010
This volume is created over here.

23
00:01:21,010 --> 00:01:23,200
Volumes the name of the volume.

24
00:01:24,110 --> 00:01:29,480
So it's going to create that volume and then map that volume with the container volume.

25
00:01:29,810 --> 00:01:32,240
So this is a sample Docker compose file.

26
00:01:32,240 --> 00:01:32,630
You have.

27
00:01:32,630 --> 00:01:38,060
Once you have written a Docker compose ML file, you say Docker compose up, it will bring up all the

28
00:01:38,060 --> 00:01:41,030
containers together in the same network like this.

29
00:01:41,030 --> 00:01:42,980
We have to create a docker compose file.

30
00:01:43,010 --> 00:01:48,980
We have to mention all our services, all our containers with the right details, right?

31
00:01:48,980 --> 00:01:50,750
But first we need to install Docker compose.

32
00:01:50,750 --> 00:01:52,640
So let's go to install compose.

33
00:01:54,270 --> 00:01:55,110
Linux.

34
00:01:56,190 --> 00:01:56,900
You're going to do it.

35
00:01:56,900 --> 00:02:04,580
And our Vagrant VM, which is Linux, so let's copy that command which is going to download the Docker

36
00:02:04,580 --> 00:02:05,690
compose binary.

37
00:02:06,670 --> 00:02:07,930
And let's piece it.

38
00:02:13,820 --> 00:02:15,260
Okay, so it kept it out.

39
00:02:15,260 --> 00:02:17,300
Here, use our local docker compose.

40
00:02:17,330 --> 00:02:22,130
This should not be a read only this should be not in executable mode, so we have to give it executable

41
00:02:22,130 --> 00:02:22,880
permission.

42
00:02:23,670 --> 00:02:24,870
For all the user.

43
00:02:25,380 --> 00:02:27,870
And I have to say pseudo.

44
00:02:28,970 --> 00:02:29,750
For that.

45
00:02:31,340 --> 00:02:33,020
And should have the command.

46
00:02:33,020 --> 00:02:35,990
Dr. Campos hyphen hyphen version.

47
00:02:37,780 --> 00:02:39,820
Dr. Campos is set.

48
00:02:42,400 --> 00:02:47,170
It's time to write Doggett Campos yaml file and we'll do it through intelligent.

49
00:02:50,670 --> 00:02:52,620
And I'll write it here at the top level.

50
00:02:55,540 --> 00:03:00,760
File Docker hyphen compose dot ml.

51
00:03:05,280 --> 00:03:06,870
Okay, first diversion.

52
00:03:06,900 --> 00:03:09,360
So I'm going to use version three.

53
00:03:13,980 --> 00:03:15,840
3.8 is mentioned.

54
00:03:17,350 --> 00:03:19,870
In this sample Docker compose file.

55
00:03:20,110 --> 00:03:22,480
But we are good with the third version.

56
00:03:23,870 --> 00:03:25,010
Services.

57
00:03:26,530 --> 00:03:27,930
And now name of the containers.

58
00:03:27,940 --> 00:03:34,510
Name of the container should be, as we have referred it, in application properties file and Engine

59
00:03:34,510 --> 00:03:35,920
X configuration file.

60
00:03:37,740 --> 00:03:39,660
Tomcat should be with this name.

61
00:03:40,840 --> 00:03:41,780
DB Which should be.

62
00:03:42,040 --> 00:03:44,140
DB There should be cash.

63
00:03:44,170 --> 00:03:44,960
There should be rabbit.

64
00:03:45,010 --> 00:03:48,550
MQ And of course, the port numbers also, we have to take care.

65
00:03:50,540 --> 00:03:51,830
We'll also need a volume.

66
00:03:51,830 --> 00:03:52,550
So.

67
00:03:54,270 --> 00:03:56,160
I will see volumes.

68
00:03:57,100 --> 00:03:57,850
Colon.

69
00:03:58,600 --> 00:04:01,030
I'll create a volume name with pure DB data.

70
00:04:03,840 --> 00:04:09,000
So a local volume which will map with our DB container var lib, my SQL directory.

71
00:04:09,180 --> 00:04:11,070
So let's say the pro DB.

72
00:04:11,550 --> 00:04:12,930
That's the container name.

73
00:04:13,860 --> 00:04:18,720
Again, once again, the name is based on what I have given in application properties file.

74
00:04:19,950 --> 00:04:20,120
Okay.

75
00:04:20,540 --> 00:04:21,410
Image.

76
00:04:23,670 --> 00:04:25,140
So our image.

77
00:04:26,700 --> 00:04:28,260
Docker images.

78
00:04:29,720 --> 00:04:30,470
DPI.

79
00:04:38,790 --> 00:04:40,590
And Jack, we have given we won.

80
00:04:40,590 --> 00:04:43,680
There is no latest tax, so we have to make sure we then we give the tag.

81
00:04:44,520 --> 00:04:44,700
Okay.

82
00:04:44,790 --> 00:04:45,690
Ports.

83
00:04:48,610 --> 00:04:49,660
I need to list.

84
00:04:50,390 --> 00:04:51,620
In double quotes.

85
00:04:51,620 --> 00:04:56,030
I'm going to map 3306 host port with the container port 3306.

86
00:04:56,600 --> 00:05:02,810
If you're not sure about the exposed port, if you have taken an existing image so you can just inspect

87
00:05:03,200 --> 00:05:07,700
against it, Docker inspect and you can give.

88
00:05:09,640 --> 00:05:10,570
Your image.

89
00:05:12,480 --> 00:05:14,340
And you can find the exposed port.

90
00:05:16,660 --> 00:05:20,180
3306 is also 33060.

91
00:05:20,200 --> 00:05:24,430
But this is what we're going to use to access the MySQL service.

92
00:05:24,850 --> 00:05:29,740
So like that you can run inspect on mem cache, rabbit, MQ, all the other images that we have built

93
00:05:29,740 --> 00:05:32,460
and find the right exposed port and even the volumes.

94
00:05:32,470 --> 00:05:38,830
So volume var lib, my SQL, this we're going to map with the volume that we created or we are going

95
00:05:38,830 --> 00:05:40,360
to create through compose file.

96
00:05:47,870 --> 00:05:48,830
Volumes.

97
00:05:50,530 --> 00:05:51,610
And list of volumes.

98
00:05:51,610 --> 00:05:56,320
So we're going to map our volume that we get created with.

99
00:05:57,950 --> 00:06:01,520
Var lib my SQL.

100
00:06:01,700 --> 00:06:09,230
So all the data from while lib my SQL will be downloaded over here in DB volume and we'll not lose our

101
00:06:09,230 --> 00:06:09,830
data.

102
00:06:12,420 --> 00:06:14,820
We also need to set an environment variable.

103
00:06:17,500 --> 00:06:19,050
It's already in the image.

104
00:06:19,060 --> 00:06:21,550
But if it's not, then you can do it at the runtime.

105
00:06:22,430 --> 00:06:27,140
My SQL root password were pro db pass pro db pass.

106
00:06:27,680 --> 00:06:34,040
So you can fake a password in the docker file and then you can put the right password when you are going

107
00:06:34,040 --> 00:06:36,500
to run your container.

108
00:06:37,900 --> 00:06:38,140
Okay.

109
00:06:38,140 --> 00:06:39,060
That was about Debbie.

110
00:06:39,060 --> 00:06:40,410
That should be fine for the DB.

111
00:06:40,420 --> 00:06:43,270
Now let's do for the cash.

112
00:06:43,900 --> 00:06:45,910
So cash container we're going to.

113
00:06:47,640 --> 00:06:48,150
This name?

114
00:06:48,300 --> 00:06:49,560
Prakash is zero.

115
00:06:50,490 --> 00:06:51,240
One.

116
00:06:55,620 --> 00:06:57,870
I'll give you a new line character.

117
00:07:03,530 --> 00:07:10,460
So we are just taking an official image mem cache dx which we are already downloaded and we just need

118
00:07:10,460 --> 00:07:11,720
to mention the ports.

119
00:07:11,750 --> 00:07:14,480
No other customizations required.

120
00:07:14,510 --> 00:07:15,890
11211.

121
00:07:15,890 --> 00:07:16,550
Marked with one.

122
00:07:16,550 --> 00:07:17,930
1211.

123
00:07:20,090 --> 00:07:20,330
Okay.

124
00:07:20,330 --> 00:07:21,740
Next rabbit MQ.

125
00:07:26,860 --> 00:07:27,220
Port.

126
00:07:27,220 --> 00:07:28,930
One five, six, seven two.

127
00:07:28,980 --> 00:07:29,490
Guest.

128
00:07:29,530 --> 00:07:31,300
Guest The credential.

129
00:07:35,870 --> 00:07:36,650
Image.

130
00:07:39,960 --> 00:07:42,000
Rabbit AMCU official image.

131
00:07:42,960 --> 00:07:43,800
Ports.

132
00:07:48,710 --> 00:07:52,940
1567215672.

133
00:07:54,050 --> 00:07:54,640
Two.

134
00:07:55,130 --> 00:07:55,340
Okay.

135
00:07:55,340 --> 00:08:01,040
If you also need to set the username and password, we have not built a customized image official image.

136
00:08:02,240 --> 00:08:06,980
So we can change data in the run time by giving the rabbit MQ default user and password.

137
00:08:08,870 --> 00:08:09,830
Sure, Mitch.

138
00:08:16,600 --> 00:08:18,370
Like setting the username and password.

139
00:08:18,370 --> 00:08:19,030
So.

140
00:08:24,580 --> 00:08:26,440
So you have given guest.

141
00:08:37,390 --> 00:08:41,620
Anyways, this is the default user and password, but I'm showing you if you want to override, if you

142
00:08:41,620 --> 00:08:47,140
make changes over here, the username and password, then you can set the default user and password.

143
00:08:48,010 --> 00:08:48,380
Okay.

144
00:08:48,400 --> 00:08:50,200
Then our main hero.

145
00:08:51,580 --> 00:08:52,750
The pro app.

146
00:08:52,990 --> 00:08:55,270
So based on the engine configuration.

147
00:08:56,980 --> 00:08:58,450
The name of the container.

148
00:09:01,150 --> 00:09:01,960
Image.

149
00:09:11,090 --> 00:09:12,100
And that's the one.

150
00:09:15,730 --> 00:09:17,200
Colon v one.

151
00:09:18,680 --> 00:09:19,580
Ports.

152
00:09:23,950 --> 00:09:28,860
8080 mapping with ADHD, we have also exposed a volume.

153
00:09:28,870 --> 00:09:32,290
So if we'd like, you can create a volume and map it.

154
00:09:33,090 --> 00:09:36,300
With the Vpro app, you can run a docker inspect.

155
00:09:37,730 --> 00:09:39,620
And check the exposed volume.

156
00:09:43,890 --> 00:09:44,670
That one.

157
00:09:47,960 --> 00:09:52,490
But will also create a volume where pro app data.

158
00:09:57,320 --> 00:09:58,940
I see volumes.

159
00:10:01,890 --> 00:10:04,740
Hyphen the pro.

160
00:10:05,830 --> 00:10:07,270
App data.

161
00:10:12,670 --> 00:10:13,040
Okay.

162
00:10:13,060 --> 00:10:16,450
And finally, the engine X.

163
00:10:17,080 --> 00:10:23,050
So if you wish in this case, you can give any name like v, Pro web or V, pro engine X, whatever

164
00:10:23,050 --> 00:10:23,710
you want.

165
00:10:24,400 --> 00:10:29,830
Because venue is going to directly first access this container and then it's going to forward the request

166
00:10:29,830 --> 00:10:30,730
to the pro app.

167
00:10:30,730 --> 00:10:33,940
And the pro app is going to refer to back end containers.

168
00:10:35,100 --> 00:10:39,420
So you can give any name because this is the front end image.

169
00:10:45,980 --> 00:10:47,330
Colon v one.

170
00:10:49,580 --> 00:10:50,420
Ports.

171
00:10:53,580 --> 00:10:59,090
I'm going to map the default port at HTTP default port with the container port.

172
00:10:59,690 --> 00:11:01,910
If you wish, you can have any other exposed port.

173
00:11:01,910 --> 00:11:06,470
If Port eight is busy on your docker engine, then you can map any other port if you wish.

174
00:11:06,950 --> 00:11:08,420
But I'll keep it default.

175
00:11:08,930 --> 00:11:13,040
I don't have anything running on Port 80 on my Vagrant VM, so that is fine.

176
00:11:13,340 --> 00:11:14,750
Let's save this.

177
00:11:15,110 --> 00:11:16,370
Okay, let's review once again.

178
00:11:16,370 --> 00:11:18,860
So we have two volumes that will get created.

179
00:11:20,830 --> 00:11:28,210
The pro db container will get created with this name from this image will be exposed on port 3306 Container

180
00:11:28,210 --> 00:11:37,150
port 3306 Mapping the volume setting environment variable then mem cache with this name with an official

181
00:11:37,150 --> 00:11:47,440
image and only the port rabbit MQ image Official Rabbit image port 15672 and setting the user name and

182
00:11:47,440 --> 00:11:49,300
password with variables.

183
00:11:50,410 --> 00:11:52,060
Tomcat v Pro app.

184
00:11:52,110 --> 00:11:54,520
That's the name image that we have.

185
00:11:54,520 --> 00:12:02,620
Build our customized image port AT&T and also are mapping a volume with user local Tomcat web apps and

186
00:12:02,620 --> 00:12:10,090
finally Engine X again with our own built image port exposed 80 mapped with container port 80.

187
00:12:11,350 --> 00:12:13,420
So all of this seems to be good.

188
00:12:13,690 --> 00:12:15,550
It's time to test it now.

189
00:12:16,150 --> 00:12:18,040
So let's go to a docker engine.

190
00:12:18,040 --> 00:12:20,260
We have installed Docker compose over there.

191
00:12:20,470 --> 00:12:22,270
So we have option.

192
00:12:24,100 --> 00:12:25,380
Let's see how often I can help.

193
00:12:25,390 --> 00:12:30,220
We can see Dr. Campos up, but then we have so many options you can use.

194
00:12:33,010 --> 00:12:37,030
Dr. Campos up and a few other options, which we'll see.

195
00:12:38,860 --> 00:12:40,800
And we're going to run it in the background.

196
00:12:40,810 --> 00:12:46,510
First, let's run it in the foreground, Docker hyphen compose of We have to be in the Docker compose

197
00:12:46,510 --> 00:12:47,290
directory.

198
00:12:50,050 --> 00:12:54,250
Which is in slash Vagrant profile project.

199
00:12:56,310 --> 00:12:58,620
That we have docker compose y html.

200
00:13:00,930 --> 00:13:05,370
And let's create a directory called us compose and let's put it over there.

201
00:13:05,400 --> 00:13:06,930
Not mandatory, but.

202
00:13:10,200 --> 00:13:10,890
Oops.

203
00:13:12,090 --> 00:13:13,140
To just.

204
00:13:14,720 --> 00:13:15,740
Compass.

205
00:13:20,770 --> 00:13:24,190
Okay, We create a directory, compose, we move Docker compose inside that.

206
00:13:24,460 --> 00:13:26,170
Just to have a good view, that's all.

